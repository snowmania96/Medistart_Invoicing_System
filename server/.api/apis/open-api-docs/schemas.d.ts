declare const $Get: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly photoId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the photo to set spaceId to";
                };
            };
            readonly required: readonly ["photoId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d9e9f4a6d5b2e0017b6d5b2"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["345774fe76e5da340bf915e3"];
                };
                readonly spaceId: {
                    readonly type: "string";
                    readonly examples: readonly ["545774fe76e5da340bf915e8"];
                };
                readonly photoId: {
                    readonly type: "string";
                    readonly examples: readonly ["145774fe76e5da340bf915e2"];
                };
                readonly photoUrl: {
                    readonly type: "string";
                    readonly examples: readonly ["https://image.com"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Photo not found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddComplex: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "The title of the Complex";
                readonly examples: readonly ["My Title"];
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "The nickname of the Complex. Useful in searches";
                readonly examples: readonly ["My Nickname"];
            };
            readonly propertyIds: {
                readonly description: "An array that contains Ids for propertyIds that belong to this Complex. Could be an empty array [] (default)";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["63baba9c5c25ccae5595832b", "63babaab5c25ccae5595832c"];
            };
            readonly tags: {
                readonly description: "An array containing Tags for this Complex";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["Tag 1", "Tag 2"];
            };
        };
        readonly required: readonly ["title", "nickname"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["645788211c405b56beaf26c0"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [422];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Title and Nickname must not be empty"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressControllerGeocodeAddress: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                };
            };
            readonly publishedAddress: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                };
            };
        };
        readonly required: readonly ["address", "publishedAddress"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
                readonly publishedAddress: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressControllerGetAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty ID of the property for which you would like to retrieve the address.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                        readonly apartment: {
                            readonly type: "string";
                        };
                        readonly county: {
                            readonly type: "string";
                        };
                        readonly floor: {
                            readonly type: "string";
                        };
                        readonly unitNumber: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly searchable: {
                            readonly type: "string";
                        };
                        readonly buildingName: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address object configuration.";
                };
                readonly publishedAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                        readonly apartment: {
                            readonly type: "string";
                        };
                        readonly county: {
                            readonly type: "string";
                        };
                        readonly floor: {
                            readonly type: "string";
                        };
                        readonly unitNumber: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly searchable: {
                            readonly type: "string";
                        };
                        readonly buildingName: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address object configuration.";
                };
                readonly isPublishedAddressEnabled: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Address not found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressControllerUpdateAddress: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly apartment: {
                        readonly type: "string";
                        readonly examples: readonly ["4d"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly examples: readonly ["New York City"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly examples: readonly ["United States"];
                    };
                    readonly county: {
                        readonly type: "string";
                        readonly examples: readonly ["Nassau County"];
                    };
                    readonly floor: {
                        readonly type: "string";
                        readonly examples: readonly ["1D"];
                    };
                    readonly unitNumber: {
                        readonly type: "string";
                        readonly examples: readonly ["30a"];
                    };
                    readonly location: {
                        readonly type: "object";
                        readonly properties: {
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [40.7659021];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [-73.9208235];
                            };
                        };
                    };
                    readonly neighborhood: {
                        readonly type: "string";
                        readonly examples: readonly ["Astoria"];
                    };
                    readonly searchable: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly examples: readonly ["New York"];
                    };
                    readonly street: {
                        readonly type: "string";
                        readonly examples: readonly ["32nd Street"];
                    };
                    readonly zipcode: {
                        readonly type: "string";
                        readonly examples: readonly ["11102"];
                    };
                    readonly buildingName: {
                        readonly type: "string";
                        readonly examples: readonly ["Metropolis campus"];
                    };
                };
                readonly required: readonly ["location"];
            };
            readonly publishedAddress: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly apartment: {
                        readonly type: "string";
                        readonly examples: readonly ["4d"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly examples: readonly ["New York City"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly examples: readonly ["United States"];
                    };
                    readonly county: {
                        readonly type: "string";
                        readonly examples: readonly ["Nassau County"];
                    };
                    readonly floor: {
                        readonly type: "string";
                        readonly examples: readonly ["1D"];
                    };
                    readonly unitNumber: {
                        readonly type: "string";
                        readonly examples: readonly ["30a"];
                    };
                    readonly location: {
                        readonly type: "object";
                        readonly properties: {
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [40.7659021];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [-73.9208235];
                            };
                        };
                    };
                    readonly neighborhood: {
                        readonly type: "string";
                        readonly examples: readonly ["Astoria"];
                    };
                    readonly searchable: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly examples: readonly ["New York"];
                    };
                    readonly street: {
                        readonly type: "string";
                        readonly examples: readonly ["32nd Street"];
                    };
                    readonly zipcode: {
                        readonly type: "string";
                        readonly examples: readonly ["11102"];
                    };
                    readonly buildingName: {
                        readonly type: "string";
                        readonly examples: readonly ["Metropolis campus"];
                    };
                };
                readonly required: readonly ["location"];
            };
            readonly isPublishedAddressEnabled: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly required: readonly ["address", "publishedAddress", "isPublishedAddressEnabled"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty ID of the property for which you would like to edit the address. If it is a multi-unit parent, all sub-units will be updated too.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
                readonly publishedAddress: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
                readonly isPublishedAddressEnabled: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Address not found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddressControllerUpdateComplexAddress: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly apartment: {
                        readonly type: "string";
                        readonly examples: readonly ["4d"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly examples: readonly ["New York City"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly examples: readonly ["United States"];
                    };
                    readonly county: {
                        readonly type: "string";
                        readonly examples: readonly ["Nassau County"];
                    };
                    readonly floor: {
                        readonly type: "string";
                        readonly examples: readonly ["1D"];
                    };
                    readonly unitNumber: {
                        readonly type: "string";
                        readonly examples: readonly ["30a"];
                    };
                    readonly location: {
                        readonly type: "object";
                        readonly properties: {
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [40.7659021];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [-73.9208235];
                            };
                        };
                    };
                    readonly neighborhood: {
                        readonly type: "string";
                        readonly examples: readonly ["Astoria"];
                    };
                    readonly searchable: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly examples: readonly ["New York"];
                    };
                    readonly street: {
                        readonly type: "string";
                        readonly examples: readonly ["32nd Street"];
                    };
                    readonly zipcode: {
                        readonly type: "string";
                        readonly examples: readonly ["11102"];
                    };
                    readonly buildingName: {
                        readonly type: "string";
                        readonly examples: readonly ["Metropolis campus"];
                    };
                };
                readonly required: readonly ["location"];
            };
            readonly publishedAddress: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly apartment: {
                        readonly type: "string";
                        readonly examples: readonly ["4d"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly examples: readonly ["New York City"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly examples: readonly ["United States"];
                    };
                    readonly county: {
                        readonly type: "string";
                        readonly examples: readonly ["Nassau County"];
                    };
                    readonly floor: {
                        readonly type: "string";
                        readonly examples: readonly ["1D"];
                    };
                    readonly unitNumber: {
                        readonly type: "string";
                        readonly examples: readonly ["30a"];
                    };
                    readonly location: {
                        readonly type: "object";
                        readonly properties: {
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [40.7659021];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [-73.9208235];
                            };
                        };
                    };
                    readonly neighborhood: {
                        readonly type: "string";
                        readonly examples: readonly ["Astoria"];
                    };
                    readonly searchable: {
                        readonly type: "string";
                        readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly examples: readonly ["New York"];
                    };
                    readonly street: {
                        readonly type: "string";
                        readonly examples: readonly ["32nd Street"];
                    };
                    readonly zipcode: {
                        readonly type: "string";
                        readonly examples: readonly ["11102"];
                    };
                    readonly buildingName: {
                        readonly type: "string";
                        readonly examples: readonly ["Metropolis campus"];
                    };
                };
                readonly required: readonly ["location"];
            };
            readonly isPublishedAddressEnabled: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly required: readonly ["address", "publishedAddress", "isPublishedAddressEnabled"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty ID of the complex for which you would like to edit the address.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
                readonly publishedAddress: {
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly examples: readonly ["30-19 32nd St, Long Island City, NY 11102, USA"];
                        };
                        readonly city: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly examples: readonly ["United States"];
                        };
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [40.7659021];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [-73.9208235];
                                };
                            };
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly examples: readonly ["New York"];
                        };
                        readonly street: {
                            readonly type: "string";
                            readonly examples: readonly ["32nd Street"];
                        };
                        readonly zipcode: {
                            readonly type: "string";
                            readonly examples: readonly [11102];
                        };
                    };
                    readonly type: "object";
                };
                readonly isPublishedAddressEnabled: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Address not found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AirbnbResolutionsControllerListResolutions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly guestyReservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["6525198fd60018000e7d6602"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation id in Guesty";
                };
            };
            readonly required: readonly ["guestyReservationId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly from: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-11-27T12:00:00Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Created at from";
                };
                readonly to: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-11-27T15:00:00Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Created at to";
                };
            };
            readonly required: readonly ["from", "to"];
        }];
    };
};
declare const AmenitiesControllerGetForUnitType: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the property to retrieve a list of amenities";
                };
            };
            readonly required: readonly ["propertyId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Shampoo"];
                    };
                    readonly description: "An array containing amenities supported by guesty and assigned to the property";
                };
                readonly otherAmenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Red wine"];
                    };
                    readonly description: "An array containing all other amenities assigned to the property after the operation";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Amenities not found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AmenitiesControllerSetAmenitiesForProperty: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly amenities: {
                readonly description: "An array containing supported amenities to set to the property";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["amenities"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the property to set amenities to";
                };
            };
            readonly required: readonly ["propertyId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Shampoo"];
                    };
                    readonly description: "An array containing amenities supported by guesty and assigned to the property after the operation";
                };
                readonly otherAmenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Red wine"];
                    };
                    readonly description: "An array containing all other amenities assigned to the property after the operation";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Only MTL and SINGLE property types are supported"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [400];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Amenities not found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AriCalendarControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Rate plan ID.";
                };
                readonly listingId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Property ID.";
                };
            };
            readonly required: readonly ["ratePlanId", "listingId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fromDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2022-11-21"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Period start date.";
                };
                readonly toDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2022-11-28"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Period end date.";
                };
            };
            readonly required: readonly ["fromDate", "toDate"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan id";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly days: {
                    readonly description: "calendar days";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly date: {
                                readonly type: "object";
                                readonly description: "day date";
                                readonly examples: readonly ["2023-11-27"];
                                readonly additionalProperties: true;
                            };
                            readonly price: {
                                readonly type: "object";
                                readonly description: "day price";
                                readonly examples: readonly [250];
                                readonly additionalProperties: true;
                            };
                            readonly minNights: {
                                readonly type: "number";
                                readonly description: "day min nights";
                                readonly examples: readonly [1];
                            };
                            readonly maxNights: {
                                readonly type: "number";
                                readonly description: "day max nights";
                                readonly examples: readonly [45];
                            };
                            readonly cta: {
                                readonly type: "boolean";
                                readonly description: "cta";
                                readonly examples: readonly [false];
                            };
                            readonly ctd: {
                                readonly type: "boolean";
                                readonly description: "ctd";
                                readonly examples: readonly [false];
                            };
                            readonly allotment: {
                                readonly type: "number";
                                readonly description: "allotment";
                                readonly examples: readonly [3];
                            };
                            readonly closed: {
                                readonly type: "boolean";
                                readonly description: "is day closed";
                                readonly examples: readonly [false];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "cteated at";
                                readonly examples: readonly ["2023-11-27"];
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "udated at";
                                readonly examples: readonly ["2023-11-27"];
                            };
                        };
                        readonly required: readonly ["date", "price"];
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "listing id";
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "days", "listingId", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AriCalendarControllerUpsert: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly properties: {
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Period start date";
                };
                readonly endDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Period end date";
                };
                readonly price: {
                    readonly type: "number";
                    readonly description: "Price for the period.";
                };
                readonly minNights: {
                    readonly type: "number";
                    readonly description: "Minimum stay length.";
                };
                readonly maxNights: {
                    readonly type: "number";
                    readonly description: "Maximum stay length.";
                };
                readonly allotment: {
                    readonly type: "number";
                    readonly description: "Actual availability at the property.";
                };
                readonly cta: {
                    readonly type: "boolean";
                    readonly description: "Closed to check-in.";
                };
                readonly ctd: {
                    readonly type: "boolean";
                    readonly description: "Closed to check-out.";
                };
                readonly closed: {
                    readonly type: "boolean";
                    readonly description: "is closed";
                };
            };
            readonly required: readonly ["startDate", "endDate"];
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Rate plan ID.";
                };
                readonly listingId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Property ID.";
                };
            };
            readonly required: readonly ["ratePlanId", "listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly description: "rate plan id";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "listing id";
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlanId", "listingId", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssignListingControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly fromDate: {
                readonly type: "string";
                readonly description: "Optional, date that the Business Model will reprocess reservations from. Not filling this field will update the Business Model from now on without reprocess";
                readonly examples: readonly ["2022-10-20"];
            };
            readonly listingIds: {
                readonly description: "List of listingIds that should be assigned exactly to 1 owner";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["listingIds"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly businessModelId: {
                    readonly type: "string";
                    readonly examples: readonly ["12233344445555566666777"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Business Model ID that provided listings will be assigned to";
                };
            };
            readonly required: readonly ["businessModelId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["each value in listingIds must be a string", "listingIds must be an array", "listingIds should not be empty"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Can't find business-model with ID {business_model_id}"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BusinessModelsOaControllerIndex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [5];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
                readonly limit: {
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. In case nothing provided all the records will be returned";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly type: "number";
                };
                readonly limit: {
                    readonly type: "number";
                };
                readonly count: {
                    readonly type: "number";
                };
                readonly list: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly listingsCount: {
                                readonly type: "number";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly modifier: {
                                readonly type: "string";
                            };
                            readonly activationDate: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["id", "type", "listingsCount", "name", "modifier", "activationDate", "createdAt"];
                    };
                };
            };
            readonly required: readonly ["skip", "limit", "count", "list"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["each value in listingIds must be a string", "listingIds must be an array", "listingIds should not be empty"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Can't find business-model with ID {business_model_id}"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CalendarControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing ID.";
                };
            };
            readonly required: readonly ["listingId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly startDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-23"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "LoS calendar search start date";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2023-01-29"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "LoS calendar search end date";
                };
                readonly limit: {
                    readonly default: 100;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The requested limit (number of results) of the call.";
                };
                readonly skip: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The requested offset (skipped results) of the call.";
                };
            };
            readonly required: readonly ["startDate", "endDate"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly calendar: {
                    readonly description: "los calendar";
                    readonly type: "object";
                    readonly required: readonly ["date", "adultOccupancy", "losPrice", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly date: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "date of calendar";
                            readonly examples: readonly ["2022-09-29T19:59:18+08:00"];
                        };
                        readonly adultOccupancy: {
                            readonly type: "number";
                            readonly description: "adult occupancy";
                            readonly examples: readonly [2];
                        };
                        readonly losPrice: {
                            readonly type: "object";
                            readonly description: "length of stay price";
                            readonly additionalProperties: {
                                readonly oneOf: readonly [{
                                    readonly type: "string";
                                }, {
                                    readonly type: "number";
                                    readonly examples: readonly [100];
                                }];
                            };
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "date when metadata was created";
                            readonly examples: readonly ["2022-09-29T19:59:18+08:00"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "date when metadata was updated";
                            readonly examples: readonly ["2022-09-29T19:59:18+08:00"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Guesty Listing ID.";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly description: "The requested offset (skipped results) of the call.";
                    readonly examples: readonly [3];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly description: "The requested limit (number of results) of the call.";
                    readonly examples: readonly [100];
                };
            };
            readonly required: readonly ["calendar", "requestId", "listingId", "skip", "limit"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CalendarControllerUpsert: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly properties: {
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "start date of upserted calendar interval";
                    readonly examples: readonly ["2022-09-29"];
                };
                readonly endDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "end date of upserted calendar interval";
                    readonly examples: readonly ["2022-10-11"];
                };
                readonly lengthOfStay: {
                    readonly type: "number";
                    readonly description: "length of reservation";
                    readonly examples: readonly [10];
                };
                readonly price: {
                    readonly type: "number";
                    readonly description: "price for this length of reservation";
                    readonly examples: readonly [100];
                };
                readonly adultOccupancy: {
                    readonly type: "number";
                    readonly description: "adult occupancy for this length of reservation";
                    readonly examples: readonly [2];
                };
            };
            readonly required: readonly ["startDate", "endDate", "lengthOfStay", "price", "adultOccupancy"];
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing ID.";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Guesty Listing ID.";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
            };
            readonly required: readonly ["listingId", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CalendarLogsOpenApiControllerGetCalendarLogs: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["66054019764cbb000f37c450"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filters the logs by the Guesty listing ID.";
                };
                readonly userName: {
                    readonly type: "string";
                    readonly examples: readonly ["John Doe"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs based on the user who created the block.";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2024-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs based on the block's start date.";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2024-02-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs based on the block's end date.";
                };
                readonly blockType: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "preparation_time"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filters logs by the type of block (manual or preparation_time).";
                };
                readonly eventType: {
                    readonly enum: readonly ["created", "updated", "removed"];
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filters logs by the event type (created, updated, removed).";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly data: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly propertyName: {
                                    readonly type: "string";
                                    readonly description: "The name of the property associated with the log.";
                                };
                                readonly userName: {
                                    readonly type: "string";
                                    readonly description: "The name of the user who made the changes.";
                                };
                                readonly startDate: {
                                    readonly type: "string";
                                    readonly description: "The start date of the block.";
                                    readonly format: "YYYY-MM-DD";
                                    readonly examples: readonly ["2024-01-01"];
                                };
                                readonly endDate: {
                                    readonly type: "string";
                                    readonly description: "The end date of the block.";
                                    readonly format: "YYYY-MM-DD";
                                    readonly examples: readonly ["2024-01-01"];
                                };
                                readonly blockType: {
                                    readonly type: "string";
                                    readonly description: "The type of block applied.";
                                };
                                readonly eventType: {
                                    readonly type: "string";
                                    readonly enum: readonly ["BLOCK_CREATED", "BLOCK_UPDATED", "BLOCK_REMOVED"];
                                    readonly description: "The event type related to the block.\n\n`BLOCK_CREATED` `BLOCK_UPDATED` `BLOCK_REMOVED`";
                                };
                                readonly note: {
                                    readonly type: "string";
                                    readonly description: "A note related to the block.";
                                };
                                readonly reason: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Owner block", "Offboarded", "Migrated unit block", "Maintenance", "Onboarding", "Emergency out of order", "Do not sell", "Deactivated", "Other"];
                                    readonly description: "The reason for the block.\n\n`Owner block` `Offboarded` `Migrated unit block` `Maintenance` `Onboarding` `Emergency out of order` `Do not sell` `Deactivated` `Other`";
                                };
                                readonly doneAt: {
                                    readonly type: "string";
                                    readonly description: "The date when the block action was completed.";
                                    readonly format: "YYYY-MM-DD";
                                    readonly examples: readonly ["2024-01-11"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CalendarMetadataControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing ID.";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly calendarMetadata: {
                    readonly description: "calendar metadata";
                    readonly type: "object";
                    readonly required: readonly ["listingId", "status"];
                    readonly properties: {
                        readonly listingId: {
                            readonly type: "string";
                            readonly description: "Guesty Listing ID.";
                            readonly examples: readonly ["63358a07d027853ee92eede0"];
                        };
                        readonly status: {
                            readonly enum: readonly ["ACTIVE", "IN_ACTIVE"];
                            readonly type: "string";
                            readonly description: "calendar status\n\n`ACTIVE` `IN_ACTIVE`";
                            readonly examples: readonly ["ACTIVE"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
            };
            readonly required: readonly ["calendarMetadata", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CalendarMetadataControllerUpsert: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly enum: readonly ["ACTIVE", "IN_ACTIVE"];
                    readonly type: "string";
                    readonly description: "calendar status";
                    readonly examples: readonly ["ACTIVE"];
                };
            };
            readonly required: readonly ["status"];
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing ID.";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Guesty Listing ID.";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                    readonly examples: readonly ["63358a07d027853ee92eede0"];
                };
            };
            readonly required: readonly ["listingId", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ChannelCommissionControllerGetListingsChannelCommission: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The desired listing ids";
                };
            };
            readonly required: readonly ["listingIds"];
        }];
    };
};
declare const ChannelCommissionControllerGetListingsChannelCommission1: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The desired listing ids";
                };
            };
            readonly required: readonly ["listingIds"];
        }];
    };
};
declare const ChannelCommissionControllerUpdateAccountChannelCommission: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly manual: {
                readonly description: "Objects that will be provided in manual array will be upserted to the existing array by source. Limited to 200 items in one request.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly description: "Set commission definition";
                            readonly type: "object";
                            readonly required: readonly ["value", "of"];
                            readonly properties: {
                                readonly value: {
                                    readonly type: "number";
                                    readonly minimum: 0;
                                    readonly maximum: 100;
                                    readonly description: "The percentage of channel commission to be taken";
                                    readonly examples: readonly [5];
                                };
                                readonly of: {
                                    readonly description: "The fields which the channel commission will be applied on.\nSupported values: PAYOUT, ACCOMMODATION_FARE, CLEANING_FEE, CANCELLATION_FEE, ADDITIONAL_BED, AIR_CONDITIONING, EARLY_CHECK_IN, LATE_CHECK_IN, BABY_BED, CLEANING, CLUB_CARD, CONCIERGE, EARLY_CHECKOUT, LATE_CHECKOUT, DEPOSIT, ELECTRICITY, FOOD, HEATING, INTERNET, LAUNDRY, LINENS, TOWELS, MANAGEMENT, OIL, PARKING, PET, POOL, POOL_HEATING, RESORT, SERVICE, TOILETRIES, TOUR, TRANSPORTATION, CAR_RENTAL, WATER, WOOD, TRANSFER, HOUSEKEEPING, INSURANCE, COMMUNITY, CREDIT_CARD_PROCESSING_FEE, DAMAGE_WAIVER, VIP_SERVICES, PAYMENT_FEE, ADDITIONAL_CHARGE, MISCELLANEOUS, SHIPPING, VALET, ACTIVITIES, FLIGHTS, GIFT_BASKET, SPA, CHEF, MEET_AND_GREET, DOCK_FEE, UTILITY_FEE, HOT_TUB, BOOKING_FEE, BREAKFAST, BEVERAGE, MEAL, WELLNESS, MINIBAR, BUSINESS_CENTER, WIFI, GUEST_SERVICE, COMMISSION_CHARGE, EQUIPMENT_RENTAL, RESERVATION_FEE, DAMAGE_CHARGE, HOMEOWNERS_ASSOCIATION, GOLF_CART_RENTAL, LOCAL_TAX, CITY_TAX, VAT, GOODS_AND_SERVICES_TAX, TOURISM_TAX, OTHER, STATE_TAX, COUNTY_TAX, OCCUPANCY_TAX, TRANSIENT_OCCUPANCY_TAX, HOME_SHARING_TAX, HARMONIZED_SALES_TAX, MINIMUM_ALTERNATE_TAX";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly examples: readonly ["ACCOMMODATION_FARE", "CLEANING_FEE", "LOCAL_TAX", "DAMAGE_WAIVER"];
                                };
                            };
                        };
                        readonly tax: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The tax applied on channel commission";
                            readonly examples: readonly [3];
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly description: "The name of source";
                            readonly examples: readonly ["my source"];
                        };
                        readonly isPreDeduct: {
                            readonly type: "boolean";
                            readonly description: "Pre deduct the channel commission if you want Guesty to automatically add a negative Host channel fee invoice item for every reservation created by this source.";
                            readonly examples: readonly [false];
                        };
                    };
                    readonly required: readonly ["source", "isPreDeduct"];
                };
            };
            readonly rentalsUnited: {
                readonly description: "Channel commission formula";
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
};
declare const ChannelCommissionControllerUpdateAccountChannelCommission1: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly manual: {
                readonly description: "Objects that will be provided in manual array will be upserted to the existing array by source. Limited to 200 items in one request.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly description: "Set commission definition";
                            readonly type: "object";
                            readonly required: readonly ["value", "of"];
                            readonly properties: {
                                readonly value: {
                                    readonly type: "number";
                                    readonly minimum: 0;
                                    readonly maximum: 100;
                                    readonly description: "The percentage of channel commission to be taken";
                                    readonly examples: readonly [5];
                                };
                                readonly of: {
                                    readonly description: "The fields which the channel commission will be applied on.\nSupported values: PAYOUT, ACCOMMODATION_FARE, CLEANING_FEE, CANCELLATION_FEE, ADDITIONAL_BED, AIR_CONDITIONING, EARLY_CHECK_IN, LATE_CHECK_IN, BABY_BED, CLEANING, CLUB_CARD, CONCIERGE, EARLY_CHECKOUT, LATE_CHECKOUT, DEPOSIT, ELECTRICITY, FOOD, HEATING, INTERNET, LAUNDRY, LINENS, TOWELS, MANAGEMENT, OIL, PARKING, PET, POOL, POOL_HEATING, RESORT, SERVICE, TOILETRIES, TOUR, TRANSPORTATION, CAR_RENTAL, WATER, WOOD, TRANSFER, HOUSEKEEPING, INSURANCE, COMMUNITY, CREDIT_CARD_PROCESSING_FEE, DAMAGE_WAIVER, VIP_SERVICES, PAYMENT_FEE, ADDITIONAL_CHARGE, MISCELLANEOUS, SHIPPING, VALET, ACTIVITIES, FLIGHTS, GIFT_BASKET, SPA, CHEF, MEET_AND_GREET, DOCK_FEE, UTILITY_FEE, HOT_TUB, BOOKING_FEE, BREAKFAST, BEVERAGE, MEAL, WELLNESS, MINIBAR, BUSINESS_CENTER, WIFI, GUEST_SERVICE, COMMISSION_CHARGE, EQUIPMENT_RENTAL, RESERVATION_FEE, DAMAGE_CHARGE, HOMEOWNERS_ASSOCIATION, GOLF_CART_RENTAL, LOCAL_TAX, CITY_TAX, VAT, GOODS_AND_SERVICES_TAX, TOURISM_TAX, OTHER, STATE_TAX, COUNTY_TAX, OCCUPANCY_TAX, TRANSIENT_OCCUPANCY_TAX, HOME_SHARING_TAX, HARMONIZED_SALES_TAX, MINIMUM_ALTERNATE_TAX";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly examples: readonly ["ACCOMMODATION_FARE", "CLEANING_FEE", "LOCAL_TAX", "DAMAGE_WAIVER"];
                                };
                            };
                        };
                        readonly tax: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The tax applied on channel commission";
                            readonly examples: readonly [3];
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly description: "The name of source";
                            readonly examples: readonly ["my source"];
                        };
                        readonly isPreDeduct: {
                            readonly type: "boolean";
                            readonly description: "Pre deduct the channel commission if you want Guesty to automatically add a negative Host channel fee invoice item for every reservation created by this source.";
                            readonly examples: readonly [false];
                        };
                    };
                    readonly required: readonly ["source", "isPreDeduct"];
                };
            };
            readonly rentalsUnited: {
                readonly description: "Channel commission formula";
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
};
declare const ChannelCommissionControllerUpdateListingsChannelCommission: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly channelCommissions: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly manual: {
                            readonly description: "Objects that will be provided in manual array will be upserted to the existing array by source. Limited to 200 items in one request.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly commission: {
                                        readonly description: "Set commission definition";
                                        readonly type: "object";
                                        readonly required: readonly ["value", "of"];
                                        readonly properties: {
                                            readonly value: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly maximum: 100;
                                                readonly description: "The percentage of channel commission to be taken";
                                                readonly examples: readonly [5];
                                            };
                                            readonly of: {
                                                readonly description: "The fields which the channel commission will be applied on.\nSupported values: PAYOUT, ACCOMMODATION_FARE, CLEANING_FEE, CANCELLATION_FEE, ADDITIONAL_BED, AIR_CONDITIONING, EARLY_CHECK_IN, LATE_CHECK_IN, BABY_BED, CLEANING, CLUB_CARD, CONCIERGE, EARLY_CHECKOUT, LATE_CHECKOUT, DEPOSIT, ELECTRICITY, FOOD, HEATING, INTERNET, LAUNDRY, LINENS, TOWELS, MANAGEMENT, OIL, PARKING, PET, POOL, POOL_HEATING, RESORT, SERVICE, TOILETRIES, TOUR, TRANSPORTATION, CAR_RENTAL, WATER, WOOD, TRANSFER, HOUSEKEEPING, INSURANCE, COMMUNITY, CREDIT_CARD_PROCESSING_FEE, DAMAGE_WAIVER, VIP_SERVICES, PAYMENT_FEE, ADDITIONAL_CHARGE, MISCELLANEOUS, SHIPPING, VALET, ACTIVITIES, FLIGHTS, GIFT_BASKET, SPA, CHEF, MEET_AND_GREET, DOCK_FEE, UTILITY_FEE, HOT_TUB, BOOKING_FEE, BREAKFAST, BEVERAGE, MEAL, WELLNESS, MINIBAR, BUSINESS_CENTER, WIFI, GUEST_SERVICE, COMMISSION_CHARGE, EQUIPMENT_RENTAL, RESERVATION_FEE, DAMAGE_CHARGE, HOMEOWNERS_ASSOCIATION, GOLF_CART_RENTAL, LOCAL_TAX, CITY_TAX, VAT, GOODS_AND_SERVICES_TAX, TOURISM_TAX, OTHER, STATE_TAX, COUNTY_TAX, OCCUPANCY_TAX, TRANSIENT_OCCUPANCY_TAX, HOME_SHARING_TAX, HARMONIZED_SALES_TAX, MINIMUM_ALTERNATE_TAX";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly examples: readonly ["ACCOMMODATION_FARE", "CLEANING_FEE", "LOCAL_TAX", "DAMAGE_WAIVER"];
                                            };
                                        };
                                    };
                                    readonly tax: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "The tax applied on channel commission";
                                        readonly examples: readonly [3];
                                    };
                                    readonly source: {
                                        readonly type: "string";
                                        readonly description: "The name of source";
                                        readonly examples: readonly ["my source"];
                                    };
                                    readonly isPreDeduct: {
                                        readonly type: "boolean";
                                        readonly description: "Pre deduct the channel commission if you want Guesty to automatically add a negative Host channel fee invoice item for every reservation created by this source.";
                                        readonly examples: readonly [false];
                                    };
                                };
                                readonly required: readonly ["source", "isPreDeduct"];
                            };
                        };
                        readonly rentalsUnited: {
                            readonly description: "Channel commission formula";
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly listingId: {
                            readonly type: "string";
                        };
                        readonly useAccountSettings: {
                            readonly type: "boolean";
                        };
                    };
                    readonly required: readonly ["listingId", "useAccountSettings"];
                };
            };
        };
        readonly required: readonly ["channelCommissions"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
};
declare const ChannelCommissionControllerUpdateListingsChannelCommission1: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly channelCommissions: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly manual: {
                            readonly description: "Objects that will be provided in manual array will be upserted to the existing array by source. Limited to 200 items in one request.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly commission: {
                                        readonly description: "Set commission definition";
                                        readonly type: "object";
                                        readonly required: readonly ["value", "of"];
                                        readonly properties: {
                                            readonly value: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly maximum: 100;
                                                readonly description: "The percentage of channel commission to be taken";
                                                readonly examples: readonly [5];
                                            };
                                            readonly of: {
                                                readonly description: "The fields which the channel commission will be applied on.\nSupported values: PAYOUT, ACCOMMODATION_FARE, CLEANING_FEE, CANCELLATION_FEE, ADDITIONAL_BED, AIR_CONDITIONING, EARLY_CHECK_IN, LATE_CHECK_IN, BABY_BED, CLEANING, CLUB_CARD, CONCIERGE, EARLY_CHECKOUT, LATE_CHECKOUT, DEPOSIT, ELECTRICITY, FOOD, HEATING, INTERNET, LAUNDRY, LINENS, TOWELS, MANAGEMENT, OIL, PARKING, PET, POOL, POOL_HEATING, RESORT, SERVICE, TOILETRIES, TOUR, TRANSPORTATION, CAR_RENTAL, WATER, WOOD, TRANSFER, HOUSEKEEPING, INSURANCE, COMMUNITY, CREDIT_CARD_PROCESSING_FEE, DAMAGE_WAIVER, VIP_SERVICES, PAYMENT_FEE, ADDITIONAL_CHARGE, MISCELLANEOUS, SHIPPING, VALET, ACTIVITIES, FLIGHTS, GIFT_BASKET, SPA, CHEF, MEET_AND_GREET, DOCK_FEE, UTILITY_FEE, HOT_TUB, BOOKING_FEE, BREAKFAST, BEVERAGE, MEAL, WELLNESS, MINIBAR, BUSINESS_CENTER, WIFI, GUEST_SERVICE, COMMISSION_CHARGE, EQUIPMENT_RENTAL, RESERVATION_FEE, DAMAGE_CHARGE, HOMEOWNERS_ASSOCIATION, GOLF_CART_RENTAL, LOCAL_TAX, CITY_TAX, VAT, GOODS_AND_SERVICES_TAX, TOURISM_TAX, OTHER, STATE_TAX, COUNTY_TAX, OCCUPANCY_TAX, TRANSIENT_OCCUPANCY_TAX, HOME_SHARING_TAX, HARMONIZED_SALES_TAX, MINIMUM_ALTERNATE_TAX";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly examples: readonly ["ACCOMMODATION_FARE", "CLEANING_FEE", "LOCAL_TAX", "DAMAGE_WAIVER"];
                                            };
                                        };
                                    };
                                    readonly tax: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "The tax applied on channel commission";
                                        readonly examples: readonly [3];
                                    };
                                    readonly source: {
                                        readonly type: "string";
                                        readonly description: "The name of source";
                                        readonly examples: readonly ["my source"];
                                    };
                                    readonly isPreDeduct: {
                                        readonly type: "boolean";
                                        readonly description: "Pre deduct the channel commission if you want Guesty to automatically add a negative Host channel fee invoice item for every reservation created by this source.";
                                        readonly examples: readonly [false];
                                    };
                                };
                                readonly required: readonly ["source", "isPreDeduct"];
                            };
                        };
                        readonly rentalsUnited: {
                            readonly description: "Channel commission formula";
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly listingId: {
                            readonly type: "string";
                        };
                        readonly useAccountSettings: {
                            readonly type: "boolean";
                        };
                    };
                    readonly required: readonly ["listingId", "useAccountSettings"];
                };
            };
        };
        readonly required: readonly ["channelCommissions"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
};
declare const ComplexesControllerAssignComplexPropertyIds: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "string";
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the complex to update";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly examples: readonly ["6457751476e5da340bf915e8", "6457751e76e5da340bf915e9"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ComplexesControllerGetComplexById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the complex to retrieve";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["Complex 1"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly examples: readonly ["C1"];
                };
                readonly propertyIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["6457751476e5da340bf915e8"];
                    };
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["tag1"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ComplexesControllerRemoveComplex: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the complex to delete";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly acknowledged: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly deletedCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ComplexesControllerUnassignComplexPropertyIds: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "string";
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the complex to update";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly examples: readonly ["6457751476e5da340bf915e8"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ComplexesControllerUpdateComplexDetails: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "The title of the Complex";
                readonly examples: readonly ["My Title"];
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "The nickname of the Complex. Useful in searches";
                readonly examples: readonly ["My Nickname"];
            };
            readonly tags: {
                readonly description: "An array containing Tags for this Complex";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["Tag 1", "Tag 2"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the complex to update";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["Complex 1"];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly examples: readonly ["C1"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["tag1"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteAccountsIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly isPublic: {
                        readonly type: "boolean";
                    };
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly object: {
                        readonly type: "string";
                        readonly enum: readonly ["listing", "reservation"];
                        readonly description: "`listing` `reservation`";
                    };
                    readonly options: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                        readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteAdditionalFeesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "id of item to remove";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const DeleteContactsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Entry ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const DeleteHooksHookid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly hookId: {
                    readonly type: "string";
                    readonly examples: readonly ["61642d518eb305002d9014e1"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Hook Id";
                };
            };
            readonly required: readonly ["hookId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteListingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteListingsListingIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listing_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["listing_id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteOwnersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner's ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const DeleteOwnersOwneridDocumentsDocumentid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
                readonly documentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document id";
                };
            };
            readonly required: readonly ["ownerId", "documentId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteReservationsReservationIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservation_id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly examples: readonly ["63c6bd9a79e5950042d078d8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Field ID";
                };
            };
            readonly required: readonly ["reservation_id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteSavedRepliesReplyid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly replyId: {
                    readonly type: "string";
                    readonly examples: readonly ["61642b0c8eb305002d9014a8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Reply Id";
                };
            };
            readonly required: readonly ["replyId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "string";
            readonly examples: readonly ["ok"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Canned response not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteTasksOpenApiTaskid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly taskId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Task id";
                };
            };
            readonly required: readonly ["taskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the task.";
                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                };
                readonly shortTaskId: {
                    readonly type: "object";
                    readonly description: "A short task ID for quick reference.";
                    readonly properties: {
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assigneeGroup: {
                    readonly type: "array";
                    readonly description: "The team the assignees is part of. This is a tag";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["cleaners"];
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Task types help you with better identification and reporting.";
                };
                readonly checklistFinished: {
                    readonly type: "array";
                    readonly description: "A list of finished action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklist: {
                    readonly type: "array";
                    readonly description: "A list of action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklistAggregated: {
                    readonly type: "array";
                    readonly description: "A list of action items.";
                    readonly items: {};
                };
                readonly tags: {
                    readonly type: "array";
                    readonly description: "List of tags the task is related to";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the task, being one of the following enumerators: pending,confirmed, in progress,completed,canceled.";
                    readonly examples: readonly ["confirmed"];
                };
                readonly comment: {
                    readonly type: "object";
                    readonly description: "Notes added to the task by the assignee and supervisor. Contains the text, user ID and date the comment was published.";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the comment.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly text: {
                            readonly type: "string";
                            readonly description: "The comment text.";
                        };
                        readonly by: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the user who made the comment.";
                        };
                        readonly date: {
                            readonly type: "string";
                            readonly description: "The date and time the comment was posted.";
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The ID of the account the task is attached to";
                    readonly examples: readonly ["Q5fb67280e396Q77002e6c2683"];
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly description: "The ID of the user who created the task.";
                    readonly examples: readonly ["Q5fb67280e39Q677002e6c268c"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "The name you call the task";
                    readonly examples: readonly ["Post Stay Clean"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Add any additional information needed to define the task.";
                    readonly examples: readonly ["A regular clean between guest stays."];
                };
                readonly priority: {
                    readonly type: "string";
                    readonly description: "Assign the level of importance to the task in enumerators - High,Medium,Low\n\n`medium` `high` `low`";
                    readonly enum: readonly ["medium", "high", "low"];
                    readonly examples: readonly ["high"];
                };
                readonly assigneeId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the person assigned to the task.";
                };
                readonly supervisorId: {
                    readonly type: "string";
                    readonly description: "The uniqueID of the person assigned to supervise the task.";
                    readonly examples: readonly ["64a6b8cfa08e0446a6f4b840"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "";
                    readonly examples: readonly ["Australia/Sydney"];
                };
                readonly afterEffects: {
                    readonly type: "object";
                    readonly description: "Actions to be triggered upon the completion of the task.";
                    readonly properties: {
                        readonly action: {
                            readonly type: "string";
                            readonly description: "The action to be performed.";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the action.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly payload: {
                            readonly type: "object";
                            readonly description: "The information or data to be included within the action.";
                            readonly properties: {
                                readonly target: {
                                    readonly type: "string";
                                    readonly description: "The intended recipient.\n\n`user` `contact` `guest` `supervisor`";
                                    readonly enum: readonly ["user", "contact", "guest", "supervisor"];
                                };
                                readonly targetId: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the target.";
                                };
                                readonly message: {
                                    readonly type: "object";
                                    readonly description: "The message object.";
                                    readonly properties: {
                                        readonly subject: {
                                            readonly type: "string";
                                            readonly description: "States topic of the message.";
                                        };
                                        readonly body: {
                                            readonly type: "string";
                                            readonly description: "Contains the message string.";
                                        };
                                        readonly attachments: {
                                            readonly type: "object";
                                            readonly description: "Contains and describes an attached file.";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier of the attachment object.";
                                                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "URL location of the attached file.";
                                                };
                                                readonly title: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the file attachment.";
                                                    readonly examples: readonly ["Post Stay Clean"];
                                                };
                                                readonly mimetype: {
                                                    readonly type: "string";
                                                    readonly description: "State the kind of file attached.";
                                                };
                                                readonly size: {
                                                    readonly type: "string";
                                                    readonly description: "The storage size of the attachment.";
                                                };
                                                readonly client: {
                                                    readonly type: "string";
                                                    readonly description: "";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly attachments: {
                    readonly type: "object";
                    readonly description: "The place to attach external files needed for the task.";
                    readonly properties: {
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached.";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment.";
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                        };
                    };
                };
                readonly timing: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["none", "specific", "flexible", "legacy"];
                            readonly examples: readonly ["specific"];
                            readonly description: "`none` `specific` `flexible` `legacy`";
                        };
                        readonly startTime: {
                            readonly type: "string";
                            readonly description: "The date and time the task must begin (fixed task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                            readonly examples: readonly ["2024-01-10T21:00:00.000Z"];
                        };
                        readonly canStartAfter: {
                            readonly type: "string";
                            readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                        readonly mustFinishBefore: {
                            readonly type: "string";
                            readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                    };
                };
                readonly apply: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["listing", "reservation", "owner-reservation"];
                            readonly examples: readonly ["reservation"];
                            readonly description: "`listing` `reservation` `owner-reservation`";
                        };
                        readonly listingId: {
                            readonly type: "string";
                            readonly description: "The object ID of the listing the task is attached to. Only when reservationId don't exist";
                            readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                        };
                        readonly reservationId: {
                            readonly type: "string";
                            readonly description: "The reservation ID of the listing the task is attached to. Only when listingId don't exist";
                            readonly examples: readonly ["9fba3d97d8e62500Gd7f6d842"];
                        };
                        readonly ownerReservationId: {
                            readonly type: "string";
                            readonly description: "The owner reservation ID of the listing the task is attached to. Only when owner reservation ";
                        };
                    };
                };
                readonly plannedDuration: {
                    readonly type: "number";
                    readonly description: "The amount of time budgeted for the task (hours).";
                    readonly examples: readonly [0.08];
                };
                readonly pendingExpenses: {
                    readonly description: "The list of expenses that will be created upon task completion";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Not available for Pending expenses";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly postedExpenses: {
                    readonly type: "array";
                    readonly description: "The list of recognized expenses";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Expense accounting data";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                    readonly failureCode: {
                                        readonly type: "number";
                                        readonly description: "Charge creation Error code";
                                        readonly examples: readonly [10001];
                                    };
                                    readonly requestId: {
                                        readonly type: "string";
                                        readonly description: "Request id for debugging";
                                        readonly examples: readonly ["456dd47bdb3862d2"];
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteViewsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "View ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteWebhooksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const ExportedCalendarOpenApiControllerCreateExportedCalendar: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingId: {
                readonly type: "string";
                readonly description: "Listing id";
            };
            readonly adjustmentValueStart: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
                readonly description: "Start date offset";
            };
            readonly adjustmentValueEnd: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
                readonly description: "End date offset";
            };
        };
        readonly required: readonly ["listingId", "adjustmentValueStart", "adjustmentValueEnd"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an exported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an exported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an exported calendar";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an exported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an exported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of exported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of exported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "url", "lastSyncedAt", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an exported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an exported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an exported calendar";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an exported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an exported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of exported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of exported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "url", "lastSyncedAt", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ExportedCalendarOpenApiControllerDeleteExportedCalendar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly exportedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an exported calendars";
                };
            };
            readonly required: readonly ["exportedCalendarId"];
        }];
    };
    readonly response: {
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ExportedCalendarOpenApiControllerGetExportedCalendar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of a listing to get exported calendars for";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an exported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an exported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an exported calendar";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an exported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an exported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of exported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of exported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "url", "lastSyncedAt", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ExportedCalendarOpenApiControllerGetExportedCalendarById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly exportedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an exported calendars";
                };
            };
            readonly required: readonly ["exportedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an exported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an exported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an exported calendar";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an exported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an exported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of exported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of exported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "url", "lastSyncedAt", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ExportedCalendarOpenApiControllerUpdateExportedCalendar: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly adjustmentValueStart: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
            readonly adjustmentValueEnd: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
        };
        readonly required: readonly ["adjustmentValueStart", "adjustmentValueEnd"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly exportedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an exported calendars";
                };
            };
            readonly required: readonly ["exportedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an exported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an exported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an exported calendar";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an exported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an exported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of exported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of exported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "url", "lastSyncedAt", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccountsIdCustomFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "e.g. - Account id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly fieldId: {
                        readonly type: "string";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly isPublic: {
                        readonly type: "boolean";
                    };
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly object: {
                        readonly type: "string";
                        readonly enum: readonly ["listing", "reservation"];
                        readonly description: "`listing` `reservation`";
                    };
                    readonly options: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                        readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccountsIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly fieldId: {
                    readonly type: "string";
                };
                readonly displayName: {
                    readonly type: "string";
                };
                readonly isPublic: {
                    readonly type: "boolean";
                };
                readonly key: {
                    readonly type: "string";
                };
                readonly object: {
                    readonly type: "string";
                    readonly enum: readonly ["listing", "reservation"];
                    readonly description: "`listing` `reservation`";
                };
                readonly options: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                    readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccountsMe: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Status of connection";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                    readonly format: "email";
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly mailgun: {
                    readonly type: "object";
                    readonly properties: {};
                };
                readonly isInterestedInServiceOnExistingReservations: {
                    readonly type: "boolean";
                };
                readonly siqnupQuestions: {
                    readonly type: "object";
                    readonly properties: {};
                };
                readonly ignoredHooks: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["5981b4b8c97c260f0067c499"];
                    };
                };
                readonly initialLocation: {
                    readonly type: "string";
                };
                readonly recognizedRevenueDays: {
                    readonly type: "number";
                };
                readonly initialReferrer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly question: {
                            readonly type: "string";
                        };
                        readonly answer: {
                            readonly type: "string";
                        };
                    };
                };
                readonly mailingAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly lat: {
                            readonly type: "number";
                        };
                        readonly lng: {
                            readonly type: "number";
                        };
                        readonly full: {
                            readonly type: "string";
                        };
                    };
                };
                readonly sisenseAccess: {
                    readonly type: "boolean";
                };
                readonly recognizedRevenueMode: {
                    readonly type: "string";
                    readonly enum: readonly ["check-in", "check-out", "per_night"];
                    readonly description: "`check-in` `check-out` `per_night`";
                };
                readonly companyInformation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly contactFirstname: {
                            readonly type: "string";
                        };
                        readonly contactLastname: {
                            readonly type: "string";
                        };
                        readonly contactEmail: {
                            readonly type: "string";
                            readonly format: "email";
                        };
                        readonly contactPhone: {
                            readonly type: "string";
                        };
                        readonly businessType: {
                            readonly type: "string";
                        };
                        readonly vatNum: {
                            readonly type: "number";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly address: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly zipCode: {
                            readonly type: "string";
                        };
                        readonly corporationPlace: {
                            readonly type: "string";
                        };
                        readonly submittedAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date";
                };
                readonly RUFeeActivation: {
                    readonly type: "boolean";
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly companyLogo: {
                    readonly type: "string";
                };
                readonly accountCategorization: {
                    readonly type: "number";
                };
                readonly accountCategorizationIsManual: {
                    readonly type: "boolean";
                };
                readonly agodaEmail: {
                    readonly type: "string";
                    readonly format: "email";
                };
                readonly onBoarding: {
                    readonly type: "object";
                    readonly properties: {
                        readonly createdFirstHookAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly zendeskTicketId: {
                            readonly type: "string";
                        };
                    };
                };
                readonly migration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly rateStrategy: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
                readonly pricePlanMinimum: {
                    readonly type: "number";
                };
                readonly pricePlanMaximum: {
                    readonly type: "number";
                };
                readonly SaaS: {
                    readonly type: "object";
                    readonly properties: {};
                };
                readonly billing: {
                    readonly type: "object";
                    readonly properties: {
                        readonly billingCycle: {
                            readonly type: "string";
                        };
                        readonly billingDay: {
                            readonly type: "number";
                        };
                        readonly nextBillingDate: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly paymentMethods: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly noFreezingFlow: {
                            readonly type: "boolean";
                        };
                        readonly stripeCustomerId: {
                            readonly type: "string";
                        };
                    };
                };
                readonly weekendBasePriceMigrationDone: {
                    readonly type: "boolean";
                };
                readonly pms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly website: {
                            readonly type: "object";
                            readonly properties: {
                                readonly defaultStatusForNewReservations: {
                                    readonly type: "string";
                                };
                                readonly defaultSort: {
                                    readonly type: "string";
                                };
                                readonly includedListings: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly excludedListings: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly calendar: {
                            readonly type: "object";
                            readonly properties: {
                                readonly requireReasonForUpdatingPricing: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly statusFade: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly days: {
                                            readonly type: "number";
                                        };
                                        readonly toStatus: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly markAsDirtyOnCheckIn: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
                readonly whiteLabel: {
                    readonly type: "object";
                    readonly properties: {
                        readonly integrationEmailDomains: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly shouldWhiteLabelApp: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly hadFirstBookingAt: {
                    readonly type: "string";
                    readonly format: "date";
                };
                readonly availablePhoneNumbers: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly displayName: {
                                readonly type: "string";
                            };
                            readonly isPublic: {
                                readonly type: "boolean";
                            };
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly object: {
                                readonly type: "string";
                                readonly enum: readonly ["listing", "reservation"];
                                readonly description: "`listing` `reservation`";
                            };
                            readonly options: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                                readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                            };
                        };
                    };
                };
                readonly plan: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly planType: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly isLocked: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
                readonly financials: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly rentalsUnited: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly bookingCom: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly tax: {
                                                    readonly type: "number";
                                                };
                                            };
                                        };
                                        readonly expedia: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly commission: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly value: {
                                                            readonly type: "number";
                                                        };
                                                        readonly of: {
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                        readonly tax: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly agoda: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly commission: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly value: {
                                                            readonly type: "number";
                                                        };
                                                        readonly of: {
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                        readonly tax: {
                                                            readonly type: "number";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly bookingCom: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly tax: {
                                            readonly type: "number";
                                        };
                                    };
                                };
                                readonly homeaway2: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly commission: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly value: {
                                                    readonly type: "number";
                                                };
                                                readonly of: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly tax: {
                                                    readonly type: "number";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
                readonly commissionFormula: {
                    readonly type: "string";
                };
                readonly netIncomeFormula: {
                    readonly type: "string";
                };
                readonly ownerRevenueFormula: {
                    readonly type: "string";
                };
                readonly cancellationSurvey: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly date: {
                                readonly type: "string";
                                readonly format: "date";
                            };
                            readonly reasons: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly "Onboarding experience": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "Missing features": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "Technical issues": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "System usability": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "Value for money": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "Customer support": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly "Guest Communication Service": {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                    readonly Other: {
                                        readonly type: "string";
                                        readonly enum: readonly ["hidden", "unselected", "selected"];
                                        readonly description: "`hidden` `unselected` `selected`";
                                    };
                                };
                            };
                            readonly subReasons: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly Other: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly Other: {
                                                readonly type: "string";
                                                readonly enum: readonly ["hidden", "unselected", "selected"];
                                                readonly description: "`hidden` `unselected` `selected`";
                                            };
                                            readonly OtherInput: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly internalData: {
                    readonly type: "object";
                    readonly properties: {
                        readonly agreedToTOS: {
                            readonly type: "object";
                            readonly properties: {
                                readonly firstName: {
                                    readonly type: "string";
                                };
                                readonly lastName: {
                                    readonly type: "string";
                                };
                                readonly userEmail: {
                                    readonly type: "string";
                                    readonly format: "email";
                                };
                                readonly date: {
                                    readonly type: "string";
                                    readonly format: "email";
                                };
                            };
                        };
                        readonly features: {
                            readonly type: "object";
                            readonly properties: {
                                readonly airbnbIntegration: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly oldOnboardingStatus: {
                            readonly type: "string";
                        };
                        readonly accountManager: {
                            readonly type: "string";
                        };
                        readonly onboardingStatus: {
                            readonly type: "string";
                        };
                    };
                };
                readonly taxes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly units: {
                                readonly type: "string";
                            };
                            readonly quantifier: {
                                readonly type: "string";
                            };
                            readonly amount: {
                                readonly type: "number";
                            };
                        };
                    };
                };
                readonly commissionTaxPercentage: {
                    readonly type: "number";
                };
                readonly systemEmailsRecipients: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly apiKeys: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly markups: {
                    readonly type: "object";
                    readonly properties: {
                        readonly agoda: {
                            readonly type: "object";
                            readonly properties: {
                                readonly amount: {
                                    readonly type: "number";
                                };
                                readonly units: {
                                    readonly type: "string";
                                };
                                readonly status: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly signupQuestions: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly receptionistsService: {
                    readonly type: "object";
                    readonly properties: {
                        readonly receptionDesk: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ittt: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly screening: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checklist: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly contactPersonUserId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAdditionalFeesAccount: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                    };
                    readonly accountId: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                        readonly description: "`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                    };
                    readonly value: {
                        readonly type: "integer";
                    };
                    readonly targetFee: {
                        readonly type: "string";
                        readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        readonly description: "`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                    };
                    readonly automationSources: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly automationPlatforms: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                            readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                        };
                    };
                    readonly RUSources: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                            readonly description: "`agoda` `bookingCom` `despegar` `expedia` `hostelworld` `homeAway`";
                        };
                    };
                    readonly allSources: {
                        readonly type: "boolean";
                    };
                    readonly isDeducted: {
                        readonly type: "boolean";
                    };
                    readonly isBundled: {
                        readonly type: "boolean";
                    };
                    readonly allPlatforms: {
                        readonly type: "boolean";
                    };
                    readonly allRUSources: {
                        readonly type: "boolean";
                    };
                    readonly isAutomated: {
                        readonly type: "boolean";
                    };
                    readonly isPercentage: {
                        readonly type: "boolean";
                    };
                    readonly multiplier: {
                        readonly type: "string";
                        readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                        readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                    };
                    readonly isSyncToSupportedChannelsEnabled: {
                        readonly type: "boolean";
                    };
                    readonly deductedConfiguration: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                        readonly type: "object";
                        readonly properties: {
                            readonly isApplyToAll: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                                readonly type: "boolean";
                            };
                            readonly sources: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly channels: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                    readonly channelConfigurations: {
                        readonly description: "[Beta] Settings overrides per channel";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly channel: {
                                    readonly description: "[Beta] Channel name";
                                    readonly type: "string";
                                };
                                readonly isEnabled: {
                                    readonly description: "[Beta] Is sync to channel enabled";
                                    readonly type: "boolean";
                                };
                                readonly type: {
                                    readonly description: "[Beta] Fee Type in the channel";
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                    readonly minimum: 0;
                                };
                                readonly isPercentage: {
                                    readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                    readonly type: "boolean";
                                };
                                readonly multiplier: {
                                    readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                                };
                                readonly targetFee: {
                                    readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                                };
                                readonly isBundled: {
                                    readonly type: "boolean";
                                    readonly description: "[Beta] Include fee in the accommodation fare";
                                };
                            };
                            readonly required: readonly ["channel", "value", "isPercentage"];
                        };
                    };
                    readonly sourcesConfigurations: {
                        readonly description: "[Beta] Settings overrides per groups of manual sources";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly sources: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                        readonly type: "string";
                                    };
                                    readonly minItems: 1;
                                };
                                readonly type: {
                                    readonly description: "[Beta] Fee type\n\n`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                                    readonly type: "string";
                                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                                };
                                readonly isPercentage: {
                                    readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                    readonly type: "boolean";
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                    readonly minimum: 0;
                                };
                                readonly multiplier: {
                                    readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                                };
                                readonly targetFee: {
                                    readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                                };
                                readonly isBundled: {
                                    readonly type: "boolean";
                                    readonly description: "[Beta] Include fee in the accommodation fare";
                                };
                            };
                            readonly required: readonly ["value", "isPercentage", "sources"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAdditionalFeesListingListingid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["5c2cc4be46cb1e00226a5b6e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                    };
                    readonly accountId: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                        readonly description: "`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                    };
                    readonly value: {
                        readonly type: "integer";
                    };
                    readonly listingId: {
                        readonly type: "string";
                    };
                    readonly targetFee: {
                        readonly type: "string";
                        readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        readonly description: "`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                    };
                    readonly automationSources: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly automationPlatforms: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                            readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                        };
                    };
                    readonly RUSources: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                            readonly description: "`agoda` `bookingCom` `despegar` `expedia` `hostelworld` `homeAway`";
                        };
                    };
                    readonly allSources: {
                        readonly type: "boolean";
                    };
                    readonly allPlatforms: {
                        readonly type: "boolean";
                    };
                    readonly allRUSources: {
                        readonly type: "boolean";
                    };
                    readonly isAutomated: {
                        readonly type: "boolean";
                    };
                    readonly isPercentage: {
                        readonly type: "boolean";
                    };
                    readonly multiplier: {
                        readonly type: "string";
                        readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                        readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                    };
                    readonly isSyncToSupportedChannelsEnabled: {
                        readonly type: "boolean";
                    };
                    readonly isBundled: {
                        readonly type: "boolean";
                        readonly description: "Bundle as part of accommodation fare";
                    };
                    readonly deductedConfiguration: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                        readonly type: "object";
                        readonly properties: {
                            readonly isApplyToAll: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                                readonly type: "boolean";
                            };
                            readonly sources: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly channels: {
                                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                    readonly channelConfigurations: {
                        readonly description: "[Beta] Settings overrides per channel";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly channel: {
                                    readonly description: "[Beta] Channel name";
                                    readonly type: "string";
                                };
                                readonly isEnabled: {
                                    readonly description: "[Beta] Is sync to channel enabled";
                                    readonly type: "boolean";
                                };
                                readonly type: {
                                    readonly description: "[Beta] Fee Type in the channel";
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                    readonly minimum: 0;
                                };
                                readonly isPercentage: {
                                    readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                    readonly type: "boolean";
                                };
                                readonly multiplier: {
                                    readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                                };
                                readonly targetFee: {
                                    readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                                };
                                readonly isBundled: {
                                    readonly type: "boolean";
                                    readonly description: "[Beta] Include fee in the accommodation fare";
                                };
                            };
                            readonly required: readonly ["channel", "value", "isPercentage"];
                        };
                    };
                    readonly sourcesConfigurations: {
                        readonly description: "[Beta] Settings overrides per groups of manual sources";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly sources: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                        readonly type: "string";
                                    };
                                    readonly minItems: 1;
                                };
                                readonly type: {
                                    readonly description: "[Beta] Fee type\n\n`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                                    readonly type: "string";
                                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                                };
                                readonly isPercentage: {
                                    readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                    readonly type: "boolean";
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                    readonly minimum: 0;
                                };
                                readonly multiplier: {
                                    readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                                };
                                readonly targetFee: {
                                    readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                    readonly type: "string";
                                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                                };
                                readonly isBundled: {
                                    readonly type: "boolean";
                                    readonly description: "[Beta] Include fee in the accommodation fare";
                                };
                            };
                            readonly required: readonly ["value", "isPercentage", "sources"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAllComplexes: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "The ID of the complex";
                        readonly examples: readonly ["645774fe76e5da340bf915e7"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "The title of the complex";
                        readonly examples: readonly ["Complex 1"];
                    };
                    readonly nickname: {
                        readonly type: "string";
                        readonly description: "The nickname of the complex";
                        readonly examples: readonly ["C1"];
                    };
                    readonly propertyIds: {
                        readonly type: "array";
                        readonly description: "An array of IDs of the properties in the complex";
                        readonly items: {
                            readonly type: "string";
                            readonly examples: readonly ["6457751476e5da340bf915e8"];
                        };
                    };
                    readonly tags: {
                        readonly type: "array";
                        readonly description: "An array of tags associated with the complex";
                        readonly items: {
                            readonly type: "string";
                            readonly examples: readonly ["tag1"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Could not find complex"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAmenitiesGroups: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly description: "The name of the amenity group";
                readonly examples: readonly ["Accessibility"];
            };
            readonly examples: readonly ["Accessibility", "Bathroom", "Bedroom & Laundry"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAvailabilityPricingApiCalendarListings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingIds: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d,5fa02fa358d2db673e17bc2e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing IDs (comma separated)";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "First day to be returned (format: YYYY-MM-DD)";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-02-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Last day to be returned (format: YYYY-MM-DD)";
                };
                readonly includeAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Return day objects including allotment";
                };
                readonly ignoreInactiveChildAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Specify ignoreInactiveChildAllotment=true to exclude inactive sub-units from the allotment calculation. Default value is false.";
                };
                readonly ignoreUnlistedChildAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Specify ignoreUnlistedChildAllotment=true to exclude unlisted sub-units from the allotment calculation. Default value is false.";
                };
            };
            readonly required: readonly ["listingIds", "startDate", "endDate"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date with format YYYY-MM-DD";
                    readonly examples: readonly ["2021-01-01"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Listing's currency value.";
                    readonly examples: readonly ["EUR"];
                };
                readonly price: {
                    readonly type: "number";
                    readonly description: "Price in the listing's currency.";
                    readonly examples: readonly [50];
                };
                readonly isBasePrice: {
                    readonly type: "boolean";
                    readonly description: "Flag which shows whether listing is set to base price.";
                    readonly examples: readonly [true];
                };
                readonly minNights: {
                    readonly type: "number";
                    readonly description: "Min nights value.";
                    readonly examples: readonly [2];
                };
                readonly isBaseMinNights: {
                    readonly type: "boolean";
                    readonly description: "Flag which shows whether listing is set to base min night.";
                    readonly examples: readonly [true];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status value, enum: available, unavailable, booked, reserved.";
                    readonly examples: readonly ["booked"];
                };
                readonly allotment: {
                    readonly type: "number";
                    readonly description: "Allotment value for parent listing.";
                };
                readonly blocks: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly blockRefs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                    };
                };
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                };
                readonly reservation: {
                    readonly type: "object";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                    readonly additionalProperties: true;
                };
                readonly cta: {
                    readonly type: "boolean";
                    readonly description: "Closed To Arrival value";
                };
                readonly ctd: {
                    readonly type: "boolean";
                    readonly description: "Closed To Departure value";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Listing not found"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["LISTING_NOT_FOUND"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b68e3a-573cc83364fce31b0fd45abc"];
                };
            };
            readonly required: readonly ["message", "code", "data", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["child \"endDate\" fails because [\"endDate\" is required]"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["ValidationError"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b69790-624dc23b6c3abdaf7a0ce73d"];
                };
            };
            readonly required: readonly ["message", "code", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Internal Server Error"];
                };
            };
            readonly required: readonly ["message"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAvailabilityPricingApiCalendarListingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly startDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-01-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "First day to be returned (format: YYYY-MM-DD)";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-02-01"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Last day to be returned (format: YYYY-MM-DD)";
                };
                readonly includeAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Return day objects including allotment";
                };
                readonly ignoreInactiveChildAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Specify ignoreInactiveChildAllotment=true to exclude inactive sub-units from the allotment calculation. Default value is false.";
                };
                readonly ignoreUnlistedChildAllotment: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Specify ignoreUnlistedChildAllotment=true to exclude unlisted sub-units from the allotment calculation. Default value is false.";
                };
            };
            readonly required: readonly ["startDate", "endDate"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date with format YYYY-MM-DD";
                    readonly examples: readonly ["2021-01-01"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Listing's currency value.";
                    readonly examples: readonly ["EUR"];
                };
                readonly price: {
                    readonly type: "number";
                    readonly description: "Price in the listing's currency.";
                    readonly examples: readonly [50];
                };
                readonly isBasePrice: {
                    readonly type: "boolean";
                    readonly description: "Flag which shows whether listing is set to base price.";
                    readonly examples: readonly [true];
                };
                readonly minNights: {
                    readonly type: "number";
                    readonly description: "Min nights value.";
                    readonly examples: readonly [2];
                };
                readonly isBaseMinNights: {
                    readonly type: "boolean";
                    readonly description: "Flag which shows whether listing is set to base min night.";
                    readonly examples: readonly [true];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status value, enum: available, unavailable, booked, reserved.";
                    readonly examples: readonly ["booked"];
                };
                readonly allotment: {
                    readonly type: "number";
                    readonly description: "Allotment value for parent listing.";
                };
                readonly blocks: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly blockRefs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                    };
                };
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                };
                readonly reservation: {
                    readonly type: "object";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                    readonly additionalProperties: true;
                };
                readonly cta: {
                    readonly type: "boolean";
                    readonly description: "Closed To Arrival value";
                };
                readonly ctd: {
                    readonly type: "boolean";
                    readonly description: "Closed To Departure value";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Listing not found"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["LISTING_NOT_FOUND"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b68e3a-573cc83364fce31b0fd45abc"];
                };
            };
            readonly required: readonly ["message", "code", "data", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["child \"endDate\" fails because [\"endDate\" is required]"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["ValidationError"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b69790-624dc23b6c3abdaf7a0ce73d"];
                };
            };
            readonly required: readonly ["message", "code", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Internal Server Error"];
                };
            };
            readonly required: readonly ["message"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCommunicationConversations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly filters: {
                    readonly type: "string";
                    readonly examples: readonly ["[{\"field\":\"status\", \"operator\":\"$eq\", \"value\": \"OPEN\"}]"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Array of filters to query by. \n\n **field**: Subject of the filter: `status`, `type`, `guest._id`, `owner._id`, `reservation._id`, `reservation.status`, `read`, `assignee._id`, `listing._id` \n\n **operator**: Enhanced MongoDB comparison operator: `$eq`, `$exists`, `$not`, `$contains`, `$notcontains`, `$gt`, `$lt`, `$between`, `$in`, `$nin` \n\n **value**: Value to filter by";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["guest reservation status assignee priority createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["-modifiedAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting, default: `-createdAt`";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination, max: 100, default is: `25`";
                };
                readonly cursorAfter: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyMC0wNy0wOVQxMDowMzozOS43ODBaXzVmMDZlYjdiYzVkODk4MDAyYWMwNTM2Nw=="];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination cursor, default:`''`,\n\n `cursorAfter` and `cursorBefore` are not allowed to be used at the same time in one request.\n\n First request will require only limit parameter and in response you will get cursor object. \n\n Use `cursor.after` to send in query params `cursorAfter` parameter in order to move forward. \n\n Use `cursor.before` to send in query params `cursorBefore` parameter in order to move backwards. \n\n An empty string in after or before cursor in response will indicate that there is no more documents in this direction. \n\n If you sort buy something different than `createdAt`, please make sure include this parameter in fields, or you will get empty cursor. \n\n `cursorAfter` and `cursorBefore` are not allowed to be used at the same time in one request.";
                };
                readonly cursorBefore: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyMC0wNy0wOVQxMDowMzozOS43ODBaXzVmMDZlYjdiYzVkODk4MDAyYWMwNTM2Nw=="];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination cursor, default:`null`";
                };
                readonly "conversation types": {
                    readonly type: "string";
                    readonly examples: readonly ["owner"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The conversations API currently supports requests for guest conversations and owners conversations.\n\nThe filter field `type`(guest/ owner, guest by default) is required in order to determine the type of the returned conversations. (in contrast to the guest conversation, owner's contains owner's info)\n\nOwners conversations do not support `airbnb2` module type, messages that sent with `platform` module type will be sent through Email. ";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "number";
                    readonly examples: readonly [200];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly count: {
                            readonly type: "number";
                            readonly examples: readonly [30];
                        };
                        readonly countUnread: {
                            readonly type: "number";
                            readonly examples: readonly [2];
                        };
                        readonly fields: {
                            readonly type: "string";
                            readonly examples: readonly ["guest reservation status assignee priority createdAt"];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly examples: readonly [25];
                        };
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly after: {
                                    readonly type: "string";
                                    readonly examples: readonly [""];
                                };
                                readonly before: {
                                    readonly type: "string";
                                    readonly examples: readonly [""];
                                };
                            };
                        };
                        readonly conversations: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly examples: readonly ["6134a49cd450d300307794cb"];
                                    };
                                    readonly assignee: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly priority: {
                                        readonly type: "number";
                                        readonly examples: readonly [10];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly reservations: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly _id: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["61347d71d450d300307792a4"];
                                                        };
                                                        readonly status: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["inquiry"];
                                                        };
                                                        readonly checkIn: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["2021-09-04T21:00:00.000Z"];
                                                        };
                                                        readonly checkOut: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["2021-09-05T20:00:00.000Z"];
                                                        };
                                                        readonly customFields: {
                                                            readonly type: "array";
                                                            readonly items: {};
                                                        };
                                                        readonly listing: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly tags: {
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                        readonly examples: readonly ["Pool"];
                                                                    };
                                                                };
                                                                readonly active: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly _id: {
                                                                    readonly type: "string";
                                                                    readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                                                                };
                                                                readonly picture: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly _id: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["615c0214cdf3370028883d3a"];
                                                                        };
                                                                        readonly thumbnail: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1606036872/preprod/5fb67280e39677002e6c2683/ephepadfvgopafgykxrc.jpg"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly address: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly full: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["Loma Mazamitla Sur, La Aurora, 44790 Guadalajara, Jal., Mexico"];
                                                                        };
                                                                        readonly city: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["Guadalajara"];
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["Mexico"];
                                                                        };
                                                                        readonly state: {
                                                                            readonly type: "string";
                                                                            readonly examples: readonly ["Jalisco"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly nickname: {
                                                                    readonly type: "string";
                                                                    readonly examples: readonly ["OPS-Listing"];
                                                                };
                                                                readonly title: {
                                                                    readonly type: "string";
                                                                    readonly examples: readonly ["TEST"];
                                                                };
                                                                readonly customFields: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                            readonly guest: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["61347d70d450d300307792a3"];
                                                    };
                                                    readonly email: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["asdasd@assadsa.com"];
                                                    };
                                                    readonly isReturning: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly accountId: {
                                        readonly type: "string";
                                        readonly examples: readonly ["5fb67280e39677002e6c2683"];
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-09-05T11:06:05.388Z"];
                                    };
                                    readonly state: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly read: {
                                                readonly type: "boolean";
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                                readonly examples: readonly ["OPEN"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly type: "object";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCommunicationConversationsConversationid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly conversationId: {
                    readonly type: "string";
                    readonly examples: readonly ["615997c2e74f61003015ab02"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Conversation Id";
                };
            };
            readonly required: readonly ["conversationId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["status"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. \n\n When `null` retrieve the main properties of the object. \n\nWe recommend always specifying the specific fields you'd like to receive to ensure that you get them. Please see the full list above.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "number";
                    readonly examples: readonly [200];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly examples: readonly ["6134a49cd450d300307794cb"];
                        };
                        readonly assignee: {
                            readonly type: "object";
                            readonly properties: {
                                readonly _id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly priority: {
                            readonly type: "number";
                            readonly examples: readonly [10];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly properties: {
                                readonly reservations: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "string";
                                                readonly examples: readonly ["61347d71d450d300307792a4"];
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                                readonly examples: readonly ["inquiry"];
                                            };
                                            readonly checkIn: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-09-04T21:00:00.000Z"];
                                            };
                                            readonly checkOut: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-09-05T20:00:00.000Z"];
                                            };
                                            readonly customFields: {
                                                readonly type: "array";
                                                readonly items: {};
                                            };
                                            readonly listing: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly tags: {
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["Pool"];
                                                        };
                                                    };
                                                    readonly active: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly _id: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                                                    };
                                                    readonly picture: {
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly _id: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["615c0214cdf3370028883d3a"];
                                                            };
                                                            readonly thumbnail: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1606036872/preprod/5fb67280e39677002e6c2683/ephepadfvgopafgykxrc.jpg"];
                                                            };
                                                        };
                                                    };
                                                    readonly address: {
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly full: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["Loma Mazamitla Sur, La Aurora, 44790 Guadalajara, Jal., Mexico"];
                                                            };
                                                            readonly city: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["Guadalajara"];
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["Mexico"];
                                                            };
                                                            readonly state: {
                                                                readonly type: "string";
                                                                readonly examples: readonly ["Jalisco"];
                                                            };
                                                        };
                                                    };
                                                    readonly nickname: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["OPS-Listing"];
                                                    };
                                                    readonly title: {
                                                        readonly type: "string";
                                                        readonly examples: readonly ["TEST"];
                                                    };
                                                    readonly customFields: {
                                                        readonly type: "array";
                                                        readonly items: {};
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly guest: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly _id: {
                                            readonly type: "string";
                                            readonly examples: readonly ["61347d70d450d300307792a3"];
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly examples: readonly ["asdasd@assadsa.com"];
                                        };
                                        readonly isReturning: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                            };
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly examples: readonly ["5fb67280e39677002e6c2683"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2021-09-05T11:06:05.388Z"];
                        };
                        readonly state: {
                            readonly type: "object";
                            readonly properties: {
                                readonly read: {
                                    readonly type: "boolean";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly examples: readonly ["OPEN"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly type: "object";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCommunicationConversationsConversationidPosts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly conversationId: {
                    readonly type: "string";
                    readonly examples: readonly ["615997c2e74f61003015ab02"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Conversation Id";
                };
            };
            readonly required: readonly ["conversationId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["-createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting, default: `-createdAt` ";
                };
                readonly cursorAfter: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyMC0wNy0wOVQxMDowMzozOS43ODBaXzVmMDZlYjdiYzVkODk4MDAyYWMwNTM2Nw=="];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination cursor, default:`''`.\n\n First request will require only limit parameter and in response you will get cursor object. \n\n Use `cursor.after` to send in query params `cursorAfter` parameter in order to move forward. \n\n Use `cursor.before` to send in query params `cursorBefore` parameter in order to move backwards. \n\n An empty string in after or before cursor in response will indicate that there is no more documents in this direction. \n\n If you sort buy something different than `createdAt`, please make sure include this parameter in fields, or you will get empty cursor. \n\n `cursorAfter` and `cursorBefore` are not allowed to be used at the same time in one request.";
                };
                readonly cursorBefore: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyMC0wNy0xMFQxMDoyMToxMy4yODNaXzVmMDg0MTE5MjhlZjlmMDAyODJjMTVhYg=="];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination cursor, default:`null`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "number";
                    readonly examples: readonly [200];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly count: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly examples: readonly [25];
                        };
                        readonly sort: {
                            readonly type: "string";
                            readonly examples: readonly ["-createdAt"];
                        };
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly after: {
                                    readonly type: "string";
                                    readonly examples: readonly [""];
                                };
                                readonly before: {
                                    readonly type: "string";
                                    readonly examples: readonly [""];
                                };
                            };
                        };
                        readonly posts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly module: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly to: {
                                                readonly type: "array";
                                                readonly items: {};
                                            };
                                            readonly cc: {
                                                readonly type: "array";
                                                readonly items: {};
                                            };
                                            readonly bcc: {
                                                readonly type: "array";
                                                readonly items: {};
                                            };
                                            readonly templateValues: {
                                                readonly type: "array";
                                                readonly items: {};
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly examples: readonly ["note"];
                                            };
                                        };
                                    };
                                    readonly from: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly examples: readonly ["user"];
                                            };
                                            readonly fullName: {
                                                readonly type: "string";
                                                readonly examples: readonly ["COM - postman"];
                                            };
                                        };
                                    };
                                    readonly isFromMigration: {
                                        readonly type: "boolean";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly examples: readonly ["61643413c9cf7a002d929325"];
                                    };
                                    readonly body: {
                                        readonly type: "string";
                                        readonly examples: readonly ["This is new message(COM postman)"];
                                    };
                                    readonly attachments: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly conversationId: {
                                        readonly type: "string";
                                        readonly examples: readonly ["615997c2e74f61003015ab02"];
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-10-11T12:54:43.248Z"];
                                    };
                                    readonly __v: {
                                        readonly type: "number";
                                        readonly examples: readonly [0];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly type: "object";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetContacts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly q: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search query string. Searches in fullName, emails, phones";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. If fields not be chosen response will be return with all fields. The selected fields from the users table will be returned inside the response";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["3847fh87hs78n79f3,fj78fh78fbw7yyhdfyb"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to these ids, comma separated string";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination limit, max: 100";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination skip";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly examples: readonly ["Elad"];
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly examples: readonly ["Kremer"];
                            };
                            readonly fullName: {
                                readonly type: "string";
                                readonly examples: readonly ["Elad Kremer"];
                            };
                            readonly nickName: {
                                readonly type: "string";
                                readonly examples: readonly ["My Nickname"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly examples: readonly ["My Title"];
                            };
                            readonly company: {
                                readonly type: "string";
                                readonly examples: readonly ["My Company"];
                            };
                            readonly picture: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                    };
                                    readonly regular: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                    };
                                };
                            };
                            readonly emails: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly examples: readonly ["['aaaa@darkforest.com']"];
                            };
                            readonly phones: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly examples: readonly ["['+97777777777777']"];
                            };
                            readonly preferredContactMethod: {
                                readonly type: "string";
                                readonly enum: readonly ["email", "sms", "call"];
                                readonly examples: readonly ["email"];
                                readonly description: "`email` `sms` `call`";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Primary email for the contact";
                                readonly examples: readonly ["asdasdasdasd@darkforest.com"];
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "Primary phone for the contact";
                                readonly examples: readonly ["+97777777777777"];
                            };
                            readonly notes: {
                                readonly type: "string";
                                readonly description: "Notes about the user";
                                readonly examples: readonly ["Some notes"];
                            };
                        };
                    };
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly [""];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetContactsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Entry ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. If fields not be chosen response will be return with all fields. The selected fields from the users table will be returned inside the response";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly nickName: {
                    readonly type: "string";
                    readonly examples: readonly ["My Nickname"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["My Title"];
                };
                readonly company: {
                    readonly type: "string";
                    readonly examples: readonly ["My Company"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['aaaa@darkforest.com']"];
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['+97777777777777']"];
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["email", "sms", "call"];
                    readonly examples: readonly ["email"];
                    readonly description: "`email` `sms` `call`";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email for the contact";
                    readonly examples: readonly ["asdasdasdasd@darkforest.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone for the contact";
                    readonly examples: readonly ["+97777777777777"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Notes about the user";
                    readonly examples: readonly ["Some notes"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The listing ID whose translations you wish to retrieve";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly language: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Language slug for retrieving the translation. To get all translations for a specific listing, please use language=all";
                };
            };
            readonly required: readonly ["language"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Listing ID";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                };
                readonly en_us: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly en_gb: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly en_au: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly en_nz: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly en_ca: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly da_dk: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly es_ar: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly es_es: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly es_mx: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly hu_hu: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly nl_nl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly pt_pt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly pt_br: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly de_de: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly fr_fr: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly fr_ca: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly it_it: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly pl_pl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly ru_ru: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly hr_hr: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly ga_gp: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
                readonly zh_chs: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "Is translation active";
                            readonly examples: readonly [true];
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly summary: {
                            readonly type: "string";
                        };
                        readonly space: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "string";
                        };
                        readonly neighborhood: {
                            readonly type: "string";
                        };
                        readonly transit: {
                            readonly type: "string";
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly description: "Listing notes";
                            readonly examples: readonly ["Some notes about listing"];
                        };
                        readonly interactionWithGuests: {
                            readonly type: "string";
                        };
                        readonly checkInInstructions: {
                            readonly type: "object";
                            readonly properties: {
                                readonly primaryCheckIn: {
                                    readonly type: "string";
                                };
                                readonly alternativeCheckIn: {
                                    readonly type: "string";
                                };
                                readonly notes: {
                                    readonly type: "string";
                                };
                                readonly welcomeMessage: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                        };
                    };
                    readonly required: readonly ["active", "title", "summary", "space", "access", "neighborhood", "transit", "interactionWithGuests", "checkInInstructions"];
                };
            };
            readonly required: readonly ["listingId", "en_us", "en_gb", "en_au", "en_nz", "en_ca", "da_dk", "es_ar", "es_es", "es_mx", "hu_hu", "nl_nl", "pt_pt", "pt_br", "de_de", "fr_fr", "fr_ca", "it_it", "pl_pl", "ru_ru", "hr_hr", "ga_gp", "zh_chs"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetFinancialsListingId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly guestsIncludedInRegularFee: {
                    readonly type: "number";
                    readonly description: "The higest number of guests that will not reauires to add extraPersonFee";
                };
                readonly extraPersonFee: {
                    readonly type: "number";
                    readonly description: "The amount of fee which is added for each extra person, above guestsIncludedInRegularFee, in the reservation";
                };
                readonly basePrice: {
                    readonly type: "number";
                    readonly description: "The cost per night for the listing";
                };
                readonly basePriceUSD: {
                    readonly type: "number";
                    readonly description: "The cost per night in USD for the listing";
                };
                readonly monthlyPriceFactor: {
                    readonly type: "number";
                    readonly description: "A factor for the nightly cost for reservations that are longer then a month";
                };
                readonly weeklyPriceFactor: {
                    readonly type: "number";
                    readonly description: "A factor for the nightly cost for reservations that are longer then a week";
                };
                readonly weekendBasePrice: {
                    readonly type: "number";
                    readonly description: "The base price for weekend";
                };
                readonly securityDepositFee: {
                    readonly type: "number";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency that is in use for the listing prices";
                };
                readonly cleaningFee: {
                    readonly type: "object";
                    readonly description: "Object to define cleaningFee settings";
                    readonly properties: {
                        readonly value: {
                            readonly type: "object";
                            readonly description: "Default settings for cleaning fee";
                            readonly properties: {
                                readonly valueType: {
                                    readonly type: "string";
                                    readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                    readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                };
                                readonly multiplier: {
                                    readonly type: "string";
                                    readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                    readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                };
                                readonly formula: {
                                    readonly type: "number";
                                    readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                };
                            };
                        };
                        readonly lastUpdatedAt: {
                            readonly type: "string";
                            readonly format: "date";
                            readonly description: "Last update date";
                        };
                        readonly airbnb: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly rentalsUnited: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly homeAway: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly expedia: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly despegar: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetGuestsIdPaymentMethods: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guest ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly reuse: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly examples: readonly [true];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Retrieve methods allowed for reusage in other guest's reservations";
                };
            };
            readonly required: readonly [];
        }];
    };
};
declare const GetHooks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination, max: 100";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["0"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["531968414930a7f09b075800"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit to a specific listing";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Field to sort by. Prepend - for DESC.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetHooksHookid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly hookId: {
                    readonly type: "string";
                    readonly examples: readonly ["616442ca8eb305002d901545"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Hook Id";
                };
            };
            readonly required: readonly ["hookId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetIntegrations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["nickname incomingEmail"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. Default value: `25`, max: `100`";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["nickname"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Ascending alphabetical sort , use - to descending sort. Default `-active nickname`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["5958c7e5884e961000817799"];
                            };
                            readonly airbnb2: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly credentials: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly expiresAt: {
                                                readonly type: "integer";
                                            };
                                            readonly accessToken: {
                                                readonly type: "string";
                                            };
                                            readonly refreshToken: {
                                                readonly type: "string";
                                            };
                                            readonly lastForceRefresh: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "date";
                                    };
                                };
                                readonly description: "Only if platform is airbnb";
                            };
                            readonly forwardEmails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly all: {
                                        readonly type: "boolean";
                                        readonly default: true;
                                    };
                                    readonly emails: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Status of connection";
                            };
                            readonly platform: {
                                readonly type: "string";
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Listing details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly complexes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Complex details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly examples: readonly ["naama"];
                            };
                            readonly channelId: {
                                readonly type: "string";
                            };
                            readonly activatedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly disconnectedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly proxyEmail: {
                                readonly type: "string";
                            };
                            readonly incomingEmail: {
                                readonly type: "string";
                            };
                            readonly externalAccountId: {
                                readonly type: "string";
                            };
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "External ID";
                                readonly examples: readonly ["naama@user.guesty.com"];
                            };
                            readonly companyName: {
                                readonly type: "string";
                            };
                            readonly fetchRequests: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly fetchAllListings: {
                                            readonly type: "boolean";
                                        };
                                        readonly externalListingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                            readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                            };
                            readonly migration: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                        readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                    };
                                    readonly createTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly updateTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly finishedTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Step details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly discrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly discrepancyResolution: {
                                        readonly type: "string";
                                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                                        readonly description: "`GUESTY` `AIRBNB`";
                                    };
                                    readonly listingQuantityDiscrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly error: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly at: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly message: {
                                                readonly type: "string";
                                            };
                                            readonly raw: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly notes: {
                                        readonly type: "string";
                                    };
                                    readonly isRollingBack: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                            };
                            readonly userId: {
                                readonly type: "string";
                                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Owner";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly tripAdvisor: {
                                readonly type: "object";
                                readonly description: "TripAdvisor details";
                                readonly additionalProperties: true;
                            };
                            readonly homeaway2: {
                                readonly type: "object";
                                readonly description: "Homeaway details";
                                readonly additionalProperties: true;
                            };
                            readonly bookingCom: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly legalEntityId: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "BookingCom details";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly missingStep: {
                                readonly type: "string";
                            };
                            readonly steps: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                            readonly description: "`COMPLETED` `IN_PROGRESS`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly newIntegrationBackup: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly threadIdsMigrated: {
                                readonly type: "boolean";
                            };
                            readonly isDeleted: {
                                readonly type: "boolean";
                            };
                            readonly deletedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetIntegrationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17de3f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Integration ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. When null retrieve the main properties of the object. We recommend always specifying the specific fields you'd like to receive to ensure that you get them. Please see the full list above";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["5958c7e5884e961000817799"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly properties: {
                        readonly credentials: {
                            readonly type: "object";
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly expiresAt: {
                                    readonly type: "integer";
                                };
                                readonly accessToken: {
                                    readonly type: "string";
                                };
                                readonly refreshToken: {
                                    readonly type: "string";
                                };
                                readonly lastForceRefresh: {
                                    readonly type: "string";
                                    readonly description: "date";
                                };
                            };
                        };
                        readonly forwardEmails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly all: {
                                    readonly type: "boolean";
                                    readonly default: true;
                                };
                                readonly emails: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date";
                        };
                    };
                    readonly description: "Only if platform is airbnb";
                };
                readonly forwardEmails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly all: {
                            readonly type: "boolean";
                            readonly default: true;
                        };
                        readonly emails: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Status of connection";
                };
                readonly platform: {
                    readonly type: "string";
                };
                readonly listings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Listing details";
                        readonly additionalProperties: true;
                    };
                };
                readonly complexes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Complex details";
                        readonly additionalProperties: true;
                    };
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly examples: readonly ["naama"];
                };
                readonly channelId: {
                    readonly type: "string";
                };
                readonly activatedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly disconnectedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly proxyEmail: {
                    readonly type: "string";
                };
                readonly incomingEmail: {
                    readonly type: "string";
                };
                readonly externalAccountId: {
                    readonly type: "string";
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "External ID";
                    readonly examples: readonly ["naama@user.guesty.com"];
                };
                readonly companyName: {
                    readonly type: "string";
                };
                readonly fetchRequests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly fetchAllListings: {
                                readonly type: "boolean";
                            };
                            readonly externalListingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly finishedTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                    readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                };
                readonly migration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                            readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                        };
                        readonly createTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly updateTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly finishedTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly steps: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Step details";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly discrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly discrepancyResolution: {
                            readonly type: "string";
                            readonly enum: readonly ["GUESTY", "AIRBNB"];
                            readonly description: "`GUESTY` `AIRBNB`";
                        };
                        readonly listingQuantityDiscrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly error: {
                            readonly type: "object";
                            readonly properties: {
                                readonly at: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly message: {
                                    readonly type: "string";
                                };
                                readonly raw: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                        };
                        readonly isRollingBack: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                    };
                };
                readonly userId: {
                    readonly type: "string";
                    readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Owner";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly description: "TripAdvisor details";
                    readonly additionalProperties: true;
                };
                readonly homeaway2: {
                    readonly type: "object";
                    readonly description: "Homeaway details";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly properties: {
                        readonly legalEntityId: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "BookingCom details";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly missingStep: {
                    readonly type: "string";
                };
                readonly steps: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                readonly description: "`COMPLETED` `IN_PROGRESS`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly newIntegrationBackup: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly threadIdsMigrated: {
                    readonly type: "boolean";
                };
                readonly isDeleted: {
                    readonly type: "boolean";
                };
                readonly deletedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Integration Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetLanguages: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly examples: readonly ["German - Germany"];
                    };
                    readonly slug: {
                        readonly type: "string";
                        readonly examples: readonly ["de_de"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["3847fh87hs78n79f3,fj78fh78fbw7yyhdfyb"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to these ids, comma separated";
                };
                readonly nids: {
                    readonly type: "string";
                    readonly examples: readonly ["3847fh87hs78n79f3,fj78fh78fbw7yyhdfyb"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to not include these ids, comma seperated";
                };
                readonly viewId: {
                    readonly type: "string";
                    readonly default: any;
                    readonly examples: readonly ["Cozy luxurious"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pull a specific view (view is a saved settings of accountId, filters, fields,sort)";
                };
                readonly q: {
                    readonly type: "string";
                    readonly default: any;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search query string. Searches in title, internalNote, address.full";
                };
                readonly city: {
                    readonly type: "string";
                    readonly default: any;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to city";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to active state. Boolean, true for only active, false for only inactive, don't include for all.";
                };
                readonly pmsActive: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to listings with the feature pms active. Boolean, true for only active, false for only inactive, don't include for all.";
                };
                readonly integrationId: {
                    readonly type: "string";
                    readonly default: any;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to specific integration";
                };
                readonly listed: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to listed state. Boolean, true for only listed, false for only unlisted, don't include for all.";
                };
                readonly available: {
                    readonly type: "object";
                    readonly properties: {
                        readonly checkIn: {
                            readonly type: "string";
                            readonly examples: readonly ["2022-12-27"];
                        };
                        readonly checkOut: {
                            readonly type: "string";
                            readonly examples: readonly ["2022-12-29"];
                        };
                        readonly minOccupancy: {
                            readonly type: "number";
                            readonly examples: readonly [3];
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to only available listings in specific dates\n\n **IMPORTANT NOTE:**\n Fields in this query must be enclosed in curly braces as shown below, and NOT as displayed in the coding playground output.\n `available = {\"checkIn\":\"YYYY-MM-DD\",\"checkOut\":\"YYYY-MM-DD\",\"minOccupancy\":3}`";
                };
                readonly ignoreFlexibleBlocks: {
                    readonly type: "boolean";
                    readonly default: false;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Shows available listings and listings with flexible blocks.";
                };
                readonly tags: {
                    readonly type: "string";
                    readonly default: any;
                    readonly examples: readonly ["tags=kinesu"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to listings with specific tag";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly default: any;
                    readonly examples: readonly ["title address"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly default: "title";
                    readonly examples: readonly ["title/-title"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ascending alphabetical sort , use - to descending sort";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 25;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination, max: 100";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly default: 0;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination skip";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "String (ObjectId)";
                        readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                    };
                    readonly accountId: {
                        readonly type: "string";
                        readonly description: "String (ObjectId)";
                        readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                    };
                    readonly integrations: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["5958c7e5884e961000817799"];
                                };
                                readonly airbnb2: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly credentials: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly code: {
                                                    readonly type: "string";
                                                };
                                                readonly expiresAt: {
                                                    readonly type: "integer";
                                                };
                                                readonly accessToken: {
                                                    readonly type: "string";
                                                };
                                                readonly refreshToken: {
                                                    readonly type: "string";
                                                };
                                                readonly lastForceRefresh: {
                                                    readonly type: "string";
                                                    readonly description: "date";
                                                };
                                            };
                                        };
                                        readonly forwardEmails: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly all: {
                                                    readonly type: "boolean";
                                                    readonly default: true;
                                                };
                                                readonly emails: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                        readonly createdAt: {
                                            readonly type: "string";
                                            readonly description: "date";
                                        };
                                    };
                                    readonly description: "Only if platform is airbnb";
                                };
                                readonly forwardEmails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly all: {
                                            readonly type: "boolean";
                                            readonly default: true;
                                        };
                                        readonly emails: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                                readonly active: {
                                    readonly type: "boolean";
                                    readonly description: "Status of connection";
                                };
                                readonly platform: {
                                    readonly type: "string";
                                };
                                readonly listings: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly description: "Listing details";
                                        readonly additionalProperties: true;
                                    };
                                };
                                readonly complexes: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly description: "Complex details";
                                        readonly additionalProperties: true;
                                    };
                                };
                                readonly nickname: {
                                    readonly type: "string";
                                    readonly examples: readonly ["naama"];
                                };
                                readonly channelId: {
                                    readonly type: "string";
                                };
                                readonly activatedAt: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly disconnectedAt: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly proxyEmail: {
                                    readonly type: "string";
                                };
                                readonly incomingEmail: {
                                    readonly type: "string";
                                };
                                readonly externalAccountId: {
                                    readonly type: "string";
                                };
                                readonly id: {
                                    readonly type: "integer";
                                    readonly description: "External ID";
                                    readonly examples: readonly ["naama@user.guesty.com"];
                                };
                                readonly companyName: {
                                    readonly type: "string";
                                };
                                readonly fetchRequests: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly fetchAllListings: {
                                                readonly type: "boolean";
                                            };
                                            readonly externalListingIds: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                                readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                                readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                            };
                                            readonly createTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly updateTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly finishedTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                        };
                                    };
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                    readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                                };
                                readonly migration: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                            readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly steps: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly description: "Step details";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                        readonly discrepancyStepExecuted: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                        };
                                        readonly discrepancyResolution: {
                                            readonly type: "string";
                                            readonly enum: readonly ["GUESTY", "AIRBNB"];
                                            readonly description: "`GUESTY` `AIRBNB`";
                                        };
                                        readonly listingQuantityDiscrepancyStepExecuted: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                        };
                                        readonly error: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly at: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly code: {
                                                    readonly type: "string";
                                                };
                                                readonly message: {
                                                    readonly type: "string";
                                                };
                                                readonly raw: {
                                                    readonly type: "object";
                                                    readonly additionalProperties: true;
                                                };
                                            };
                                        };
                                        readonly notes: {
                                            readonly type: "string";
                                        };
                                        readonly isRollingBack: {
                                            readonly type: "boolean";
                                            readonly default: false;
                                        };
                                    };
                                };
                                readonly userId: {
                                    readonly type: "string";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                                };
                                readonly accountId: {
                                    readonly type: "string";
                                    readonly description: "Owner";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly tripAdvisor: {
                                    readonly type: "object";
                                    readonly description: "TripAdvisor details";
                                    readonly additionalProperties: true;
                                };
                                readonly homeaway2: {
                                    readonly type: "object";
                                    readonly description: "Homeaway details";
                                    readonly additionalProperties: true;
                                };
                                readonly bookingCom: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly legalEntityId: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly description: "BookingCom details";
                                };
                                readonly createdAt: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly missingStep: {
                                    readonly type: "string";
                                };
                                readonly steps: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                                readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                                readonly description: "`COMPLETED` `IN_PROGRESS`";
                                            };
                                            readonly createTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly updateTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                        };
                                    };
                                };
                                readonly newIntegrationBackup: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                                readonly threadIdsMigrated: {
                                    readonly type: "boolean";
                                };
                                readonly isDeleted: {
                                    readonly type: "boolean";
                                };
                                readonly deletedAt: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                            };
                        };
                    };
                    readonly isVirtual: {
                        readonly type: "boolean";
                    };
                    readonly nickname: {
                        readonly type: "string";
                    };
                    readonly tags: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly isListed: {
                        readonly type: "boolean";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly propertyType: {
                        readonly type: "string";
                    };
                    readonly roomType: {
                        readonly type: "string";
                    };
                    readonly bedType: {
                        readonly type: "string";
                    };
                    readonly accommodates: {
                        readonly type: "number";
                    };
                    readonly bedrooms: {
                        readonly type: "number";
                    };
                    readonly areaSquareFeet: {
                        readonly type: "number";
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly full: {
                                readonly type: "string";
                                readonly description: "full address";
                                readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [34.8202173];
                            };
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [32.0695525];
                            };
                            readonly street: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly publishedAddress: {
                        readonly type: "object";
                        readonly properties: {
                            readonly full: {
                                readonly type: "string";
                                readonly description: "full address";
                                readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                            };
                            readonly lng: {
                                readonly type: "number";
                                readonly examples: readonly [34.8202173];
                            };
                            readonly lat: {
                                readonly type: "number";
                                readonly examples: readonly [32.0695525];
                            };
                            readonly street: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly timezone: {
                        readonly type: "string";
                    };
                    readonly defaultCheckInTime: {
                        readonly type: "string";
                    };
                    readonly defaultCheckOutTime: {
                        readonly type: "string";
                    };
                    readonly cleaning: {
                        readonly type: "object";
                        readonly properties: {
                            readonly defaultCleaningTime: {
                                readonly type: "string";
                            };
                            readonly instructions: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cleaningStatus: {
                        readonly type: "object";
                        readonly properties: {
                            readonly value: {
                                readonly type: "string";
                                readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly examples: readonly ["2019-08-24T14:15:22Z"];
                            };
                        };
                    };
                    readonly picture: {
                        readonly type: "object";
                        readonly properties: {
                            readonly regular: {
                                readonly type: "string";
                            };
                            readonly thumbnail: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly large: {
                                readonly type: "string";
                            };
                            readonly caption: {
                                readonly type: "string";
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                            readonly original: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly size: {
                                readonly type: "number";
                                readonly examples: readonly [39516];
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                        };
                    };
                    readonly pictures: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly large: {
                                    readonly type: "string";
                                };
                                readonly caption: {
                                    readonly type: "string";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                                readonly original: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly size: {
                                    readonly type: "number";
                                    readonly examples: readonly [39516];
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                            };
                        };
                    };
                    readonly amenities: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly amenitiesNotIncluded: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly terms: {
                        readonly type: "object";
                        readonly properties: {
                            readonly minNights: {
                                readonly type: "number";
                            };
                            readonly maxNights: {
                                readonly type: "number";
                            };
                            readonly cancellation: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly prices: {
                        readonly type: "object";
                        readonly properties: {
                            readonly guestsIncludedInRegularFee: {
                                readonly type: "number";
                            };
                            readonly extraPersonFee: {
                                readonly type: "number";
                            };
                            readonly basePrice: {
                                readonly type: "number";
                            };
                            readonly basePriceUSD: {
                                readonly type: "number";
                            };
                            readonly monthlyPriceFactor: {
                                readonly type: "number";
                            };
                            readonly weeklyPriceFactor: {
                                readonly type: "number";
                            };
                            readonly weekendBasePrice: {
                                readonly type: "number";
                            };
                            readonly securityDepositFee: {
                                readonly type: "number";
                            };
                            readonly currency: {
                                readonly type: "string";
                            };
                            readonly cleaningFee: {
                                readonly type: "number";
                            };
                        };
                    };
                    readonly netIncomeFormula: {
                        readonly type: "string";
                    };
                    readonly commissionFormula: {
                        readonly type: "string";
                    };
                    readonly commissionTaxPrecentage: {
                        readonly type: "string";
                    };
                    readonly pms: {
                        readonly type: "object";
                        readonly properties: {
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly automation: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly autoList: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly active: {
                                                readonly type: "boolean";
                                            };
                                            readonly config: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly inbox: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly customSignature: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly cleaningStatus: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly value: {
                                        readonly type: "string";
                                        readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                        readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                    };
                                    readonly updatedAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                    };
                                };
                            };
                            readonly paymentProcessing: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly active: {
                                        readonly type: "boolean";
                                    };
                                    readonly paymentProviders: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly stripe: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly active: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly status: {
                                                        readonly type: "string";
                                                    };
                                                    readonly accountName: {
                                                        readonly type: "string";
                                                    };
                                                    readonly defaultCurrency: {
                                                        readonly type: "string";
                                                    };
                                                    readonly syncedAt: {
                                                        readonly type: "string";
                                                        readonly format: "date";
                                                    };
                                                    readonly payload: {
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                            };
                                                            readonly livemode: {
                                                                readonly type: "boolean";
                                                            };
                                                            readonly token_type: {
                                                                readonly type: "string";
                                                            };
                                                            readonly stripe_publishable_key: {
                                                                readonly type: "string";
                                                            };
                                                            readonly stripe_user_id: {
                                                                readonly type: "string";
                                                            };
                                                            readonly scope: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly autoPayments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly policy: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                    };
                    readonly receptionistsService: {
                        readonly title: "object";
                        readonly properties: {
                            readonly receptionDesk: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly ittt: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                            readonly screening: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly checklist: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                            readonly contactPersonUserId: {
                                readonly type: "string";
                            };
                        };
                        readonly type: "object";
                    };
                    readonly active: {
                        readonly type: "boolean";
                    };
                    readonly customFields: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly calendarRules: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly publicDescription: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly privateDescription: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly markups: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsCities: {
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["title address"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listings fields to retrieve, separated by space";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                };
                readonly integrations: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["5958c7e5884e961000817799"];
                            };
                            readonly airbnb2: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly credentials: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly expiresAt: {
                                                readonly type: "integer";
                                            };
                                            readonly accessToken: {
                                                readonly type: "string";
                                            };
                                            readonly refreshToken: {
                                                readonly type: "string";
                                            };
                                            readonly lastForceRefresh: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "date";
                                    };
                                };
                                readonly description: "Only if platform is airbnb";
                            };
                            readonly forwardEmails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly all: {
                                        readonly type: "boolean";
                                        readonly default: true;
                                    };
                                    readonly emails: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Status of connection";
                            };
                            readonly platform: {
                                readonly type: "string";
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Listing details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly complexes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Complex details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly examples: readonly ["naama"];
                            };
                            readonly channelId: {
                                readonly type: "string";
                            };
                            readonly activatedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly disconnectedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly proxyEmail: {
                                readonly type: "string";
                            };
                            readonly incomingEmail: {
                                readonly type: "string";
                            };
                            readonly externalAccountId: {
                                readonly type: "string";
                            };
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "External ID";
                                readonly examples: readonly ["naama@user.guesty.com"];
                            };
                            readonly companyName: {
                                readonly type: "string";
                            };
                            readonly fetchRequests: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly fetchAllListings: {
                                            readonly type: "boolean";
                                        };
                                        readonly externalListingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                            readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                            };
                            readonly migration: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                        readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                    };
                                    readonly createTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly updateTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly finishedTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Step details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly discrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly discrepancyResolution: {
                                        readonly type: "string";
                                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                                        readonly description: "`GUESTY` `AIRBNB`";
                                    };
                                    readonly listingQuantityDiscrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly error: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly at: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly message: {
                                                readonly type: "string";
                                            };
                                            readonly raw: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly notes: {
                                        readonly type: "string";
                                    };
                                    readonly isRollingBack: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                            };
                            readonly userId: {
                                readonly type: "string";
                                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Owner";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly tripAdvisor: {
                                readonly type: "object";
                                readonly description: "TripAdvisor details";
                                readonly additionalProperties: true;
                            };
                            readonly homeaway2: {
                                readonly type: "object";
                                readonly description: "Homeaway details";
                                readonly additionalProperties: true;
                            };
                            readonly bookingCom: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly legalEntityId: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "BookingCom details";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly missingStep: {
                                readonly type: "string";
                            };
                            readonly steps: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                            readonly description: "`COMPLETED` `IN_PROGRESS`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly newIntegrationBackup: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly threadIdsMigrated: {
                                readonly type: "boolean";
                            };
                            readonly isDeleted: {
                                readonly type: "boolean";
                            };
                            readonly deletedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly isVirtual: {
                    readonly type: "boolean";
                };
                readonly nickname: {
                    readonly type: "string";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isListed: {
                    readonly type: "boolean";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly propertyType: {
                    readonly type: "string";
                };
                readonly roomType: {
                    readonly type: "string";
                };
                readonly bedType: {
                    readonly type: "string";
                };
                readonly accommodates: {
                    readonly type: "number";
                };
                readonly bedrooms: {
                    readonly type: "number";
                };
                readonly areaSquareFeet: {
                    readonly type: "number";
                };
                readonly address: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly publishedAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly defaultCheckInTime: {
                    readonly type: "string";
                };
                readonly defaultCheckOutTime: {
                    readonly type: "string";
                };
                readonly cleaning: {
                    readonly type: "object";
                    readonly properties: {
                        readonly defaultCleaningTime: {
                            readonly type: "string";
                        };
                        readonly instructions: {
                            readonly type: "string";
                        };
                    };
                };
                readonly cleaningStatus: {
                    readonly type: "object";
                    readonly properties: {
                        readonly value: {
                            readonly type: "string";
                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly large: {
                            readonly type: "string";
                        };
                        readonly caption: {
                            readonly type: "string";
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                        readonly original: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly examples: readonly [39516];
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                    };
                };
                readonly pictures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly regular: {
                                readonly type: "string";
                            };
                            readonly thumbnail: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly large: {
                                readonly type: "string";
                            };
                            readonly caption: {
                                readonly type: "string";
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                            readonly original: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly size: {
                                readonly type: "number";
                                readonly examples: readonly [39516];
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                        };
                    };
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly amenitiesNotIncluded: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly terms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly minNights: {
                            readonly type: "number";
                        };
                        readonly maxNights: {
                            readonly type: "number";
                        };
                        readonly cancellation: {
                            readonly type: "string";
                        };
                    };
                };
                readonly prices: {
                    readonly type: "object";
                    readonly properties: {
                        readonly guestsIncludedInRegularFee: {
                            readonly type: "number";
                        };
                        readonly extraPersonFee: {
                            readonly type: "number";
                        };
                        readonly basePrice: {
                            readonly type: "number";
                        };
                        readonly basePriceUSD: {
                            readonly type: "number";
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weekendBasePrice: {
                            readonly type: "number";
                        };
                        readonly securityDepositFee: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly cleaningFee: {
                            readonly type: "number";
                        };
                    };
                };
                readonly netIncomeFormula: {
                    readonly type: "string";
                };
                readonly commissionFormula: {
                    readonly type: "string";
                };
                readonly commissionTaxPrecentage: {
                    readonly type: "string";
                };
                readonly pms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly automation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly autoList: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly config: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly inbox: {
                            readonly type: "object";
                            readonly properties: {
                                readonly customSignature: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly paymentProcessing: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly paymentProviders: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly stripe: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly accountName: {
                                                    readonly type: "string";
                                                };
                                                readonly defaultCurrency: {
                                                    readonly type: "string";
                                                };
                                                readonly syncedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly livemode: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly token_type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_publishable_key: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_user_id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly scope: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly autoPayments: {
                            readonly type: "object";
                            readonly properties: {
                                readonly policy: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                    };
                };
                readonly receptionistsService: {
                    readonly title: "object";
                    readonly properties: {
                        readonly receptionDesk: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ittt: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly screening: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checklist: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly contactPersonUserId: {
                            readonly type: "string";
                        };
                    };
                    readonly type: "object";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly calendarRules: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly publicDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly privateDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly markups: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsIdCustomFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsIdFieldsPaymentproviderid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listings fields to retrieve";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly paymentProviderId: {
                    readonly type: "string";
                };
                readonly paymentProvider: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly syncedAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly lastPendingPaymentDate: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly pendingPaymentsCount: {
                            readonly type: "number";
                        };
                        readonly paymentMethodsCount: {
                            readonly type: "number";
                        };
                        readonly providerAccountId: {
                            readonly type: "string";
                        };
                        readonly isDefault: {
                            readonly type: "boolean";
                        };
                        readonly providerType: {
                            readonly type: "string";
                        };
                        readonly connectedBy: {
                            readonly type: "string";
                        };
                        readonly accountName: {
                            readonly type: "string";
                        };
                        readonly defaultCurrency: {
                            readonly type: "string";
                        };
                        readonly statsLastUpdated: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetListingsTags: {
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwners: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pagination: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Use pagination response";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "When use pagination, limit amount of docs per page";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "When use pagination";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Ordered list of fields name to sort by, separated by spaces.";
                };
                readonly q: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Query against (fullName OR lastName OR firstName)";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. If fields not be chosen response will be return with all fields.\n\n`fields`:\n> `_id` `ownersPortalSettings` `listings` `locale` `active` `allowReservations` `showReservationTooltips` `businessInformation` `birthday` `anniversary` `workingCapital` `firstName` `lastName` `fullName` `email` `address` `phone` `picture` `notes` `createdAt`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly ownersPortalSettings: {
                                readonly type: "object";
                                readonly description: "The OPSettings object";
                                readonly properties: {
                                    readonly bookedNights: {
                                        readonly type: "boolean";
                                        readonly examples: readonly [true];
                                    };
                                    readonly revenue: {
                                        readonly type: "boolean";
                                        readonly examples: readonly [true];
                                    };
                                    readonly accommodationFare: {
                                        readonly type: "boolean";
                                    };
                                    readonly guestsReports: {
                                        readonly type: "boolean";
                                    };
                                    readonly occupancy: {
                                        readonly type: "boolean";
                                    };
                                    readonly avgNightlyRate: {
                                        readonly type: "boolean";
                                    };
                                    readonly revPal: {
                                        readonly type: "boolean";
                                    };
                                    readonly hostPayout: {
                                        readonly type: "boolean";
                                    };
                                    readonly nightlyRate: {
                                        readonly type: "boolean";
                                    };
                                    readonly minNights: {
                                        readonly type: "boolean";
                                    };
                                    readonly bookingSource: {
                                        readonly type: "boolean";
                                    };
                                    readonly showInternalNotesForBlocks: {
                                        readonly type: "boolean";
                                    };
                                    readonly showReservedReservations: {
                                        readonly type: "boolean";
                                    };
                                    readonly showHelpCenter: {
                                        readonly type: "boolean";
                                    };
                                    readonly showOwnerStatements: {
                                        readonly type: "boolean";
                                    };
                                    readonly allowReservations: {
                                        readonly type: "boolean";
                                    };
                                    readonly allowReservationsUnavailableDates: {
                                        readonly type: "boolean";
                                    };
                                    readonly showGuestFullName: {
                                        readonly type: "boolean";
                                    };
                                    readonly showGuestEmail: {
                                        readonly type: "boolean";
                                    };
                                    readonly showGuestPhone: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly description: "Listings Id";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                            };
                            readonly locale: {
                                readonly type: "string";
                                readonly description: "Localization";
                                readonly examples: readonly ["en-US"];
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly examples: readonly ["false"];
                            };
                            readonly allowReservations: {
                                readonly type: "boolean";
                                readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                                readonly examples: readonly ["false"];
                            };
                            readonly showReservationTooltips: {
                                readonly type: "boolean";
                                readonly description: "Deprecated. Always treated as true";
                                readonly examples: readonly ["false"];
                            };
                            readonly businessInformation: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly businessType: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                            };
                                            readonly other: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly street: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly zipcode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly full: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly vatIdentificationNumber: {
                                        readonly type: "string";
                                    };
                                    readonly vatRate: {
                                        readonly type: "number";
                                        readonly description: "Range between 0 - 100";
                                    };
                                    readonly ownerCommission: {
                                        readonly type: "number";
                                        readonly description: "Range between 0 - 100";
                                    };
                                };
                            };
                            readonly birthday: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly anniversary: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly workingCapital: {
                                readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                                readonly type: "number";
                                readonly examples: readonly [0];
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly examples: readonly ["Elad"];
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly examples: readonly ["Kremer"];
                            };
                            readonly fullName: {
                                readonly type: "string";
                                readonly examples: readonly ["Elad Kremer"];
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Primary email address";
                                readonly examples: readonly ["example@guesty.com"];
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly examples: readonly ["test address"];
                            };
                            readonly personalAddress: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly street: {
                                        readonly type: "string";
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                    };
                                    readonly zipcode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly full: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "Primary phone number";
                                readonly examples: readonly ["15417543010"];
                            };
                            readonly picture: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                    };
                                    readonly regular: {
                                        readonly type: "string";
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                    };
                                };
                            };
                            readonly notes: {
                                readonly type: "string";
                                readonly examples: readonly ["this is a note"];
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "date ISO";
                                readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                            };
                        };
                    };
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner's ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. If fields not be chosen response will be return with all fields.\n\n`fields`:\n> `_id` `ownersPortalSettings` `listings` `locale` `active` `allowReservations` `showReservationTooltips` `businessInformation` `birthday` `anniversary` `workingCapital` `firstName` `lastName` `fullName` `email` `address` `phone` `picture` `notes` `createdAt`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly ownersPortalSettings: {
                    readonly type: "object";
                    readonly description: "The OPSettings object";
                    readonly properties: {
                        readonly bookedNights: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly revenue: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly accommodationFare: {
                            readonly type: "boolean";
                        };
                        readonly guestsReports: {
                            readonly type: "boolean";
                        };
                        readonly occupancy: {
                            readonly type: "boolean";
                        };
                        readonly avgNightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly revPal: {
                            readonly type: "boolean";
                        };
                        readonly hostPayout: {
                            readonly type: "boolean";
                        };
                        readonly nightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly minNights: {
                            readonly type: "boolean";
                        };
                        readonly bookingSource: {
                            readonly type: "boolean";
                        };
                        readonly showInternalNotesForBlocks: {
                            readonly type: "boolean";
                        };
                        readonly showReservedReservations: {
                            readonly type: "boolean";
                        };
                        readonly showHelpCenter: {
                            readonly type: "boolean";
                        };
                        readonly showOwnerStatements: {
                            readonly type: "boolean";
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                        };
                        readonly allowReservationsUnavailableDates: {
                            readonly type: "boolean";
                        };
                        readonly showGuestFullName: {
                            readonly type: "boolean";
                        };
                        readonly showGuestEmail: {
                            readonly type: "boolean";
                        };
                        readonly showGuestPhone: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listings: {
                    readonly type: "array";
                    readonly description: "Listings Id";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                };
                readonly locale: {
                    readonly type: "string";
                    readonly description: "Localization";
                    readonly examples: readonly ["en-US"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly allowReservations: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                    readonly examples: readonly ["false"];
                };
                readonly showReservationTooltips: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Always treated as true";
                    readonly examples: readonly ["false"];
                };
                readonly businessInformation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly businessType: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly other: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly vatIdentificationNumber: {
                            readonly type: "string";
                        };
                        readonly vatRate: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                        readonly ownerCommission: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                    };
                };
                readonly birthday: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly anniversary: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly workingCapital: {
                    readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email address";
                    readonly examples: readonly ["example@guesty.com"];
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["test address"];
                };
                readonly personalAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly zipcode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly full: {
                            readonly type: "string";
                        };
                    };
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone number";
                    readonly examples: readonly ["15417543010"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly notes: {
                    readonly type: "string";
                    readonly examples: readonly ["this is a note"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "date ISO";
                    readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersOwneridDocuments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
            };
            readonly required: readonly ["ownerId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly minimum: 0;
                    readonly default: 0;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination start index";
                };
                readonly limit: {
                    readonly minimum: 1;
                    readonly maximum: 200;
                    readonly default: 10;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit amount of results per page";
                };
                readonly sort: {
                    readonly default: "-_id";
                    readonly type: "string";
                    readonly examples: readonly ["fullName"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Ordered list of field names to sort by, separated by spaces";
                };
                readonly includeDeleted: {
                    readonly default: false;
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Include deleted documents, true/false";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly type: "number";
                    readonly description: "Pagination start index";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly description: "Pagination limit per page";
                };
                readonly count: {
                    readonly type: "number";
                    readonly description: "Pagination results count after filtering";
                };
                readonly totalCount: {
                    readonly type: "number";
                    readonly description: "Pagination results count without filtering";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly description: "Pagination sort field";
                };
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                            };
                            readonly accountId: {
                                readonly type: "string";
                            };
                            readonly ownerId: {
                                readonly type: "string";
                            };
                            readonly originalFileName: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly enum: readonly ["DOCUMENT", "CONTRACT"];
                                readonly type: "string";
                                readonly examples: readonly ["DOCUMENT"];
                                readonly description: "`DOCUMENT` `CONTRACT`";
                            };
                            readonly isShared: {
                                readonly type: "boolean";
                                readonly description: "Document is visible to owner in Owners Portal";
                            };
                            readonly startDate: {
                                readonly type: "string";
                                readonly description: "Document effective date in YYYY-MM-DD format";
                            };
                            readonly endDate: {
                                readonly type: "string";
                                readonly description: "Document expiration date in YYYY-MM-DD format";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly deletedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["_id", "accountId", "ownerId", "originalFileName", "name", "type", "isShared", "createdAt"];
                    };
                };
            };
            readonly required: readonly ["skip", "limit", "count", "totalCount", "sort", "results"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersOwneridDocumentsDocumentid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
                readonly documentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document id";
                };
            };
            readonly required: readonly ["ownerId", "documentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly originalFileName: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly enum: readonly ["DOCUMENT", "CONTRACT"];
                    readonly type: "string";
                    readonly examples: readonly ["DOCUMENT"];
                    readonly description: "`DOCUMENT` `CONTRACT`";
                };
                readonly isShared: {
                    readonly type: "boolean";
                    readonly description: "Document is visible to owner in Owners Portal";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly description: "Document effective date in YYYY-MM-DD format";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly description: "Document expiration date in YYYY-MM-DD format";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly deletedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "ownerId", "originalFileName", "name", "type", "isShared", "createdAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersOwneridDocumentsDocumentidDownload: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
                readonly documentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document id";
                };
            };
            readonly required: readonly ["ownerId", "documentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "string";
            readonly format: "binary";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersReservations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                                readonly properties: {
                                    readonly confirmedAt: {
                                        readonly type: "string";
                                        readonly description: "YYYY-MM-DD";
                                    };
                                    readonly checkIn: {
                                        readonly type: "string";
                                        readonly description: "YYYY-MM-DD";
                                    };
                                    readonly checkOut: {
                                        readonly type: "string";
                                        readonly description: "YYYY-MM-DD";
                                    };
                                    readonly customFields: {
                                        readonly type: "string";
                                        readonly description: "customFields.fieldName";
                                    };
                                    readonly owner: {
                                        readonly type: "string";
                                        readonly description: "owner.fieldName";
                                        readonly example: "owner._id";
                                    };
                                    readonly listing: {
                                        readonly type: "string";
                                        readonly description: "listing.fieldName";
                                        readonly example: "listing.nickname";
                                    };
                                };
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, etc";
                                readonly examples: readonly ["$gt"];
                            };
                            readonly value: {
                                readonly type: "integer";
                                readonly description: "Value to filter by";
                                readonly examples: readonly [0];
                            };
                        };
                    };
                    readonly required: readonly ["field", "operator", "value"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Array of filters to query by";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn checkOut owner.fullName listing.title"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "String of fields, separated by space. \n\n  Allowed fields are \"account\", \"listing\" and \"owner\" fields with its according subkeys \n\n Please note: Allowed list of keys depend on user role and permissions";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ascending sort, use - to descending sort. Default: `_id`";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. Default value: `25`, max: `100`";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly default: 0;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkIn: {
                    readonly type: "string";
                };
                readonly checkOut: {
                    readonly type: "string";
                };
                readonly note: {
                    readonly type: "string";
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly plannedDeparture: {
                    readonly type: "string";
                };
                readonly plannedArrival: {
                    readonly type: "string";
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                };
                readonly listing: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                        };
                        readonly integrations: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["5958c7e5884e961000817799"];
                                    };
                                    readonly airbnb2: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly credentials: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly expiresAt: {
                                                        readonly type: "integer";
                                                    };
                                                    readonly accessToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly refreshToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly lastForceRefresh: {
                                                        readonly type: "string";
                                                        readonly description: "date";
                                                    };
                                                };
                                            };
                                            readonly forwardEmails: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly all: {
                                                        readonly type: "boolean";
                                                        readonly default: true;
                                                    };
                                                    readonly emails: {
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly createdAt: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                        readonly description: "Only if platform is airbnb";
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly active: {
                                        readonly type: "boolean";
                                        readonly description: "Status of connection";
                                    };
                                    readonly platform: {
                                        readonly type: "string";
                                    };
                                    readonly listings: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Listing details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly complexes: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Complex details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly nickname: {
                                        readonly type: "string";
                                        readonly examples: readonly ["naama"];
                                    };
                                    readonly channelId: {
                                        readonly type: "string";
                                    };
                                    readonly activatedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly disconnectedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly proxyEmail: {
                                        readonly type: "string";
                                    };
                                    readonly incomingEmail: {
                                        readonly type: "string";
                                    };
                                    readonly externalAccountId: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly description: "External ID";
                                        readonly examples: readonly ["naama@user.guesty.com"];
                                    };
                                    readonly companyName: {
                                        readonly type: "string";
                                    };
                                    readonly fetchRequests: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly fetchAllListings: {
                                                    readonly type: "boolean";
                                                };
                                                readonly externalListingIds: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                                    readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly finishedTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                        readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                                    };
                                    readonly migration: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly status: {
                                                readonly type: "string";
                                                readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                                readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                            };
                                            readonly createTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly updateTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly finishedTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly steps: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly description: "Step details";
                                                    readonly additionalProperties: true;
                                                };
                                            };
                                            readonly discrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly discrepancyResolution: {
                                                readonly type: "string";
                                                readonly enum: readonly ["GUESTY", "AIRBNB"];
                                                readonly description: "`GUESTY` `AIRBNB`";
                                            };
                                            readonly listingQuantityDiscrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly error: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly at: {
                                                        readonly type: "string";
                                                        readonly description: "Date";
                                                    };
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly message: {
                                                        readonly type: "string";
                                                    };
                                                    readonly raw: {
                                                        readonly type: "object";
                                                        readonly additionalProperties: true;
                                                    };
                                                };
                                            };
                                            readonly notes: {
                                                readonly type: "string";
                                            };
                                            readonly isRollingBack: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                        };
                                    };
                                    readonly userId: {
                                        readonly type: "string";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                                    };
                                    readonly accountId: {
                                        readonly type: "string";
                                        readonly description: "Owner";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly tripAdvisor: {
                                        readonly type: "object";
                                        readonly description: "TripAdvisor details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly homeaway2: {
                                        readonly type: "object";
                                        readonly description: "Homeaway details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly bookingCom: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly legalEntityId: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly description: "BookingCom details";
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly missingStep: {
                                        readonly type: "string";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                                    readonly description: "`COMPLETED` `IN_PROGRESS`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly newIntegrationBackup: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly threadIdsMigrated: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeleted: {
                                        readonly type: "boolean";
                                    };
                                    readonly deletedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                };
                            };
                        };
                        readonly isVirtual: {
                            readonly type: "boolean";
                        };
                        readonly nickname: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly isListed: {
                            readonly type: "boolean";
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly propertyType: {
                            readonly type: "string";
                        };
                        readonly roomType: {
                            readonly type: "string";
                        };
                        readonly bedType: {
                            readonly type: "string";
                        };
                        readonly accommodates: {
                            readonly type: "number";
                        };
                        readonly bedrooms: {
                            readonly type: "number";
                        };
                        readonly areaSquareFeet: {
                            readonly type: "number";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly publishedAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly timezone: {
                            readonly type: "string";
                        };
                        readonly defaultCheckInTime: {
                            readonly type: "string";
                        };
                        readonly defaultCheckOutTime: {
                            readonly type: "string";
                        };
                        readonly cleaning: {
                            readonly type: "object";
                            readonly properties: {
                                readonly defaultCleaningTime: {
                                    readonly type: "string";
                                };
                                readonly instructions: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly large: {
                                    readonly type: "string";
                                };
                                readonly caption: {
                                    readonly type: "string";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                                readonly original: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly size: {
                                    readonly type: "number";
                                    readonly examples: readonly [39516];
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                            };
                        };
                        readonly pictures: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly regular: {
                                        readonly type: "string";
                                    };
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                    };
                                    readonly caption: {
                                        readonly type: "string";
                                    };
                                    readonly height: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                    readonly original: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly size: {
                                        readonly type: "number";
                                        readonly examples: readonly [39516];
                                    };
                                    readonly width: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                };
                            };
                        };
                        readonly amenities: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly amenitiesNotIncluded: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly terms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly minNights: {
                                    readonly type: "number";
                                };
                                readonly maxNights: {
                                    readonly type: "number";
                                };
                                readonly cancellation: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly prices: {
                            readonly type: "object";
                            readonly properties: {
                                readonly guestsIncludedInRegularFee: {
                                    readonly type: "number";
                                };
                                readonly extraPersonFee: {
                                    readonly type: "number";
                                };
                                readonly basePrice: {
                                    readonly type: "number";
                                };
                                readonly basePriceUSD: {
                                    readonly type: "number";
                                };
                                readonly monthlyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weeklyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weekendBasePrice: {
                                    readonly type: "number";
                                };
                                readonly securityDepositFee: {
                                    readonly type: "number";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                };
                                readonly cleaningFee: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commissionTaxPrecentage: {
                            readonly type: "string";
                        };
                        readonly pms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly automation: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly autoList: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly config: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly inbox: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly customSignature: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly cleaningStatus: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly value: {
                                            readonly type: "string";
                                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                        };
                                        readonly updatedAt: {
                                            readonly type: "string";
                                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                        };
                                    };
                                };
                                readonly paymentProcessing: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly paymentProviders: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly stripe: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly active: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly status: {
                                                            readonly type: "string";
                                                        };
                                                        readonly accountName: {
                                                            readonly type: "string";
                                                        };
                                                        readonly defaultCurrency: {
                                                            readonly type: "string";
                                                        };
                                                        readonly syncedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date";
                                                        };
                                                        readonly payload: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly token_type: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_publishable_key: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_user_id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly scope: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly autoPayments: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly policy: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                            };
                        };
                        readonly receptionistsService: {
                            readonly title: "object";
                            readonly properties: {
                                readonly receptionDesk: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly ittt: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly screening: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly checklist: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly contactPersonUserId: {
                                    readonly type: "string";
                                };
                            };
                            readonly type: "object";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly customFields: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly calendarRules: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly publicDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly privateDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly markups: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                };
                readonly owner: {
                    readonly type: "object";
                    readonly properties: {
                        readonly ownersPortalSettings: {
                            readonly type: "object";
                            readonly description: "The OPSettings object";
                            readonly properties: {
                                readonly bookedNights: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly revenue: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly accommodationFare: {
                                    readonly type: "boolean";
                                };
                                readonly guestsReports: {
                                    readonly type: "boolean";
                                };
                                readonly occupancy: {
                                    readonly type: "boolean";
                                };
                                readonly avgNightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly revPal: {
                                    readonly type: "boolean";
                                };
                                readonly hostPayout: {
                                    readonly type: "boolean";
                                };
                                readonly nightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly minNights: {
                                    readonly type: "boolean";
                                };
                                readonly bookingSource: {
                                    readonly type: "boolean";
                                };
                                readonly showInternalNotesForBlocks: {
                                    readonly type: "boolean";
                                };
                                readonly showReservedReservations: {
                                    readonly type: "boolean";
                                };
                                readonly showHelpCenter: {
                                    readonly type: "boolean";
                                };
                                readonly showOwnerStatements: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservations: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservationsUnavailableDates: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestFullName: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestEmail: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestPhone: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly listings: {
                            readonly type: "array";
                            readonly description: "Listings Id";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly locale: {
                            readonly type: "string";
                            readonly description: "Localization";
                            readonly examples: readonly ["en-US"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly examples: readonly ["false"];
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                            readonly examples: readonly ["false"];
                        };
                        readonly showReservationTooltips: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Always treated as true";
                            readonly examples: readonly ["false"];
                        };
                        readonly businessInformation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly businessType: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly other: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly street: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly zipcode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                        readonly full: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly vatIdentificationNumber: {
                                    readonly type: "string";
                                };
                                readonly vatRate: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                                readonly ownerCommission: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                            };
                        };
                        readonly birthday: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly anniversary: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly workingCapital: {
                            readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                            readonly type: "number";
                            readonly examples: readonly [0];
                        };
                        readonly firstName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad"];
                        };
                        readonly lastName: {
                            readonly type: "string";
                            readonly examples: readonly ["Kremer"];
                        };
                        readonly fullName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad Kremer"];
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "Primary email address";
                            readonly examples: readonly ["example@guesty.com"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly examples: readonly ["test address"];
                        };
                        readonly personalAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "Primary phone number";
                            readonly examples: readonly ["15417543010"];
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly large: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly examples: readonly ["this is a note"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date ISO";
                            readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                        };
                    };
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly id: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnersReservationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation Id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkIn: {
                    readonly type: "string";
                };
                readonly checkOut: {
                    readonly type: "string";
                };
                readonly note: {
                    readonly type: "string";
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly plannedDeparture: {
                    readonly type: "string";
                };
                readonly plannedArrival: {
                    readonly type: "string";
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                };
                readonly listing: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                        };
                        readonly integrations: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["5958c7e5884e961000817799"];
                                    };
                                    readonly airbnb2: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly credentials: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly expiresAt: {
                                                        readonly type: "integer";
                                                    };
                                                    readonly accessToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly refreshToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly lastForceRefresh: {
                                                        readonly type: "string";
                                                        readonly description: "date";
                                                    };
                                                };
                                            };
                                            readonly forwardEmails: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly all: {
                                                        readonly type: "boolean";
                                                        readonly default: true;
                                                    };
                                                    readonly emails: {
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly createdAt: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                        readonly description: "Only if platform is airbnb";
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly active: {
                                        readonly type: "boolean";
                                        readonly description: "Status of connection";
                                    };
                                    readonly platform: {
                                        readonly type: "string";
                                    };
                                    readonly listings: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Listing details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly complexes: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Complex details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly nickname: {
                                        readonly type: "string";
                                        readonly examples: readonly ["naama"];
                                    };
                                    readonly channelId: {
                                        readonly type: "string";
                                    };
                                    readonly activatedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly disconnectedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly proxyEmail: {
                                        readonly type: "string";
                                    };
                                    readonly incomingEmail: {
                                        readonly type: "string";
                                    };
                                    readonly externalAccountId: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly description: "External ID";
                                        readonly examples: readonly ["naama@user.guesty.com"];
                                    };
                                    readonly companyName: {
                                        readonly type: "string";
                                    };
                                    readonly fetchRequests: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly fetchAllListings: {
                                                    readonly type: "boolean";
                                                };
                                                readonly externalListingIds: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                                    readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly finishedTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                        readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                                    };
                                    readonly migration: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly status: {
                                                readonly type: "string";
                                                readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                                readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                            };
                                            readonly createTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly updateTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly finishedTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly steps: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly description: "Step details";
                                                    readonly additionalProperties: true;
                                                };
                                            };
                                            readonly discrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly discrepancyResolution: {
                                                readonly type: "string";
                                                readonly enum: readonly ["GUESTY", "AIRBNB"];
                                                readonly description: "`GUESTY` `AIRBNB`";
                                            };
                                            readonly listingQuantityDiscrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly error: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly at: {
                                                        readonly type: "string";
                                                        readonly description: "Date";
                                                    };
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly message: {
                                                        readonly type: "string";
                                                    };
                                                    readonly raw: {
                                                        readonly type: "object";
                                                        readonly additionalProperties: true;
                                                    };
                                                };
                                            };
                                            readonly notes: {
                                                readonly type: "string";
                                            };
                                            readonly isRollingBack: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                        };
                                    };
                                    readonly userId: {
                                        readonly type: "string";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                                    };
                                    readonly accountId: {
                                        readonly type: "string";
                                        readonly description: "Owner";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly tripAdvisor: {
                                        readonly type: "object";
                                        readonly description: "TripAdvisor details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly homeaway2: {
                                        readonly type: "object";
                                        readonly description: "Homeaway details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly bookingCom: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly legalEntityId: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly description: "BookingCom details";
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly missingStep: {
                                        readonly type: "string";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                                    readonly description: "`COMPLETED` `IN_PROGRESS`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly newIntegrationBackup: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly threadIdsMigrated: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeleted: {
                                        readonly type: "boolean";
                                    };
                                    readonly deletedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                };
                            };
                        };
                        readonly isVirtual: {
                            readonly type: "boolean";
                        };
                        readonly nickname: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly isListed: {
                            readonly type: "boolean";
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly propertyType: {
                            readonly type: "string";
                        };
                        readonly roomType: {
                            readonly type: "string";
                        };
                        readonly bedType: {
                            readonly type: "string";
                        };
                        readonly accommodates: {
                            readonly type: "number";
                        };
                        readonly bedrooms: {
                            readonly type: "number";
                        };
                        readonly areaSquareFeet: {
                            readonly type: "number";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly publishedAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly timezone: {
                            readonly type: "string";
                        };
                        readonly defaultCheckInTime: {
                            readonly type: "string";
                        };
                        readonly defaultCheckOutTime: {
                            readonly type: "string";
                        };
                        readonly cleaning: {
                            readonly type: "object";
                            readonly properties: {
                                readonly defaultCleaningTime: {
                                    readonly type: "string";
                                };
                                readonly instructions: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly large: {
                                    readonly type: "string";
                                };
                                readonly caption: {
                                    readonly type: "string";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                                readonly original: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly size: {
                                    readonly type: "number";
                                    readonly examples: readonly [39516];
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                            };
                        };
                        readonly pictures: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly regular: {
                                        readonly type: "string";
                                    };
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                    };
                                    readonly caption: {
                                        readonly type: "string";
                                    };
                                    readonly height: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                    readonly original: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly size: {
                                        readonly type: "number";
                                        readonly examples: readonly [39516];
                                    };
                                    readonly width: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                };
                            };
                        };
                        readonly amenities: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly amenitiesNotIncluded: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly terms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly minNights: {
                                    readonly type: "number";
                                };
                                readonly maxNights: {
                                    readonly type: "number";
                                };
                                readonly cancellation: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly prices: {
                            readonly type: "object";
                            readonly properties: {
                                readonly guestsIncludedInRegularFee: {
                                    readonly type: "number";
                                };
                                readonly extraPersonFee: {
                                    readonly type: "number";
                                };
                                readonly basePrice: {
                                    readonly type: "number";
                                };
                                readonly basePriceUSD: {
                                    readonly type: "number";
                                };
                                readonly monthlyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weeklyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weekendBasePrice: {
                                    readonly type: "number";
                                };
                                readonly securityDepositFee: {
                                    readonly type: "number";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                };
                                readonly cleaningFee: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commissionTaxPrecentage: {
                            readonly type: "string";
                        };
                        readonly pms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly automation: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly autoList: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly config: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly inbox: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly customSignature: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly cleaningStatus: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly value: {
                                            readonly type: "string";
                                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                        };
                                        readonly updatedAt: {
                                            readonly type: "string";
                                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                        };
                                    };
                                };
                                readonly paymentProcessing: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly paymentProviders: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly stripe: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly active: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly status: {
                                                            readonly type: "string";
                                                        };
                                                        readonly accountName: {
                                                            readonly type: "string";
                                                        };
                                                        readonly defaultCurrency: {
                                                            readonly type: "string";
                                                        };
                                                        readonly syncedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date";
                                                        };
                                                        readonly payload: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly token_type: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_publishable_key: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_user_id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly scope: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly autoPayments: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly policy: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                            };
                        };
                        readonly receptionistsService: {
                            readonly title: "object";
                            readonly properties: {
                                readonly receptionDesk: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly ittt: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly screening: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly checklist: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly contactPersonUserId: {
                                    readonly type: "string";
                                };
                            };
                            readonly type: "object";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly customFields: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly calendarRules: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly publicDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly privateDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly markups: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                };
                readonly owner: {
                    readonly type: "object";
                    readonly properties: {
                        readonly ownersPortalSettings: {
                            readonly type: "object";
                            readonly description: "The OPSettings object";
                            readonly properties: {
                                readonly bookedNights: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly revenue: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly accommodationFare: {
                                    readonly type: "boolean";
                                };
                                readonly guestsReports: {
                                    readonly type: "boolean";
                                };
                                readonly occupancy: {
                                    readonly type: "boolean";
                                };
                                readonly avgNightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly revPal: {
                                    readonly type: "boolean";
                                };
                                readonly hostPayout: {
                                    readonly type: "boolean";
                                };
                                readonly nightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly minNights: {
                                    readonly type: "boolean";
                                };
                                readonly bookingSource: {
                                    readonly type: "boolean";
                                };
                                readonly showInternalNotesForBlocks: {
                                    readonly type: "boolean";
                                };
                                readonly showReservedReservations: {
                                    readonly type: "boolean";
                                };
                                readonly showHelpCenter: {
                                    readonly type: "boolean";
                                };
                                readonly showOwnerStatements: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservations: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservationsUnavailableDates: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestFullName: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestEmail: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestPhone: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly listings: {
                            readonly type: "array";
                            readonly description: "Listings Id";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly locale: {
                            readonly type: "string";
                            readonly description: "Localization";
                            readonly examples: readonly ["en-US"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly examples: readonly ["false"];
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                            readonly examples: readonly ["false"];
                        };
                        readonly showReservationTooltips: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Always treated as true";
                            readonly examples: readonly ["false"];
                        };
                        readonly businessInformation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly businessType: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly other: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly street: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly zipcode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                        readonly full: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly vatIdentificationNumber: {
                                    readonly type: "string";
                                };
                                readonly vatRate: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                                readonly ownerCommission: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                            };
                        };
                        readonly birthday: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly anniversary: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly workingCapital: {
                            readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                            readonly type: "number";
                            readonly examples: readonly [0];
                        };
                        readonly firstName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad"];
                        };
                        readonly lastName: {
                            readonly type: "string";
                            readonly examples: readonly ["Kremer"];
                        };
                        readonly fullName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad Kremer"];
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "Primary email address";
                            readonly examples: readonly ["example@guesty.com"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly examples: readonly ["test address"];
                        };
                        readonly personalAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "Primary phone number";
                            readonly examples: readonly ["15417543010"];
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly large: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly examples: readonly ["this is a note"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date ISO";
                            readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                        };
                    };
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly id: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Owner reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPaymentProvider: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly providerId: {
                    readonly type: "string";
                    readonly default: "5ee77a05825236b6d5aab005";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["providerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["_id"];
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountName: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly isDefault: {
                    readonly type: "boolean";
                };
                readonly listingsCount: {
                    readonly type: "number";
                };
                readonly paymentMethodsCount: {
                    readonly type: "number";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPaymentProviderByListing: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly includeInactiveProviders: {
                    readonly type: "boolean";
                    readonly default: false;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "include inactive providers in the response.";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly default: any;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "listing id";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. When null retrieve the main properties of the object. We recommend always specifying the specific fields you'd like to receive to ensure that you get them.";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["_id"];
            readonly type: "object";
            readonly properties: {
                readonly paymentProviderId: {
                    readonly type: "string";
                };
                readonly fallbackToDefault: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountName: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly isDefault: {
                    readonly type: "boolean";
                };
                readonly listingsCount: {
                    readonly type: "number";
                };
                readonly paymentMethodsCount: {
                    readonly type: "number";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesHouseRules: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly propertyIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "IDs of the requested unitTypes";
                };
            };
            readonly required: readonly ["propertyIds"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly suitableForChildren: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly suitableForInfants: {
                        readonly type: "boolean";
                    };
                    readonly petsAllowed: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly petsCharged: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly smokingAllowed: {
                        readonly type: "boolean";
                    };
                    readonly partiesAllowed: {
                        readonly type: "boolean";
                    };
                    readonly additionalRules: {
                        readonly type: "string";
                        readonly examples: readonly ["No alcohol"];
                    };
                    readonly quietHours: {
                        readonly type: "object";
                        readonly properties: {
                            readonly set: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                            readonly start: {
                                readonly type: "string";
                                readonly examples: readonly ["22:00"];
                            };
                            readonly end: {
                                readonly type: "string";
                                readonly examples: readonly ["08:00"];
                            };
                        };
                    };
                    readonly minimumAge: {
                        readonly type: "integer";
                        readonly examples: readonly [21];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesHouseRulesUnitTypeUnittypeid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5accf6954c5ed10025902aed"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of the requested unitType";
                };
            };
            readonly required: readonly ["unitTypeId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly suitableForChildren: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly suitableForInfants: {
                    readonly type: "boolean";
                };
                readonly petsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly petsCharged: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly smokingAllowed: {
                    readonly type: "boolean";
                };
                readonly partiesAllowed: {
                    readonly type: "boolean";
                };
                readonly additionalRules: {
                    readonly type: "string";
                    readonly examples: readonly ["No alcohol"];
                };
                readonly quietHours: {
                    readonly type: "object";
                    readonly properties: {
                        readonly set: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly start: {
                            readonly type: "string";
                            readonly examples: readonly ["22:00"];
                        };
                        readonly end: {
                            readonly type: "string";
                            readonly examples: readonly ["08:00"];
                        };
                    };
                };
                readonly minimumAge: {
                    readonly type: "integer";
                    readonly examples: readonly [21];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesSpacesBedTypes: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
            };
            readonly examples: readonly ["KING_BED", "QUEEN_BED", "DOUBLE_BED", "SINGLE_BED", "SOFA_BED", "AIR_MATTRESS", "BUNK_BED", "FLOOR_MATTRESS", "WATER_BED", "TODDLER_BED", "CRIB"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesSpacesComplexComplexid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly complexId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735bf"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of the requested complexId";
                };
            };
            readonly required: readonly ["complexId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly complexId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly unitTypeSpaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly spaces: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly unitTypeId: {
                                            readonly type: "string";
                                            readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                                        };
                                        readonly accountId: {
                                            readonly type: "string";
                                            readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly examples: readonly ["Space room"];
                                        };
                                        readonly roomIds: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly airbnb: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly beds: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly KING_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly QUEEN_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly DOUBLE_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly SINGLE_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly SOFA_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly AIR_MATTRESS: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly BUNK_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                            };
                                        };
                                        readonly other: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly FLOOR_MATTRESS: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly WATER_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly TODDLER_BED: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly CRIB: {
                                                    readonly minimum: 0;
                                                    readonly type: "number";
                                                    readonly default: 0;
                                                    readonly examples: readonly [1];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly bedroomsAllowed: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                            readonly bathrooms: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly SHARED: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly PRIVATE: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesSpacesRoomTypes: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
            };
            readonly examples: readonly ["BEDROOM", "SHARED_SPACE"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPropertiesSpacesUnitTypeUnittypeid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735af"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of the requested unit type";
                };
            };
            readonly required: readonly ["unitTypeId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Space room"];
                            };
                            readonly roomIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly airbnb: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly beds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly KING_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly QUEEN_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly DOUBLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SINGLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SOFA_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly AIR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly BUNK_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly other: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly FLOOR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly WATER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly TODDLER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly CRIB: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly bedroomsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly bathrooms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly SHARED: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly PRIVATE: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetReservations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly viewId: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17de4e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "View Id";
                };
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                                readonly examples: readonly ["checkIn"];
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between\n\n **IMPORTANT NOTE:**\n In order to use the $between operator please check the syntax of the example below:\n `[{\"field\":\"checkIn\", \"operator\":\"$between\",\"from\":\"2023-03-02T00:00:00%2B01:00\",\"to\":\"2023-03-02T23:59:59%2B01:00\"}]`";
                                readonly examples: readonly ["$gt"];
                            };
                            readonly value: {
                                readonly type: "integer";
                                readonly description: "Value to filter by";
                                readonly examples: readonly [0];
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                                readonly default: any;
                                readonly examples: readonly ["now"];
                            };
                        };
                    };
                    readonly required: readonly ["field", "operator", "value"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Array of filters to query by";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn checkOut confirmationCode guest.fullname listing.title"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting, default: `_id`";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. Default value: `25`, max: `100`";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["100"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly limitations: {
                            readonly type: "object";
                            readonly properties: {
                                readonly availableStatuses: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly properties: {
                                readonly invalidCreditCards: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly reports: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly platform: {
                            readonly type: "string";
                        };
                    };
                };
                readonly guestyFeeDetails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly feeMinimum: {
                            readonly type: "number";
                        };
                        readonly fee: {
                            readonly type: "number";
                        };
                        readonly feeUsd: {
                            readonly type: "number";
                        };
                        readonly isMinimumFee: {
                            readonly type: "boolean";
                        };
                        readonly isMaximumFee: {
                            readonly type: "boolean";
                        };
                        readonly planItems: {
                            readonly type: "array";
                            readonly items: {};
                        };
                    };
                };
                readonly review: {
                    readonly type: "object";
                    readonly properties: {
                        readonly shouldReview: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly atTimeOfConfirmation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly snapshotCreated: {
                            readonly type: "boolean";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly manual: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly taxes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly appliedOnFees: {
                                        readonly type: "string";
                                    };
                                    readonly appliedByDefaultOnChannels: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly units: {
                                        readonly type: "string";
                                    };
                                    readonly quantifier: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly appliedToAllFees: {
                                        readonly type: "boolean";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly flag: {
                    readonly type: "boolean";
                };
                readonly accountingEnabled: {
                    readonly type: "boolean";
                };
                readonly isBMApplied: {
                    readonly type: "boolean";
                };
                readonly confirmedPreBookings: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly pulledByDailySync: {
                    readonly type: "boolean";
                };
                readonly manuallyCreated: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly checkIn: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly checkOut: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly altered: {
                            readonly type: "boolean";
                        };
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly authenticationRequiredData: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly lastAuthMsgSentDate: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                            };
                                            readonly authenticationUrl: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly paymentMethodStatus: {
                                        readonly type: "string";
                                    };
                                    readonly isAuthorizationHold: {
                                        readonly type: "boolean";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly refunds: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly authorizationHoldCaptures: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly attempts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly createdAt: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                                };
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique Id";
                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly error: {
                                                    readonly type: "string";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly charge: {
                                                            readonly type: "string";
                                                        };
                                                        readonly code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decline_code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly doc_url: {
                                                            readonly type: "string";
                                                        };
                                                        readonly message: {
                                                            readonly type: "string";
                                                        };
                                                        readonly payment_intent: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                    readonly description: "Unique Id";
                                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly amount: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_capturable: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_received: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly application: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly capture_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly charges: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly object: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly data: {
                                                                            readonly type: "array";
                                                                            readonly items: {
                                                                                readonly type: "object";
                                                                                readonly properties: {
                                                                                    readonly id: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly object: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly amount: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_captured: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_refunded: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly application: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly billing_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly address: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly city: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line1: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line2: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly postal_code: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly state: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly email: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly name: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly phone: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly calculated_statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly captured: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly created: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly currency: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly customer: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly description: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly disputed: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly failure_code: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly failure_message: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly livemode: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly metadata: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly accountId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly confirmationCode: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reservationId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly OTA: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly listingId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly outcome: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly network_status: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reason: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_level: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_score: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly seller_message: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly paid: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly payment_intent: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly card: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly brand: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly checks: {
                                                                                                        readonly type: "object";
                                                                                                        readonly properties: {
                                                                                                            readonly cvc_check: {
                                                                                                                readonly type: "string";
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly exp_month: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly exp_year: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly fingerprint: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly funding: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly last4: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly network: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly refunded: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly refunds: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly object: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly data: {
                                                                                                readonly type: "array";
                                                                                                readonly items: {};
                                                                                            };
                                                                                            readonly has_more: {
                                                                                                readonly type: "boolean";
                                                                                            };
                                                                                            readonly total_count: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly url: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly status: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly has_more: {
                                                                            readonly type: "boolean";
                                                                        };
                                                                        readonly total_count: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly url: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly client_secret: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly confirmation_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly accountId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly confirmationCode: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly reservationId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly OTA: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly listingId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly next_action: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly type: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly use_stripe_sdk: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly type: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly merchant: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_d_secure_2_source: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_name: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly server_transaction_id: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_method_url: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_optimizations: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_encryption: {
                                                                                    readonly type: "object";
                                                                                    readonly properties: {
                                                                                        readonly directory_server_id: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly algorithm: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly certificate: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly root_certificate_authorities: {
                                                                                            readonly type: "array";
                                                                                            readonly items: {};
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly payment_method_options: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly card: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly request_three_d_secure: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method_types: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                                readonly statement_descriptor: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly status: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly payment_method: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly billing_details: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly address: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly city: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly country: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line1: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line2: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly postal_code: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly state: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly email: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly name: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly phone: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly card: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly brand: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly checks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly cvc_check: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly exp_month: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly exp_year: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly fingerprint: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly funding: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly last4: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly networks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly available: {
                                                                                    readonly type: "array";
                                                                                    readonly items: {};
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly three_d_secure_usage: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly supported: {
                                                                                    readonly type: "boolean";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly statusCode: {
                                                            readonly type: "number";
                                                        };
                                                        readonly requestId: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly receiptTargets: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly shouldBePaidAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly guestId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly autoPaymentsPolicy: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly paymentProviderIds: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly netIncome: {
                            readonly type: "number";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly commissionTaxPercentage: {
                            readonly type: "number";
                        };
                        readonly commissionTax: {
                            readonly type: "number";
                        };
                        readonly commissionIncTax: {
                            readonly type: "number";
                        };
                        readonly ownerRevenueFormula: {
                            readonly type: "string";
                        };
                        readonly ownerRevenue: {
                            readonly type: "number";
                        };
                        readonly currencyConversionRateToAccount: {
                            readonly type: "number";
                        };
                        readonly isTouchedPayments: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly guestId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly mtl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly assigned: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
                readonly isReturningGuest: {
                    readonly type: "boolean";
                };
                readonly confirmedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly importedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly additionalFeesAtCreation: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly automationSources: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly isPercentage: {
                                readonly type: "boolean";
                            };
                            readonly isAutomated: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                            };
                            readonly targetFee: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly conversationId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetReservationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["title address"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation fields to retrieve, separated by space";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly limitations: {
                            readonly type: "object";
                            readonly properties: {
                                readonly availableStatuses: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly properties: {
                                readonly invalidCreditCards: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly reports: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly platform: {
                            readonly type: "string";
                        };
                    };
                };
                readonly guestyFeeDetails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly feeMinimum: {
                            readonly type: "number";
                        };
                        readonly fee: {
                            readonly type: "number";
                        };
                        readonly feeUsd: {
                            readonly type: "number";
                        };
                        readonly isMinimumFee: {
                            readonly type: "boolean";
                        };
                        readonly isMaximumFee: {
                            readonly type: "boolean";
                        };
                        readonly planItems: {
                            readonly type: "array";
                            readonly items: {};
                        };
                    };
                };
                readonly review: {
                    readonly type: "object";
                    readonly properties: {
                        readonly shouldReview: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly atTimeOfConfirmation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly snapshotCreated: {
                            readonly type: "boolean";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly manual: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly taxes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly appliedOnFees: {
                                        readonly type: "string";
                                    };
                                    readonly appliedByDefaultOnChannels: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly units: {
                                        readonly type: "string";
                                    };
                                    readonly quantifier: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly appliedToAllFees: {
                                        readonly type: "boolean";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly flag: {
                    readonly type: "boolean";
                };
                readonly accountingEnabled: {
                    readonly type: "boolean";
                };
                readonly isBMApplied: {
                    readonly type: "boolean";
                };
                readonly confirmedPreBookings: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly pulledByDailySync: {
                    readonly type: "boolean";
                };
                readonly manuallyCreated: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly checkIn: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly checkOut: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly altered: {
                            readonly type: "boolean";
                        };
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly authenticationRequiredData: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly lastAuthMsgSentDate: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                            };
                                            readonly authenticationUrl: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly paymentMethodStatus: {
                                        readonly type: "string";
                                    };
                                    readonly isAuthorizationHold: {
                                        readonly type: "boolean";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly refunds: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly authorizationHoldCaptures: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly attempts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly createdAt: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                                };
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique Id";
                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly error: {
                                                    readonly type: "string";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly charge: {
                                                            readonly type: "string";
                                                        };
                                                        readonly code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decline_code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly doc_url: {
                                                            readonly type: "string";
                                                        };
                                                        readonly message: {
                                                            readonly type: "string";
                                                        };
                                                        readonly payment_intent: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                    readonly description: "Unique Id";
                                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly amount: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_capturable: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_received: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly application: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly capture_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly charges: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly object: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly data: {
                                                                            readonly type: "array";
                                                                            readonly items: {
                                                                                readonly type: "object";
                                                                                readonly properties: {
                                                                                    readonly id: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly object: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly amount: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_captured: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_refunded: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly application: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly billing_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly address: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly city: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line1: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line2: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly postal_code: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly state: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly email: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly name: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly phone: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly calculated_statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly captured: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly created: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly currency: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly customer: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly description: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly disputed: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly failure_code: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly failure_message: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly livemode: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly metadata: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly accountId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly confirmationCode: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reservationId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly OTA: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly listingId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly outcome: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly network_status: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reason: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_level: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_score: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly seller_message: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly paid: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly payment_intent: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly card: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly brand: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly checks: {
                                                                                                        readonly type: "object";
                                                                                                        readonly properties: {
                                                                                                            readonly cvc_check: {
                                                                                                                readonly type: "string";
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly exp_month: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly exp_year: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly fingerprint: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly funding: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly last4: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly network: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly refunded: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly refunds: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly object: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly data: {
                                                                                                readonly type: "array";
                                                                                                readonly items: {};
                                                                                            };
                                                                                            readonly has_more: {
                                                                                                readonly type: "boolean";
                                                                                            };
                                                                                            readonly total_count: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly url: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly status: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly has_more: {
                                                                            readonly type: "boolean";
                                                                        };
                                                                        readonly total_count: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly url: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly client_secret: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly confirmation_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly accountId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly confirmationCode: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly reservationId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly OTA: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly listingId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly next_action: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly type: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly use_stripe_sdk: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly type: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly merchant: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_d_secure_2_source: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_name: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly server_transaction_id: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_method_url: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_optimizations: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_encryption: {
                                                                                    readonly type: "object";
                                                                                    readonly properties: {
                                                                                        readonly directory_server_id: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly algorithm: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly certificate: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly root_certificate_authorities: {
                                                                                            readonly type: "array";
                                                                                            readonly items: {};
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly payment_method_options: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly card: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly request_three_d_secure: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method_types: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                                readonly statement_descriptor: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly status: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly payment_method: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly billing_details: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly address: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly city: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly country: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line1: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line2: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly postal_code: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly state: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly email: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly name: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly phone: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly card: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly brand: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly checks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly cvc_check: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly exp_month: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly exp_year: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly fingerprint: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly funding: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly last4: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly networks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly available: {
                                                                                    readonly type: "array";
                                                                                    readonly items: {};
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly three_d_secure_usage: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly supported: {
                                                                                    readonly type: "boolean";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly statusCode: {
                                                            readonly type: "number";
                                                        };
                                                        readonly requestId: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly receiptTargets: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly shouldBePaidAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly guestId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly autoPaymentsPolicy: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly paymentProviderIds: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly netIncome: {
                            readonly type: "number";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly commissionTaxPercentage: {
                            readonly type: "number";
                        };
                        readonly commissionTax: {
                            readonly type: "number";
                        };
                        readonly commissionIncTax: {
                            readonly type: "number";
                        };
                        readonly ownerRevenueFormula: {
                            readonly type: "string";
                        };
                        readonly ownerRevenue: {
                            readonly type: "number";
                        };
                        readonly currencyConversionRateToAccount: {
                            readonly type: "number";
                        };
                        readonly isTouchedPayments: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly guestId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly mtl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly assigned: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
                readonly isReturningGuest: {
                    readonly type: "boolean";
                };
                readonly confirmedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly importedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly additionalFeesAtCreation: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly automationSources: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly isPercentage: {
                                readonly type: "boolean";
                            };
                            readonly isAutomated: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                            };
                            readonly targetFee: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly conversationId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetReservationsIdCustomFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetReservationsIdCustomFieldsFieldId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly examples: readonly ["63c6bc609e4384007c620a95"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Field ID";
                };
            };
            readonly required: readonly ["id", "field_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetRoomPhotosByPropertyId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the property";
                };
            };
            readonly required: readonly ["propertyId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly roomPhotos: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly examples: readonly ["5d9e9f4a6d5b2e0017b6d5b2"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["345774fe76e5da340bf915e3"];
                            };
                            readonly spaceId: {
                                readonly type: "string";
                                readonly examples: readonly ["545774fe76e5da340bf915e8"];
                            };
                            readonly photoId: {
                                readonly type: "string";
                                readonly examples: readonly ["145774fe76e5da340bf915e2"];
                            };
                            readonly photoUrl: {
                                readonly type: "string";
                                readonly examples: readonly ["https://image.com"];
                            };
                        };
                    };
                    readonly description: "An array containing a list of all property room photo mappings, including photo ID, space ID and photo URL.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Property not found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSavedReplies: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination limit, max: 100";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["0"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "How many results should be skipped to get to the current page";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["531968414930a7f09b075800"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to a specific listing";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["531968414930a7f09b075800"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to a specific account";
                };
                readonly returnDefault: {
                    readonly type: "boolean";
                    readonly examples: readonly ["true"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To get Guesty defaults SRs";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. See response schema to get list of fields";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Field to sort by. Prepend - for DESC.";
                };
                readonly q: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search query string. Searches in question and folder. Search is case-insensitive.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [2];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [50];
                };
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly question: {
                                readonly type: "string";
                                readonly examples: readonly ["TV"];
                            };
                            readonly answer: {
                                readonly type: "string";
                                readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
                            };
                            readonly applyWhenHasBooking: {
                                readonly type: "boolean";
                            };
                            readonly applyWhenNoBooking: {
                                readonly type: "boolean";
                            };
                            readonly isAbstract: {
                                readonly type: "boolean";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["user", "guest", "contact", "review"];
                                readonly description: "`user` `guest` `contact` `review`";
                            };
                            readonly language: {
                                readonly description: "Language of the saved reply.\n\n`en` `fr` `es` `it` `ru` `ja` `zh`";
                                readonly type: "string";
                                readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                                readonly examples: readonly ["en"];
                            };
                            readonly excludeListingIds: {
                                readonly description: "Exclude saved reply from the specific listings";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                            };
                            readonly listingsIds: {
                                readonly description: "Apply saved reply for the specific listings";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                            };
                            readonly folder: {
                                readonly type: "string";
                                readonly examples: readonly ["City"];
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly filters: {
                                readonly description: "Apply saved reply to listings which match the filters";
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly field: {
                                        readonly type: "string";
                                        readonly description: "Subject of the filter, e.g. listing.address.city";
                                    };
                                    readonly operator: {
                                        readonly type: "string";
                                        readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                                    };
                                    readonly value: {
                                        readonly type: "array";
                                        readonly description: "Values to filter by.";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden res"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSavedRepliesListingListingid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["531968414930a7f09b075800"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to a specific listing";
                };
            };
            readonly required: readonly ["listingId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination limit, max: 100";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["0"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "How many results should be skipped to get to the current page";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["531968414930a7f09b075800"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit results to a specific account";
                };
                readonly returnDefault: {
                    readonly type: "boolean";
                    readonly examples: readonly ["true"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To get Guesty defaults SRs";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. See response schema to get list of fields";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["createdAt"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Field to sort by. Prepend - for DESC.";
                };
                readonly q: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search query string. Searches in question and folder. Search is case-insensitive.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly question: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                };
                readonly answer: {
                    readonly type: "string";
                    readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
                };
                readonly applyWhenHasBooking: {
                    readonly type: "boolean";
                };
                readonly applyWhenNoBooking: {
                    readonly type: "boolean";
                };
                readonly isAbstract: {
                    readonly type: "boolean";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "guest", "contact", "review"];
                    readonly description: "`user` `guest` `contact` `review`";
                };
                readonly language: {
                    readonly description: "Language of the saved reply.\n\n`en` `fr` `es` `it` `ru` `ja` `zh`";
                    readonly type: "string";
                    readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                    readonly examples: readonly ["en"];
                };
                readonly excludeListingIds: {
                    readonly description: "Exclude saved reply from the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly listingsIds: {
                    readonly description: "Apply saved reply for the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly folder: {
                    readonly type: "string";
                    readonly examples: readonly ["City"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly filters: {
                    readonly description: "Apply saved reply to listings which match the filters";
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly field: {
                            readonly type: "string";
                            readonly description: "Subject of the filter, e.g. listing.address.city";
                        };
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                        };
                        readonly value: {
                            readonly type: "array";
                            readonly description: "Values to filter by.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden res"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSavedRepliesReplyid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly replyId: {
                    readonly type: "string";
                    readonly examples: readonly ["61643c7e8eb305002d90151f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved reply Id";
                };
            };
            readonly required: readonly ["replyId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["question answer folder"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. See response schema to get the list of fields.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly question: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                };
                readonly answer: {
                    readonly type: "string";
                    readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
                };
                readonly applyWhenHasBooking: {
                    readonly type: "boolean";
                };
                readonly applyWhenNoBooking: {
                    readonly type: "boolean";
                };
                readonly isAbstract: {
                    readonly type: "boolean";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "guest", "contact", "review"];
                    readonly description: "`user` `guest` `contact` `review`";
                };
                readonly language: {
                    readonly description: "Language of the saved reply.\n\n`en` `fr` `es` `it` `ru` `ja` `zh`";
                    readonly type: "string";
                    readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                    readonly examples: readonly ["en"];
                };
                readonly excludeListingIds: {
                    readonly description: "Exclude saved reply from the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly listingsIds: {
                    readonly description: "Apply saved reply for the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly folder: {
                    readonly type: "string";
                    readonly examples: readonly ["City"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly filters: {
                    readonly description: "Apply saved reply to listings which match the filters";
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly field: {
                            readonly type: "string";
                            readonly description: "Subject of the filter, e.g. listing.address.city";
                        };
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                        };
                        readonly value: {
                            readonly type: "array";
                            readonly description: "Values to filter by.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Canned response not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetStats: {
    readonly response: {
        readonly "200": {
            readonly required: readonly ["data", "limit", "skip", "total"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly required: readonly ["_id"];
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                            };
                            readonly accountName: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly isDefault: {
                                readonly type: "boolean";
                            };
                            readonly listingsCount: {
                                readonly type: "number";
                            };
                            readonly paymentMethodsCount: {
                                readonly type: "number";
                            };
                        };
                    };
                };
                readonly limit: {
                    readonly type: "number";
                };
                readonly skip: {
                    readonly type: "number";
                };
                readonly total: {
                    readonly type: "number";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSupportedAmenities: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "The name of the amenity";
                        readonly examples: readonly ["Elevator"];
                    };
                    readonly group: {
                        readonly type: "string";
                        readonly description: "The name of the amenity group that it belongs to";
                        readonly examples: readonly ["Accessibility"];
                    };
                    readonly channels: {
                        readonly type: "object";
                        readonly description: "An array of channels as key, and their values on the channels";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetTasksOpenApiTaskid: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly taskId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Task id";
                };
            };
            readonly required: readonly ["taskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the task.";
                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                };
                readonly shortTaskId: {
                    readonly type: "object";
                    readonly description: "A short task ID for quick reference.";
                    readonly properties: {
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assigneeGroup: {
                    readonly type: "array";
                    readonly description: "The team the assignees is part of. This is a tag";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["cleaners"];
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Task types help you with better identification and reporting.";
                };
                readonly checklistFinished: {
                    readonly type: "array";
                    readonly description: "A list of finished action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklist: {
                    readonly type: "array";
                    readonly description: "A list of action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklistAggregated: {
                    readonly type: "array";
                    readonly description: "A list of action items.";
                    readonly items: {};
                };
                readonly tags: {
                    readonly type: "array";
                    readonly description: "List of tags the task is related to";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the task, being one of the following enumerators: pending,confirmed, in progress,completed,canceled.";
                    readonly examples: readonly ["confirmed"];
                };
                readonly comment: {
                    readonly type: "object";
                    readonly description: "Notes added to the task by the assignee and supervisor. Contains the text, user ID and date the comment was published.";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the comment.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly text: {
                            readonly type: "string";
                            readonly description: "The comment text.";
                        };
                        readonly by: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the user who made the comment.";
                        };
                        readonly date: {
                            readonly type: "string";
                            readonly description: "The date and time the comment was posted.";
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The ID of the account the task is attached to";
                    readonly examples: readonly ["Q5fb67280e396Q77002e6c2683"];
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly description: "The ID of the user who created the task.";
                    readonly examples: readonly ["Q5fb67280e39Q677002e6c268c"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "The name you call the task";
                    readonly examples: readonly ["Post Stay Clean"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Add any additional information needed to define the task.";
                    readonly examples: readonly ["A regular clean between guest stays."];
                };
                readonly priority: {
                    readonly type: "string";
                    readonly description: "Assign the level of importance to the task in enumerators - High,Medium,Low\n\n`medium` `high` `low`";
                    readonly enum: readonly ["medium", "high", "low"];
                    readonly examples: readonly ["high"];
                };
                readonly assigneeId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the person assigned to the task.";
                };
                readonly supervisorId: {
                    readonly type: "string";
                    readonly description: "The uniqueID of the person assigned to supervise the task.";
                    readonly examples: readonly ["64a6b8cfa08e0446a6f4b840"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "";
                    readonly examples: readonly ["Australia/Sydney"];
                };
                readonly afterEffects: {
                    readonly type: "object";
                    readonly description: "Actions to be triggered upon the completion of the task.";
                    readonly properties: {
                        readonly action: {
                            readonly type: "string";
                            readonly description: "The action to be performed.";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the action.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly payload: {
                            readonly type: "object";
                            readonly description: "The information or data to be included within the action.";
                            readonly properties: {
                                readonly target: {
                                    readonly type: "string";
                                    readonly description: "The intended recipient.\n\n`user` `contact` `guest` `supervisor`";
                                    readonly enum: readonly ["user", "contact", "guest", "supervisor"];
                                };
                                readonly targetId: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the target.";
                                };
                                readonly message: {
                                    readonly type: "object";
                                    readonly description: "The message object.";
                                    readonly properties: {
                                        readonly subject: {
                                            readonly type: "string";
                                            readonly description: "States topic of the message.";
                                        };
                                        readonly body: {
                                            readonly type: "string";
                                            readonly description: "Contains the message string.";
                                        };
                                        readonly attachments: {
                                            readonly type: "object";
                                            readonly description: "Contains and describes an attached file.";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier of the attachment object.";
                                                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "URL location of the attached file.";
                                                };
                                                readonly title: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the file attachment.";
                                                    readonly examples: readonly ["Post Stay Clean"];
                                                };
                                                readonly mimetype: {
                                                    readonly type: "string";
                                                    readonly description: "State the kind of file attached.";
                                                };
                                                readonly size: {
                                                    readonly type: "string";
                                                    readonly description: "The storage size of the attachment.";
                                                };
                                                readonly client: {
                                                    readonly type: "string";
                                                    readonly description: "";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly attachments: {
                    readonly type: "object";
                    readonly description: "The place to attach external files needed for the task.";
                    readonly properties: {
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached.";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment.";
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                        };
                    };
                };
                readonly timing: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["none", "specific", "flexible", "legacy"];
                            readonly examples: readonly ["specific"];
                            readonly description: "`none` `specific` `flexible` `legacy`";
                        };
                        readonly startTime: {
                            readonly type: "string";
                            readonly description: "The date and time the task must begin (fixed task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                            readonly examples: readonly ["2024-01-10T21:00:00.000Z"];
                        };
                        readonly canStartAfter: {
                            readonly type: "string";
                            readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                        readonly mustFinishBefore: {
                            readonly type: "string";
                            readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                    };
                };
                readonly apply: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["listing", "reservation", "owner-reservation"];
                            readonly examples: readonly ["reservation"];
                            readonly description: "`listing` `reservation` `owner-reservation`";
                        };
                        readonly listingId: {
                            readonly type: "string";
                            readonly description: "The object ID of the listing the task is attached to. Only when reservationId don't exist";
                            readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                        };
                        readonly reservationId: {
                            readonly type: "string";
                            readonly description: "The reservation ID of the listing the task is attached to. Only when listingId don't exist";
                            readonly examples: readonly ["9fba3d97d8e62500Gd7f6d842"];
                        };
                        readonly ownerReservationId: {
                            readonly type: "string";
                            readonly description: "The owner reservation ID of the listing the task is attached to. Only when owner reservation ";
                        };
                    };
                };
                readonly plannedDuration: {
                    readonly type: "number";
                    readonly description: "The amount of time budgeted for the task (hours).";
                    readonly examples: readonly [0.08];
                };
                readonly pendingExpenses: {
                    readonly description: "The list of expenses that will be created upon task completion";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Not available for Pending expenses";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly postedExpenses: {
                    readonly type: "array";
                    readonly description: "The list of recognized expenses";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Expense accounting data";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                    readonly failureCode: {
                                        readonly type: "number";
                                        readonly description: "Charge creation Error code";
                                        readonly examples: readonly [10001];
                                    };
                                    readonly requestId: {
                                        readonly type: "string";
                                        readonly description: "Request id for debugging";
                                        readonly examples: readonly ["456dd47bdb3862d2"];
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetTasksOpenApiTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly filters: {
                    readonly type: "string";
                    readonly examples: readonly ["{'status':{'@nin':['completed']},'scheduledFor':{'@today':true}}"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Object of filters to query by";
                };
                readonly columns: {
                    readonly type: "string";
                    readonly examples: readonly ["status taskTitle listing reservation scheduledFor endTime canStartAfter mustFinishBefore assignee id"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of columns, separated by space";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly ["25"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Indication of number of results to skip";
                };
            };
            readonly required: readonly ["columns"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly status: {
                        readonly type: "object";
                        readonly description: "The status of the task.";
                        readonly properties: {
                            readonly children: {
                                readonly type: "string";
                                readonly enum: readonly ["pending", "confirmed", "in progress", "completed", "canceled"];
                                readonly description: "`pending` `confirmed` `in progress` `completed` `canceled`";
                            };
                        };
                    };
                    readonly taskTitle: {
                        readonly type: "object";
                        readonly description: "The name of the task.";
                        readonly properties: {
                            readonly children: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Task types help you with better identification and reporting.";
                        readonly properties: {
                            readonly children: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly shortTaskId: {
                        readonly type: "object";
                        readonly description: "A short task ID for quick reference.";
                        readonly properties: {
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly listing: {
                        readonly type: "object";
                        readonly description: "The property to which the task is assigned.";
                        readonly properties: {
                            readonly listingId: {
                                readonly type: "string";
                            };
                            readonly img: {
                                readonly type: "string";
                            };
                            readonly title: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly reservation: {
                        readonly type: "object";
                        readonly description: "The reservation to which the task is assigned.";
                        readonly additionalProperties: true;
                    };
                    readonly scheduledFor: {
                        readonly type: "object";
                        readonly properties: {
                            readonly startTime: {
                                readonly type: "string";
                                readonly description: "The date and time the task must begin.";
                            };
                            readonly canStartAfter: {
                                readonly type: "string";
                                readonly description: "The date and the time after which the task can begin.";
                            };
                            readonly mustFinishBefore: {
                                readonly type: "string";
                                readonly description: "The date and time before which the task must be completed.";
                            };
                        };
                    };
                    readonly endTime: {
                        readonly type: "object";
                        readonly format: "date-time";
                        readonly description: "The date and time the task was completed.";
                        readonly properties: {
                            readonly date: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly canStartAfter: {
                        readonly type: "object";
                        readonly format: "date-time";
                        readonly description: "The date and the time after which the task can begin.";
                        readonly properties: {
                            readonly date: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly mustFinishBefore: {
                        readonly type: "object";
                        readonly format: "date-time";
                        readonly description: "The date and time before which the task must be completed.";
                        readonly properties: {
                            readonly date: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly assignee: {
                        readonly type: "object";
                        readonly properties: {
                            readonly taskId: {
                                readonly type: "string";
                                readonly description: "The unique identifier of the task.";
                            };
                            readonly assigneeId: {
                                readonly type: "string";
                                readonly description: "The unique identifier of the person assigned to the task.";
                            };
                            readonly picture: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly id: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetViews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly section: {
                    readonly type: "string";
                    readonly examples: readonly ["listings"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "One of listings, reservations";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly default: any;
                    readonly examples: readonly ["\"title\""];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. When null retrieves all object.";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 25;
                    readonly examples: readonly [25];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly default: 0;
                    readonly examples: readonly [0];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination";
                };
            };
            readonly required: readonly ["section"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "Unique id";
                    };
                    readonly accountId: {
                        readonly type: "string";
                        readonly description: "Id of the user owning this view";
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "Title for the view";
                    };
                    readonly filters: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Subject of the filter";
                                };
                                readonly operator: {
                                    readonly type: "string";
                                    readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly description: "Value to filter by.";
                                };
                                readonly context: {
                                    readonly type: "string";
                                    readonly default: any;
                                    readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                                };
                            };
                            readonly required: readonly ["field", "operator", "value"];
                        };
                    };
                    readonly fields: {
                        readonly type: "string";
                        readonly description: "Selection of fields, separated by space";
                    };
                    readonly sort: {
                        readonly type: "string";
                        readonly description: "ascending sort , use - to descending sort";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                    };
                    readonly scheduledEmails: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly days: {
                                    readonly type: "array";
                                    readonly description: "Array of numbers 0-6, number per day";
                                    readonly examples: readonly ["4 (send on Thursday)"];
                                    readonly items: {};
                                };
                                readonly recipient: {
                                    readonly type: "string";
                                    readonly description: "Emails separated by comma";
                                };
                                readonly hour: {
                                    readonly type: "number";
                                    readonly description: "when the report should be sent";
                                };
                            };
                            readonly required: readonly ["hour"];
                        };
                    };
                    readonly shares: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly contactId: {
                                    readonly type: "string";
                                    readonly description: "Required Contact ID to share with";
                                    readonly examples: readonly ["5926bdfb1bfe871000d0a745"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetViewsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "View ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["title address"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Id of the user owning this view";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title for the view";
                };
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                            };
                            readonly value: {
                                readonly type: "string";
                                readonly description: "Value to filter by.";
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly default: any;
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                            };
                        };
                        readonly required: readonly ["field", "operator", "value"];
                    };
                };
                readonly fields: {
                    readonly type: "string";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly description: "ascending sort , use - to descending sort";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly type: "string";
                };
                readonly scheduledEmails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly days: {
                                readonly type: "array";
                                readonly description: "Array of numbers 0-6, number per day";
                                readonly examples: readonly ["4 (send on Thursday)"];
                                readonly items: {};
                            };
                            readonly recipient: {
                                readonly type: "string";
                                readonly description: "Emails separated by comma";
                            };
                            readonly hour: {
                                readonly type: "number";
                                readonly description: "when the report should be sent";
                            };
                        };
                        readonly required: readonly ["hour"];
                    };
                };
                readonly shares: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly contactId: {
                                readonly type: "string";
                                readonly description: "Required Contact ID to share with";
                                readonly examples: readonly ["5926bdfb1bfe871000d0a745"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetWebhooks: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly accountId: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly examples: readonly ["https://www.hookurl.com"];
                    };
                    readonly events: {
                        readonly type: "array";
                        readonly description: "add list of event to register for the provided url\n\n`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                        readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                            readonly description: "`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetWebhooksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook unique Id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly examples: readonly ["https://www.hookurl.com"];
                };
                readonly events: {
                    readonly type: "array";
                    readonly description: "add list of event to register for the provided url\n\n`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                    readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                        readonly description: "`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GroupReservationsOpenApiControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly quoteAndRatePlanIds: {
                readonly description: "An array of objects containing quote IDs and rate plan IDs";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly quoteId: {
                            readonly type: "string";
                            readonly description: "The quote ID";
                            readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                        };
                        readonly ratePlanId: {
                            readonly type: "string";
                            readonly description: "The rate plan ID";
                            readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                        };
                        readonly status: {
                            readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                            readonly type: "string";
                            readonly description: "Status for an individual reservation, if not defined we will use the status of the group";
                            readonly examples: readonly ["reserved"];
                        };
                        readonly booker: {
                            readonly description: "The booker for specific reservation";
                            readonly type: "object";
                            readonly required: readonly ["_id", "fullName"];
                            readonly properties: {
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "The booker ID";
                                    readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                                };
                                readonly fullName: {
                                    readonly type: "string";
                                    readonly description: "The booker's full name";
                                    readonly examples: readonly ["Full Name"];
                                };
                            };
                        };
                    };
                    readonly required: readonly ["quoteId", "ratePlanId"];
                };
            };
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["guesty-company-trip"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Source of reservation";
                readonly examples: readonly ["Manual"];
            };
            readonly status: {
                readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                readonly type: "string";
                readonly examples: readonly ["reserved"];
            };
            readonly reservedUntil: {
                readonly enum: readonly [-1, 0.5, 0.25, 0.17, 12, 24, 36, 48, 72];
                readonly type: "number";
                readonly description: "Indicates for how long a reservation is valid after creation (in hours)";
                readonly examples: readonly [36];
            };
            readonly note: {
                readonly type: "string";
                readonly description: "The reservation notes";
            };
            readonly groupBooker: {
                readonly description: "The default booker for group reservation";
                readonly type: "object";
                readonly required: readonly ["_id", "fullName"];
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "The booker ID";
                        readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                    };
                    readonly fullName: {
                        readonly type: "string";
                        readonly description: "The booker's full name";
                        readonly examples: readonly ["Full Name"];
                    };
                };
            };
            readonly coupons: {
                readonly description: "List of coupons";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["VeryCoolCoupon", "VeryCoolCoupon2"];
            };
            readonly chargeMethod: {
                readonly enum: readonly ["PER_GROUP", "PER_RESERVATION"];
                readonly type: "string";
                readonly default: "PER_GROUP";
                readonly examples: readonly ["PER_RESERVATION"];
                readonly description: "Default: PER_GROUP";
            };
        };
        readonly required: readonly ["quoteAndRatePlanIds", "name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "object";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly additionalProperties: true;
                };
                readonly accountId: {
                    readonly type: "object";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly additionalProperties: true;
                };
                readonly platform: {
                    readonly type: "string";
                    readonly examples: readonly ["direct"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly examples: readonly ["guesty-company-trip"];
                };
                readonly source: {
                    readonly type: "string";
                    readonly examples: readonly ["manual"];
                };
                readonly bookerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly note: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "platform", "name", "source", "createdAt", "note", "confirmationCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GroupReservationsOpenApiControllerGetGroupReservation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly groupId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the group reservation to fetch";
                };
            };
            readonly required: readonly ["groupId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly groupReservation: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subReservations: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["groupReservation", "subReservations"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GuestAppOpenApiControllerGetCifSummaryDetails: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation id";
                };
                readonly moduleType: {
                    readonly enum: readonly ["check_in"];
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Module type";
                };
            };
            readonly required: readonly ["reservationId", "moduleType"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly url: {
                    readonly type: "string";
                    readonly description: "Url to fetch check-in form summary PDF. Valid 1 hour";
                };
                readonly fileName: {
                    readonly type: "string";
                    readonly description: "Name of check-in form summary PDF";
                    readonly examples: readonly ["checkinform_My Guest App_James_Doe.pdf"];
                };
            };
            readonly required: readonly ["url", "fileName"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GuestsOpenApiControllerCreateGuest: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly firstName: {
                readonly type: "string";
            };
            readonly lastName: {
                readonly type: "string";
            };
            readonly hometown: {
                readonly type: "string";
            };
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly street: {
                        readonly type: "string";
                        readonly description: "The street address, including the house number and street name. It can also be a PO Box";
                        readonly examples: readonly ["1000 5th Ave"];
                    };
                    readonly zipCode: {
                        readonly type: "string";
                        readonly description: "The postal code or ZIP code of the address";
                        readonly examples: readonly ["10028"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "The state or province name";
                        readonly examples: readonly ["New York"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "The name of the city/town/village";
                        readonly examples: readonly ["New York"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "The [full name](https://www.iban.com/country-codes) of the country";
                        readonly examples: readonly ["United States"];
                    };
                    readonly countryCode: {
                        readonly type: "string";
                        readonly description: "The two-letter [ISO 3166 Alpha-2](https://www.iban.com/country-codes) country code";
                        readonly examples: readonly ["US"];
                    };
                };
            };
            readonly picture: {
                readonly type: "object";
                readonly description: "A link to guest’s picture in different sizes";
                readonly additionalProperties: true;
            };
            readonly email: {
                readonly type: "string";
                readonly description: "The main contact email of the guest";
            };
            readonly emails: {
                readonly description: "List of additional emails of the guest";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "The main contact phone number";
            };
            readonly phones: {
                readonly description: "List of additional phone numbers of the guest";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Attention notes about the guest, describing important pieces of information about the guest, to review for all reservations (e.g. “Requires accessibility equipment”). Displayed as “Attention notes” in the user interface.";
            };
            readonly contactType: {
                readonly enum: readonly ["guest", "owner"];
                readonly type: "string";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["vip", "friendsAndFamily", "staff", "management", "blocklisted", "loyaltyProgram"];
                };
                readonly description: "Tags for describing the guest at a glance + show the enum for the field to show the allowed options";
            };
            readonly goodToKnowNotes: {
                readonly type: "string";
                readonly description: "“Good to know” notes about the guest. Notes to help capture facts about the guest that will help the team to personalize the guest’s stays (e.g. “Big football fan”)";
            };
            readonly preferredLanguage: {
                readonly enum: readonly ["en", "es", "fr", "ma", "aa", "ab", "ae", "af", "ak", "am", "an", "ar", "as", "av", "ay", "az", "ba", "be", "bg", "bh", "bi", "bm", "bn", "bo", "br", "bs", "ca", "ce", "ch", "co", "cr", "cs", "cu", "cv", "cy", "da", "de", "dv", "dz", "ee", "el", "eo", "et", "eu", "fa", "ff", "fi", "fj", "fo", "fy", "ga", "gd", "gl", "gn", "gu", "gv", "ha", "he", "hi", "ho", "hr", "ht", "hu", "hy", "hz", "ia", "id", "ie", "ig", "ii", "ik", "io", "is", "it", "iu", "ja", "jv", "ka", "kg", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kr", "ks", "ku", "kv", "kw", "ky", "la", "lb", "lg", "li", "ln", "lo", "lt", "lu", "lv", "mg", "mh", "mi", "mk", "ml", "mn", "mr", "ms", "mt", "my", "na", "nb", "nd", "ne", "ng", "nl", "nn", "no", "nr", "nv", "ny", "oc", "oj", "om", "or", "os", "pa", "pi", "pl", "ps", "pt", "qu", "rm", "rn", "ro", "ru", "rw", "sa", "sc", "sd", "se", "sg", "si", "sk", "sl", "sm", "sn", "so", "sq", "sr", "ss", "st", "su", "sv", "sw", "ta", "te", "tg", "th", "ti", "tk", "tl", "tn", "to", "tr", "ts", "tt", "tw", "ty", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "wo", "xh", "yi", "yo", "za", "zh", "zu"];
                readonly type: "string";
            };
            readonly birthday: {
                readonly format: "date-time";
                readonly type: "string";
            };
            readonly gender: {
                readonly enum: readonly ["male", "female", "other"];
                readonly type: "string";
            };
            readonly maritalStatus: {
                readonly enum: readonly ["single", "married", "widowed", "separated", "divorced"];
                readonly type: "string";
            };
            readonly dietaryPreferences: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly allergies: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly interests: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly pronouns: {
                readonly enum: readonly ["he/him/his", "she/her/hers", "they/them/their", "xe/xem/xyr"];
                readonly type: "string";
            };
            readonly kids: {
                readonly type: "number";
                readonly minimum: 0;
            };
            readonly passportNumber: {
                readonly type: "string";
                readonly maxLength: 50;
            };
            readonly identityNumber: {
                readonly type: "string";
                readonly maxLength: 50;
                readonly description: "Identity Card Number";
            };
            readonly nationality: {
                readonly enum: readonly ["af", "ax", "al", "dz", "as", "ad", "ao", "ai", "aq", "ag", "ar", "am", "aw", "au", "at", "az", "bs", "bh", "bd", "bb", "by", "be", "bz", "bj", "bm", "bt", "bo", "bq", "ba", "bw", "bv", "br", "io", "bn", "bg", "bf", "bi", "kh", "cm", "ca", "cv", "ky", "cf", "td", "cl", "cn", "cx", "cc", "co", "km", "cg", "cd", "ck", "cr", "ci", "hr", "cu", "cw", "cy", "cz", "dk", "dj", "dm", "do", "ec", "eg", "sv", "gq", "er", "ee", "et", "fk", "fo", "fj", "fi", "fr", "gf", "pf", "tf", "ga", "gm", "ge", "de", "gh", "gi", "gr", "gl", "gd", "gp", "gu", "gt", "gg", "gn", "gw", "gy", "ht", "hm", "va", "hn", "hk", "hu", "is", "in", "id", "ir", "iq", "ie", "im", "il", "it", "jm", "jp", "je", "jo", "kz", "ke", "ki", "kp", "kr", "xk", "kw", "kg", "la", "lv", "lb", "ls", "lr", "ly", "li", "lt", "lu", "mo", "mk", "mg", "mw", "my", "mv", "ml", "mt", "mh", "mq", "mr", "mu", "yt", "mx", "fm", "md", "mc", "mn", "me", "ms", "ma", "mz", "mm", "na", "nr", "np", "nl", "an", "nc", "nz", "ni", "ne", "ng", "nu", "nf", "mp", "no", "om", "pk", "pw", "ps", "pa", "pg", "py", "pe", "ph", "pn", "pl", "pt", "pr", "qa", "re", "ro", "ru", "rw", "bl", "sh", "kn", "lc", "mf", "pm", "vc", "ws", "sm", "st", "sa", "sn", "rs", "cs", "sc", "sl", "sg", "sx", "sk", "si", "sb", "so", "za", "gs", "ss", "es", "lk", "sd", "sr", "sj", "sz", "se", "ch", "sy", "tw", "tj", "tz", "th", "tl", "tg", "tk", "to", "tt", "tn", "tr", "tm", "tc", "tv", "ug", "ua", "ae", "gb", "us", "um", "uy", "uz", "vu", "ve", "vn", "vg", "vi", "wf", "eh", "ye", "zm", "zw"];
                readonly type: "string";
            };
            readonly otaLinks: {
                readonly description: "A link to the guest’s profile on an OTA";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly enum: readonly ["airbnb"];
                            readonly type: "string";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly enum: readonly ["https://www.airbnb.com"];
                            readonly description: "The url must include “https://” prefix";
                        };
                    };
                };
            };
        };
        readonly required: readonly ["firstName", "lastName"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e17287629e111001f7d3f4d"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Sanchez"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick Sanchez"];
                };
                readonly hometown: {
                    readonly type: "string";
                    readonly examples: readonly ["New York"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2022-08-12T16:00:00.000+03:00"];
                };
                readonly address: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "A link to guest’s picture in different sizes";
                    readonly additionalProperties: true;
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The main contact email of the guest";
                    readonly examples: readonly ["email@email.com"];
                };
                readonly emails: {
                    readonly description: "List of additional emails of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["email@email.com", "email2@email.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The main contact phone number";
                    readonly examples: readonly ["972234567454"];
                };
                readonly phones: {
                    readonly description: "List of additional phone numbers of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["972234567454", "972234567890"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Attention notes about the guest, describing important pieces of information about the guest, to review for all reservations (e.g. “Requires accessibility equipment”)";
                    readonly examples: readonly ["This guest is rich"];
                };
                readonly tags: {
                    readonly description: "Tags for describing the guest at a glance + show the enum for the field to show the allowed options";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["blocklisted", "VIP"];
                };
                readonly goodToKnowNotes: {
                    readonly type: "string";
                    readonly description: "“Good to know” notes about the guest. Notes to help capture facts about the guest that will help the team to personalize the guest’s stays (e.g. “Big football fan”)";
                    readonly examples: readonly ["This guest is alleric to peanuts"];
                };
                readonly preferredLanguage: {
                    readonly type: "string";
                    readonly examples: readonly ["en", "es", "fr"];
                };
                readonly birthday: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly maritalStatus: {
                    readonly type: "string";
                    readonly examples: readonly ["single"];
                };
                readonly dietaryPreferences: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["vegan", "veggies"];
                };
                readonly allergies: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly interests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["sports"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly examples: readonly ["he/him/his"];
                };
                readonly otaLinks: {
                    readonly description: "A link to the guest’s profile on an OTA";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly enum: readonly ["airbnb"];
                                readonly type: "string";
                                readonly description: "`airbnb`";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly enum: readonly ["https://www.airbnb.com"];
                                readonly description: "The url must include “https://” prefix\n\n`https://www.airbnb.com`";
                            };
                        };
                    };
                };
                readonly kids: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly examples: readonly [3];
                };
                readonly passportNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["23424353"];
                };
                readonly identityNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["324325121"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly examples: readonly ["il"];
                };
                readonly contactType: {
                    readonly type: "string";
                    readonly examples: readonly ["guest"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly rentalsUnited: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly homeAway: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly policy: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly returningGuest: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["_id", "firstName", "lastName", "returningGuest"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GuestsOpenApiControllerGetGuest: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly guestId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guest id";
                };
            };
            readonly required: readonly ["guestId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Fields";
                };
            };
            readonly required: readonly ["fields"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e17287629e111001f7d3f4d"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Sanchez"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick Sanchez"];
                };
                readonly hometown: {
                    readonly type: "string";
                    readonly examples: readonly ["New York"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2022-08-12T16:00:00.000+03:00"];
                };
                readonly address: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "A link to guest’s picture in different sizes";
                    readonly additionalProperties: true;
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The main contact email of the guest";
                    readonly examples: readonly ["email@email.com"];
                };
                readonly emails: {
                    readonly description: "List of additional emails of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["email@email.com", "email2@email.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The main contact phone number";
                    readonly examples: readonly ["972234567454"];
                };
                readonly phones: {
                    readonly description: "List of additional phone numbers of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["972234567454", "972234567890"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Attention notes about the guest, describing important pieces of information about the guest, to review for all reservations (e.g. “Requires accessibility equipment”)";
                    readonly examples: readonly ["This guest is rich"];
                };
                readonly tags: {
                    readonly description: "Tags for describing the guest at a glance + show the enum for the field to show the allowed options";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["blocklisted", "VIP"];
                };
                readonly goodToKnowNotes: {
                    readonly type: "string";
                    readonly description: "“Good to know” notes about the guest. Notes to help capture facts about the guest that will help the team to personalize the guest’s stays (e.g. “Big football fan”)";
                    readonly examples: readonly ["This guest is alleric to peanuts"];
                };
                readonly preferredLanguage: {
                    readonly type: "string";
                    readonly examples: readonly ["en", "es", "fr"];
                };
                readonly birthday: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly maritalStatus: {
                    readonly type: "string";
                    readonly examples: readonly ["single"];
                };
                readonly dietaryPreferences: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["vegan", "veggies"];
                };
                readonly allergies: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly interests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["sports"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly examples: readonly ["he/him/his"];
                };
                readonly otaLinks: {
                    readonly description: "A link to the guest’s profile on an OTA";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly enum: readonly ["airbnb"];
                                readonly type: "string";
                                readonly description: "`airbnb`";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly enum: readonly ["https://www.airbnb.com"];
                                readonly description: "The url must include “https://” prefix\n\n`https://www.airbnb.com`";
                            };
                        };
                    };
                };
                readonly kids: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly examples: readonly [3];
                };
                readonly passportNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["23424353"];
                };
                readonly identityNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["324325121"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly examples: readonly ["il"];
                };
                readonly contactType: {
                    readonly type: "string";
                    readonly examples: readonly ["guest"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly rentalsUnited: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly homeAway: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly policy: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly returningGuest: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["_id", "firstName", "lastName", "returningGuest"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GuestsOpenApiControllerGetGuestsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly columns: {
                    readonly type: "string";
                    readonly examples: readonly ["fullName guestEmail guestPhone address id"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of columns, separated by space";
                };
                readonly filters: {
                    readonly type: "string";
                    readonly examples: readonly ["{\"allergies\":{\"@in\":[\"feather\"]}}"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Object of filters to query by";
                };
                readonly limit: {
                    readonly minimum: 0;
                    readonly default: 25;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit guests results";
                };
                readonly skip: {
                    readonly minimum: 0;
                    readonly default: 0;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination skip";
                };
            };
            readonly required: readonly ["columns"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly results: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total: {
                    readonly type: "number";
                    readonly minimum: 0;
                };
            };
            readonly required: readonly ["results", "total"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GuestsOpenApiControllerUpdateGuest: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly firstName: {
                readonly type: "string";
            };
            readonly lastName: {
                readonly type: "string";
            };
            readonly hometown: {
                readonly type: "string";
            };
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly street: {
                        readonly type: "string";
                        readonly description: "The street address, including the house number and street name. It can also be a PO Box";
                        readonly examples: readonly ["1000 5th Ave"];
                    };
                    readonly zipCode: {
                        readonly type: "string";
                        readonly description: "The postal code or ZIP code of the address";
                        readonly examples: readonly ["10028"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "The state or province name";
                        readonly examples: readonly ["New York"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "The name of the city/town/village";
                        readonly examples: readonly ["New York"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "The [full name](https://www.iban.com/country-codes) of the country";
                        readonly examples: readonly ["United States"];
                    };
                    readonly countryCode: {
                        readonly type: "string";
                        readonly description: "The two-letter [ISO 3166 Alpha-2](https://www.iban.com/country-codes) country code";
                        readonly examples: readonly ["US"];
                    };
                };
            };
            readonly picture: {
                readonly type: "object";
                readonly description: "A link to guest’s picture in different sizes";
                readonly additionalProperties: true;
            };
            readonly email: {
                readonly type: "string";
                readonly description: "The main contact email of the guest";
            };
            readonly emails: {
                readonly description: "List of additional emails of the guest";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "The main contact phone number";
            };
            readonly phones: {
                readonly description: "List of additional phone numbers of the guest";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Attention notes about the guest, describing important pieces of information about the guest, to review for all reservations (e.g. “Requires accessibility equipment”). Displayed as “Attention notes” in the user interface.";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["vip", "friendsAndFamily", "staff", "management", "blocklisted", "loyaltyProgram"];
                };
                readonly description: "Tags for describing the guest at a glance + show the enum for the field to show the allowed options";
            };
            readonly goodToKnowNotes: {
                readonly type: "string";
                readonly description: "“Good to know” notes about the guest. Notes to help capture facts about the guest that will help the team to personalize the guest’s stays (e.g. “Big football fan”)";
            };
            readonly preferredLanguage: {
                readonly enum: readonly ["en", "es", "fr", "ma", "aa", "ab", "ae", "af", "ak", "am", "an", "ar", "as", "av", "ay", "az", "ba", "be", "bg", "bh", "bi", "bm", "bn", "bo", "br", "bs", "ca", "ce", "ch", "co", "cr", "cs", "cu", "cv", "cy", "da", "de", "dv", "dz", "ee", "el", "eo", "et", "eu", "fa", "ff", "fi", "fj", "fo", "fy", "ga", "gd", "gl", "gn", "gu", "gv", "ha", "he", "hi", "ho", "hr", "ht", "hu", "hy", "hz", "ia", "id", "ie", "ig", "ii", "ik", "io", "is", "it", "iu", "ja", "jv", "ka", "kg", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kr", "ks", "ku", "kv", "kw", "ky", "la", "lb", "lg", "li", "ln", "lo", "lt", "lu", "lv", "mg", "mh", "mi", "mk", "ml", "mn", "mr", "ms", "mt", "my", "na", "nb", "nd", "ne", "ng", "nl", "nn", "no", "nr", "nv", "ny", "oc", "oj", "om", "or", "os", "pa", "pi", "pl", "ps", "pt", "qu", "rm", "rn", "ro", "ru", "rw", "sa", "sc", "sd", "se", "sg", "si", "sk", "sl", "sm", "sn", "so", "sq", "sr", "ss", "st", "su", "sv", "sw", "ta", "te", "tg", "th", "ti", "tk", "tl", "tn", "to", "tr", "ts", "tt", "tw", "ty", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "wo", "xh", "yi", "yo", "za", "zh", "zu"];
                readonly type: "string";
            };
            readonly birthday: {
                readonly format: "date-time";
                readonly type: "string";
            };
            readonly gender: {
                readonly enum: readonly ["male", "female", "other"];
                readonly type: "string";
            };
            readonly maritalStatus: {
                readonly enum: readonly ["single", "married", "widowed", "separated", "divorced"];
                readonly type: "string";
            };
            readonly dietaryPreferences: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly allergies: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly interests: {
                readonly description: "You can pick one of the predefined options, or create a new one for your account";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly pronouns: {
                readonly enum: readonly ["he/him/his", "she/her/hers", "they/them/their", "xe/xem/xyr"];
                readonly type: "string";
            };
            readonly kids: {
                readonly type: "number";
                readonly minimum: 0;
            };
            readonly passportNumber: {
                readonly type: "string";
                readonly maxLength: 50;
            };
            readonly identityNumber: {
                readonly type: "string";
                readonly maxLength: 50;
                readonly description: "Identity Card Number";
            };
            readonly nationality: {
                readonly enum: readonly ["af", "ax", "al", "dz", "as", "ad", "ao", "ai", "aq", "ag", "ar", "am", "aw", "au", "at", "az", "bs", "bh", "bd", "bb", "by", "be", "bz", "bj", "bm", "bt", "bo", "bq", "ba", "bw", "bv", "br", "io", "bn", "bg", "bf", "bi", "kh", "cm", "ca", "cv", "ky", "cf", "td", "cl", "cn", "cx", "cc", "co", "km", "cg", "cd", "ck", "cr", "ci", "hr", "cu", "cw", "cy", "cz", "dk", "dj", "dm", "do", "ec", "eg", "sv", "gq", "er", "ee", "et", "fk", "fo", "fj", "fi", "fr", "gf", "pf", "tf", "ga", "gm", "ge", "de", "gh", "gi", "gr", "gl", "gd", "gp", "gu", "gt", "gg", "gn", "gw", "gy", "ht", "hm", "va", "hn", "hk", "hu", "is", "in", "id", "ir", "iq", "ie", "im", "il", "it", "jm", "jp", "je", "jo", "kz", "ke", "ki", "kp", "kr", "xk", "kw", "kg", "la", "lv", "lb", "ls", "lr", "ly", "li", "lt", "lu", "mo", "mk", "mg", "mw", "my", "mv", "ml", "mt", "mh", "mq", "mr", "mu", "yt", "mx", "fm", "md", "mc", "mn", "me", "ms", "ma", "mz", "mm", "na", "nr", "np", "nl", "an", "nc", "nz", "ni", "ne", "ng", "nu", "nf", "mp", "no", "om", "pk", "pw", "ps", "pa", "pg", "py", "pe", "ph", "pn", "pl", "pt", "pr", "qa", "re", "ro", "ru", "rw", "bl", "sh", "kn", "lc", "mf", "pm", "vc", "ws", "sm", "st", "sa", "sn", "rs", "cs", "sc", "sl", "sg", "sx", "sk", "si", "sb", "so", "za", "gs", "ss", "es", "lk", "sd", "sr", "sj", "sz", "se", "ch", "sy", "tw", "tj", "tz", "th", "tl", "tg", "tk", "to", "tt", "tn", "tr", "tm", "tc", "tv", "ug", "ua", "ae", "gb", "us", "um", "uy", "uz", "vu", "ve", "vn", "vg", "vi", "wf", "eh", "ye", "zm", "zw"];
                readonly type: "string";
            };
            readonly otaLinks: {
                readonly description: "A link to the guest’s profile on an OTA";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly enum: readonly ["airbnb"];
                            readonly type: "string";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly enum: readonly ["https://www.airbnb.com"];
                            readonly description: "The url must include “https://” prefix";
                        };
                    };
                };
            };
        };
        readonly required: readonly ["tags"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly guestId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guest id";
                };
            };
            readonly required: readonly ["guestId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e17287629e111001f7d3f4d"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Sanchez"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Rick Sanchez"];
                };
                readonly hometown: {
                    readonly type: "string";
                    readonly examples: readonly ["New York"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2022-08-12T16:00:00.000+03:00"];
                };
                readonly address: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly picture: {
                    readonly type: "object";
                    readonly description: "A link to guest’s picture in different sizes";
                    readonly additionalProperties: true;
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The main contact email of the guest";
                    readonly examples: readonly ["email@email.com"];
                };
                readonly emails: {
                    readonly description: "List of additional emails of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["email@email.com", "email2@email.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The main contact phone number";
                    readonly examples: readonly ["972234567454"];
                };
                readonly phones: {
                    readonly description: "List of additional phone numbers of the guest";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["972234567454", "972234567890"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Attention notes about the guest, describing important pieces of information about the guest, to review for all reservations (e.g. “Requires accessibility equipment”)";
                    readonly examples: readonly ["This guest is rich"];
                };
                readonly tags: {
                    readonly description: "Tags for describing the guest at a glance + show the enum for the field to show the allowed options";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["blocklisted", "VIP"];
                };
                readonly goodToKnowNotes: {
                    readonly type: "string";
                    readonly description: "“Good to know” notes about the guest. Notes to help capture facts about the guest that will help the team to personalize the guest’s stays (e.g. “Big football fan”)";
                    readonly examples: readonly ["This guest is alleric to peanuts"];
                };
                readonly preferredLanguage: {
                    readonly type: "string";
                    readonly examples: readonly ["en", "es", "fr"];
                };
                readonly birthday: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-08-12T16:00:00.000+03:00"];
                };
                readonly maritalStatus: {
                    readonly type: "string";
                    readonly examples: readonly ["single"];
                };
                readonly dietaryPreferences: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["vegan", "veggies"];
                };
                readonly allergies: {
                    readonly description: "You can pick one of the predefined options, or create a new one for your account";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly interests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["sports"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly examples: readonly ["he/him/his"];
                };
                readonly otaLinks: {
                    readonly description: "A link to the guest’s profile on an OTA";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly enum: readonly ["airbnb"];
                                readonly type: "string";
                                readonly description: "`airbnb`";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly enum: readonly ["https://www.airbnb.com"];
                                readonly description: "The url must include “https://” prefix\n\n`https://www.airbnb.com`";
                            };
                        };
                    };
                };
                readonly kids: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly examples: readonly [3];
                };
                readonly passportNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["23424353"];
                };
                readonly identityNumber: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly examples: readonly ["324325121"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly examples: readonly ["il"];
                };
                readonly contactType: {
                    readonly type: "string";
                    readonly examples: readonly ["guest"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly rentalsUnited: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly homeAway: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly policy: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly returningGuest: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["_id", "firstName", "lastName", "returningGuest"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerCreateImportedCalendar: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly minLength: 3;
            };
            readonly url: {
                readonly type: "string";
            };
            readonly listingId: {
                readonly type: "string";
            };
            readonly adjustmentValueStart: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
            readonly adjustmentValueEnd: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
        };
        readonly required: readonly ["name", "url", "listingId", "adjustmentValueStart", "adjustmentValueEnd"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerDeleteImportedCalendar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly importedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an imported calendars";
                };
            };
            readonly required: readonly ["importedCalendarId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly strategy: {
                    readonly enum: readonly ["remove_all_channel_events", "remove_past_channel_events", "remove_future_channel_events", "preserve_channel_events"];
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "One of allowed approaches for deletion of imported calendar";
                };
            };
            readonly required: readonly ["strategy"];
        }];
    };
    readonly response: {
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerGetImportedCalendarById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly importedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an imported calendars";
                };
            };
            readonly required: readonly ["importedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerGetImportedCalendars: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of a listing to get imported calendars for";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerPauseImportedCaledar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly importedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an imported calendars";
                };
            };
            readonly required: readonly ["importedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerResumeImportedCaledar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly importedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an imported calendars";
                };
            };
            readonly required: readonly ["importedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ImportedCalendarOpenApiControllerUpdateImportedCalendar: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly minLength: 3;
            };
            readonly adjustmentValueStart: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
            readonly adjustmentValueEnd: {
                readonly type: "number";
                readonly enum: readonly [-2, -1, 0, 1, 2];
            };
        };
        readonly required: readonly ["name", "adjustmentValueStart", "adjustmentValueEnd"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly importedCalendarId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of an imported calendars";
                };
            };
            readonly required: readonly ["importedCalendarId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of an imported calendar";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Related listing id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Related account id";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Time of creation of an imported calendar";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly description: "Time of last update of an imported calendar properties";
                };
                readonly status: {
                    readonly enum: readonly ["active", "paused", "warning", "suspended"];
                    readonly type: "string";
                    readonly description: "Status of an imported calendar\n\n`active` `paused` `warning` `suspended`";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "URL of an imported calendar";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of an imported calendar";
                };
                readonly lastSyncedAt: {
                    readonly type: "string";
                    readonly description: "Timestamp of last successful sync of an imported calendar";
                };
                readonly adjustmentValueStart: {
                    readonly type: "number";
                    readonly description: "Defines offset for start date of imported calendar events";
                };
                readonly adjustmentValueEnd: {
                    readonly type: "number";
                    readonly description: "Defines offset for end date of imported calendar events";
                };
            };
            readonly required: readonly ["id", "listingId", "accountId", "createdAt", "updatedAt", "status", "url", "name", "adjustmentValueStart", "adjustmentValueEnd"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceItemsControllerCreateInvoiceItem: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "Title of the invoice item";
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Price to be charged for the invoice item";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the invoice item";
            };
            readonly secondIdentifier: {
                readonly type: "string";
                readonly description: "When normalType AFE (Additional Fee) is selected, secondIdentifier is required, else it's forbidden. Second identifier is the type of the additional fee";
                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
            };
            readonly normalType: {
                readonly type: "string";
                readonly description: "Invoice item type identifier. Read more about valid enums <a href=\"https://open-api-docs.guesty.com/docs/valid-enumerations\">here</a>";
                readonly enum: readonly ["CF", "CFE", "PCM", "LT", "CT", "VAT", "GST", "TT", "TAX", "ST", "COT", "OCT", "TOT", "HSHAT", "HST", "MAT", "AFE"];
            };
            readonly realizationDates: {
                readonly description: "The date in which the invoice item fee is to be realized";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly date: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["date"];
                };
            };
        };
        readonly required: readonly ["title", "amount", "normalType"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation id to which the invoice item is related to";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const JournalEntriesControllerList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly operator: {
                    readonly enum: readonly ["@in_future", "@in_past", "@in_next_days", "@is_after_days", "@in_past_days", "@is_before_days", "@on", "@between", "@lt", "@today"];
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Comparison operator. Filter by date using url encoded json object. \nIf you use JS you can encode it for this way: 'encodeURI(JSON.stringify(obj))'\nFilter object example:\nIf we have {\"operator\": \"@in_past_days\", \"value\": 90} filter\nurl encoded should looks like: \n- %7B%22operator%22%3A%20%22%40in_past_days%22%2C%20%22value%22%3A90%7D\n\nso final query param will be \n- transactionDate=%7B%22operator%22%3A%20%22%40in_past_days%22%2C%20%22value%22%3A90%7D";
                };
                readonly value: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Example of expected date operators values:\n  - '@in_future' - boolean value,\n  Example: '{ \"operator\": \"@in_future\", \"value\": true }'\n- '@in_past' - boolean value,\n  Example: '{ \"operator\": \"@in_past\", \"value\": true }'\n- '@in_next_days' - numeric value,\n  Example: '{ \"operator\": \"@in_next_days\", \"value\": 2 }'\n- '@is_after_days' - numeric value,\n  Example: '{ \"operator\": \"@is_after_days\", \"value\": 2 }'\n- '@in_past_days' - numeric value,\n  Example: '{ \"operator\": \"@in_past_days\", \"value\": 2 }'\n- '@is_before_days' - numeric value,\n  Example: '{ \"operator\": \"@is_before_days\", \"value\": 2 }'\n- '@on' - Date string value,\n  Example: '{ \"operator\": \"@on\", \"value\": '2022-07-03T12:00:00+03:00' }'\n- '@between' - array of two Date string values,\n  Example: '{ \"operator\": \"@between\", \"value\": ['2022-07-03T12:00:00+03:00', '2022-07-08T12:00:00+03:00'] }'\n- '@lt' - Date string value,\n  Example: '{ \"operator\": \"@lt\", \"value\": \"2022-07-03T12:00:00+03:00\" }}'\n- '@gte' - Date string value,\n  Example: '{ \"operator\": \"@gte\", \"value\": \"2022-07-03T12:00:00+03:00\" }}'\n- '@today' - boolean value,\n  Example: '{ \"operator\": \"@today\", \"value\":true }'";
                };
                readonly name: {
                    readonly type: "string";
                    readonly examples: readonly ["LOCAL_TAX"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter list by journal entries name, it will search by matching strings from filter input";
                };
                readonly description: {
                    readonly type: "string";
                    readonly examples: readonly ["Deducted commission"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter list by journal entries description, it will search by matching strings from filter input";
                };
                readonly reservationConfirmationCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["GY-pzNAXYcq", "GY-ndGzwrgF"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by reservation confirmation codes";
                };
                readonly ledger: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["AD", "AP", "C", "O", "POA", "DO", "WC"];
                    };
                    readonly examples: readonly ["C"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "\n    Filter by ledger type.\n    Available ledgers: \n     - AD  (Advanced deposit),\n     - AP  ('Accounts payable'),\n     - C   ('Cash'),\n     - O   ('Owners'),\n     - DO  ('Due to/from operating'),\n     - WC  ('Working capital'),\n    ";
                };
                readonly guests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["5cfe6449b03278001ee67e03", "5f6b5faa6d5ccd28943d0408"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected guests ID";
                };
                readonly vendors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["62a764a2cecc57003492db6a", "airbnb", "airbnb2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected vendors ID";
                };
                readonly owners: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["62c57651f2e43e00397ca67f", "62c2eb8d999ea20033fdac1b"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected owners ID";
                };
                readonly listings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["62c57651f2e43e00397ca67f", "62c2eb8d999ea20033fdac1b"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected listings ID";
                };
                readonly chargeCode: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["AF", "AFO", "CF", "PCM", "CM", "LT", "CT", "TT", "GST", "LGT", "OT", "VAT", "VATOC", "VATOCA", "TAX", "AFE", "CCP", "PR", "RF", "CHB", "CHBRV", "CMS", "OC", "PFO", "OCR", "ODB", "PO", "PV", "FT", "PE", "PI", "CFE", "EXNRI", "CCNRI", "ST", "COT", "OCT", "TOT", "HSHAT", "HST", "MAT", "TRT", "PP", "RCA", "WOCAP", "OCWC", "TAF", "GPC", "RR", "SDC", "SDCP", "AFD", "AFA", "LOSD", "GCD", "AFWD", "AFMD", "EPF", "MAR", "MARD", "CO", "PRO", "ARC"];
                    };
                    readonly examples: readonly ["PCM", "COT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected transaction codes";
                };
                readonly triggers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["MANUAL", "PAYMENT", "PERIODIC", "RESERVATION_CREATED", "RESERVATION_UPDATED", "RESERVATION_CANCELLED", "DISBURSEMENT", "RECONCILIATION_CASH_ADJUSTMENT", "COMMISSION_ADJUSTMENT"];
                    };
                    readonly examples: readonly ["PAYMENT", "MANUAL"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Show journal entries for selected triggers. \n      Available triggers: \n        - PAYMENT\n        - MANUAL\n        - PERIODIC\n        - RESERVATION_CANCELLED\n        - RESERVATION_CREATED\n        - RESERVATION_UPDATED\n        - DISBURSEMENT\n        - RECONCILIATION_CASH_ADJUSTMENT\n        ";
                };
                readonly skip: {
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [5];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination skip value";
                };
                readonly limit: {
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination limit value";
                };
                readonly sortByDate: {
                    readonly enum: readonly ["ASC", "DESC"];
                    readonly type: "string";
                    readonly examples: readonly ["ASC"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort by date. For ascending order use 'ASC' value, for descending - 'DESC'";
                };
            };
            readonly required: readonly ["operator", "value"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly current: {
                    readonly type: "number";
                    readonly examples: readonly [25];
                };
                readonly total: {
                    readonly type: "number";
                    readonly examples: readonly [478];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "number";
                                readonly examples: readonly [149304];
                            };
                            readonly transactionId: {
                                readonly type: "number";
                                readonly examples: readonly [74691];
                            };
                            readonly date: {
                                readonly type: "string";
                                readonly examples: readonly ["2022-07-13"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly examples: readonly ["Payment - CASH"];
                            };
                            readonly ledger: {
                                readonly type: "string";
                                readonly examples: readonly ["Advanced deposit"];
                            };
                            readonly guest: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly examples: readonly ["62ce5bd737f7d900320e4a47"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["Guest Xxx"];
                                    };
                                };
                            };
                            readonly vendor: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly examples: readonly ["62ce5bd737f7d900320e4a47"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["Vendor Xxx"];
                                    };
                                };
                            };
                            readonly owner: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly examples: readonly ["62ce5bd737f7d900320e4a47"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["Owner Xxx"];
                                    };
                                };
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "currency"];
                                readonly properties: {
                                    readonly value: {
                                        readonly type: "number";
                                        readonly examples: readonly [-95];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly examples: readonly ["USD"];
                                    };
                                };
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Payment - CASH"];
                            };
                            readonly listing: {
                                readonly type: "object";
                                readonly required: readonly ["href", "title", "target"];
                                readonly properties: {
                                    readonly href: {
                                        readonly type: "string";
                                        readonly examples: readonly ["/listings/6259630d9e23bc0034c86238"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                        readonly examples: readonly ["Dmytro's fancy house"];
                                    };
                                    readonly target: {
                                        readonly type: "string";
                                        readonly examples: readonly ["_blank"];
                                    };
                                };
                            };
                            readonly chargeType: {
                                readonly type: "string";
                                readonly examples: readonly ["Payment Recording"];
                            };
                            readonly reservationConfirmationCode: {
                                readonly type: "object";
                                readonly required: readonly ["href", "title", "target"];
                                readonly properties: {
                                    readonly href: {
                                        readonly type: "string";
                                        readonly examples: readonly ["/reservations/62ce5bdb37f7d900320e4a69/summary"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                        readonly examples: readonly ["Y7MB8NGmA"];
                                    };
                                    readonly target: {
                                        readonly type: "string";
                                        readonly examples: readonly ["_blank"];
                                    };
                                };
                            };
                            readonly paymentConfirmationCode: {
                                readonly type: "string";
                                readonly examples: readonly ["SAS432"];
                            };
                            readonly chargeCode: {
                                readonly type: "string";
                                readonly examples: readonly ["PR"];
                            };
                            readonly trigger: {
                                readonly type: "string";
                                readonly examples: readonly ["Payment"];
                            };
                            readonly attachments: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "number";
                                            readonly examples: readonly [392];
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1664382837/folder/5213a2d206112710005d96ff/accounting/axcrdnwz7ermpaox1eun.pdf"];
                                        };
                                        readonly urlThumbnail: {
                                            readonly type: "string";
                                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/h_300/v1664382837/folder/5213a2d206112710005d96ff/accounting/axcrdnwz7ermpaox1eun.jpg"];
                                        };
                                        readonly uploadedBy: {
                                            readonly type: "string";
                                            readonly examples: readonly ["5d64dbdbfc4aae0021bffc1c"];
                                        };
                                        readonly uploadedAt: {
                                            readonly type: "number";
                                            readonly examples: readonly [1664382837000];
                                        };
                                        readonly originalFilename: {
                                            readonly type: "string";
                                            readonly examples: readonly ["simple"];
                                        };
                                        readonly originalExtension: {
                                            readonly type: "string";
                                            readonly examples: readonly ["pdf"];
                                        };
                                    };
                                    readonly required: readonly ["id", "url", "urlThumbnail", "uploadedBy", "uploadedAt", "originalFilename", "originalExtension"];
                                };
                            };
                        };
                        readonly required: readonly ["id", "transactionId", "date", "description", "ledger", "guest", "vendor", "owner", "amount", "name", "listing", "chargeType", "reservationConfirmationCode", "paymentConfirmationCode", "chargeCode", "trigger", "attachments"];
                    };
                };
            };
            readonly required: readonly ["skip", "limit", "current", "total", "data"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["title must be longer than or equal to 3 characters", "entries.0.amount should not be empty", "entries.0.destination.type must be a valid enum value"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OpenApiTaxesControllerCreateTax: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly unitTypeId: {
                readonly type: "string";
                readonly description: "1. The unit (listing) id on which the new tax will apply.\n2. To apply the tax on account level, leave this field empty.";
                readonly examples: readonly ["623892d57f4f56afcb25587c"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "1. The tax type.\n2. Each tax type can only be defined once on account/listing level.";
                readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
            };
            readonly units: {
                readonly type: "string";
                readonly description: "Determines whether the tax amount should be treated as a fixed or percentage value";
                readonly enum: readonly ["PERCENTAGE", "FIXED"];
            };
            readonly amount: {
                readonly type: "number";
                readonly minimum: 0;
                readonly description: "1. the amount of the tax, could be a fixed value or percentage whether units is 'FIXED' or 'PERCENTAGE' respectively.\n 2. when 'FIXED' then 'amount' has to be greater then 0\n 3. when 'PERCENTAGE' then 'amount' has to be greater then 0 and smaller or equal to 100";
            };
            readonly quantifier: {
                readonly type: "string";
                readonly description: "Determines by what factor the tax amount will be multiplied";
                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
            };
            readonly name: {
                readonly type: "string";
                readonly maxLength: 40;
                readonly description: "The name for the tax, which will be used accross guesty. there can be no two taxes with the same name.";
            };
            readonly appliedToAllFees: {
                readonly type: "boolean";
                readonly description: "1. Relevant only when the units equals 'PERCENTAGE'\n2. When equals 'true', then the tax will be calculated on all fees and 'appliedOnFees' must contain all values";
            };
            readonly appliedOnFees: {
                readonly description: "1. Relevant only when the unit equals 'PERCENTAGE'\n\n  2. This defines the fees on which the tax will be calculated";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["AF"];
            };
            readonly isAppliedByDefault: {
                readonly type: "boolean";
                readonly description: "1. When set to 'true' and 'appliedByDefaultOnChannels' is not empty, then Guesty will prededuct the tax from the accommodation fare.\n 2. can not be 'true' when 'appliedByDefaultOnChannels' is empty";
            };
            readonly appliedByDefaultOnChannels: {
                readonly type: "array";
                readonly description: "1. When contains values and 'isAppliedByDefault' is set to 'true', then Guesty will prededuct the tax from the accommodation fare.\n 2. can not contain elements when 'isAppliedByDefault' is 'false'\n 3. currently, only supported for reservations received from source Airbnb";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                };
            };
            readonly conditionalOverrides: {
                readonly description: "Set additional conditions for this tax";
                readonly type: "object";
                readonly required: readonly ["viewType"];
                readonly properties: {
                    readonly viewType: {
                        readonly type: "string";
                        readonly description: "1. The kind of conditions to set on the tax\n 2. When 'units' is 'FIXED' and 'quantifier' is 'guest'/'stay' then 'NiGHTS' and 'NIGHTS_IN_DATES' viewTypes are forbidden,\n 3. When 'units' is 'PERCENTAGE' then all viewTypes are allowed";
                        readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                    };
                    readonly rules: {
                        readonly description: "1. The dates and nights ranges that the tax condition will apply for.\n 2. When viewType is 'LOS' then rules is forbidden, else rules is required and can not be empty.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["nightRanges"];
                            readonly properties: {
                                readonly dateRange: {
                                    readonly description: "1. When viewType is 'NIGHTS' then rules objects can not contain dateRanges.";
                                    readonly type: "object";
                                    readonly required: readonly ["from", "to"];
                                    readonly properties: {
                                        readonly from: {
                                            readonly type: "string";
                                            readonly examples: readonly ["12-31"];
                                        };
                                        readonly to: {
                                            readonly type: "string";
                                            readonly examples: readonly ["02-01"];
                                        };
                                    };
                                };
                                readonly nightRanges: {
                                    readonly description: "1. When viewType is 'DATES' then all rules objects must contain only 1 nightRange with no 'to' field and 'from' field equals 1.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["from", "amount"];
                                        readonly properties: {
                                            readonly from: {
                                                readonly type: "number";
                                                readonly minimum: 1;
                                            };
                                            readonly to: {
                                                readonly type: "number";
                                                readonly minimum: 1;
                                            };
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly maxNightCountToApplyOn: {
                        readonly type: "number";
                        readonly minimum: 1;
                        readonly description: "1. The tax will be applied for all reservation that has night count smaller then 'maxNightCountToApplyOn'\n 2. Only when 'viewType' is 'LOS' then this field is allowed and required";
                    };
                };
            };
        };
        readonly required: readonly ["type", "units", "amount", "quantifier"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
                    readonly description: "`LOCAL_TAX` `CITY_TAX` `VAT` `GOODS_AND_SERVICES_TAX` `TOURISM_TAX` `OTHER` `STATE_TAX` `COUNTY_TAX` `OCCUPANCY_TAX` `TRANSIENT_OCCUPANCY_TAX` `HOME_SHARING_TAX` `HARMONIZED_SALES_TAX` `MINIMUM_ALTERNATE_TAX`";
                };
                readonly units: {
                    readonly type: "string";
                    readonly enum: readonly ["PERCENTAGE", "FIXED"];
                    readonly description: "`PERCENTAGE` `FIXED`";
                };
                readonly quantifier: {
                    readonly type: "string";
                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                    readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                };
                readonly appliedOnFees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["AF"];
                };
                readonly appliedByDefaultOnChannels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                        readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                    };
                };
                readonly isDeleted: {
                    readonly type: "boolean";
                };
                readonly amount: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly appliedToAllFees: {
                    readonly type: "boolean";
                };
                readonly isAppliedByDefault: {
                    readonly type: "boolean";
                };
                readonly conditionalOverrides: {
                    readonly type: "object";
                    readonly properties: {
                        readonly viewType: {
                            readonly type: "string";
                            readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                            readonly description: "`NIGHTS` `DATES` `NIGHTS_IN_DATES` `LOS`";
                        };
                        readonly rules: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly dateRange: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly from: {
                                                readonly type: "string";
                                                readonly examples: readonly ["12-31"];
                                            };
                                            readonly to: {
                                                readonly type: "string";
                                                readonly examples: readonly ["02-01"];
                                            };
                                        };
                                        readonly required: readonly ["from", "to"];
                                    };
                                    readonly nightRanges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly from: {
                                                    readonly type: "number";
                                                    readonly minimum: 1;
                                                };
                                                readonly to: {
                                                    readonly type: "number";
                                                    readonly minimum: 1;
                                                };
                                                readonly amount: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                };
                                            };
                                            readonly required: readonly ["from", "amount"];
                                        };
                                    };
                                };
                                readonly required: readonly ["nightRanges"];
                            };
                        };
                        readonly maxNightCountToApplyOn: {
                            readonly type: "number";
                        };
                    };
                    readonly required: readonly ["viewType"];
                };
                readonly channelConfig: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly channel: {
                                readonly type: "string";
                            };
                            readonly userConfig: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly syncSelection: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["syncSelection"];
                            };
                        };
                        readonly required: readonly ["channel", "userConfig"];
                    };
                };
            };
            readonly required: readonly ["accountId", "type", "units", "quantifier", "appliedOnFees", "appliedByDefaultOnChannels", "amount", "appliedToAllFees", "isAppliedByDefault"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OpenApiTaxesControllerDeleteTax: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The tax id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const OpenApiTaxesControllerGetAccountLevelTaxes: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly unitTypeId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly accountId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
                        readonly description: "`LOCAL_TAX` `CITY_TAX` `VAT` `GOODS_AND_SERVICES_TAX` `TOURISM_TAX` `OTHER` `STATE_TAX` `COUNTY_TAX` `OCCUPANCY_TAX` `TRANSIENT_OCCUPANCY_TAX` `HOME_SHARING_TAX` `HARMONIZED_SALES_TAX` `MINIMUM_ALTERNATE_TAX`";
                    };
                    readonly units: {
                        readonly type: "string";
                        readonly enum: readonly ["PERCENTAGE", "FIXED"];
                        readonly description: "`PERCENTAGE` `FIXED`";
                    };
                    readonly quantifier: {
                        readonly type: "string";
                        readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                        readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                    };
                    readonly appliedOnFees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["AF"];
                    };
                    readonly appliedByDefaultOnChannels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                            readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                        };
                    };
                    readonly isDeleted: {
                        readonly type: "boolean";
                    };
                    readonly amount: {
                        readonly type: "number";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly appliedToAllFees: {
                        readonly type: "boolean";
                    };
                    readonly isAppliedByDefault: {
                        readonly type: "boolean";
                    };
                    readonly conditionalOverrides: {
                        readonly type: "object";
                        readonly properties: {
                            readonly viewType: {
                                readonly type: "string";
                                readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                                readonly description: "`NIGHTS` `DATES` `NIGHTS_IN_DATES` `LOS`";
                            };
                            readonly rules: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly dateRange: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly from: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["12-31"];
                                                };
                                                readonly to: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["02-01"];
                                                };
                                            };
                                            readonly required: readonly ["from", "to"];
                                        };
                                        readonly nightRanges: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly from: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly to: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly amount: {
                                                        readonly type: "number";
                                                        readonly minimum: 0;
                                                    };
                                                };
                                                readonly required: readonly ["from", "amount"];
                                            };
                                        };
                                    };
                                    readonly required: readonly ["nightRanges"];
                                };
                            };
                            readonly maxNightCountToApplyOn: {
                                readonly type: "number";
                            };
                        };
                        readonly required: readonly ["viewType"];
                    };
                    readonly channelConfig: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly channel: {
                                    readonly type: "string";
                                };
                                readonly userConfig: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly syncSelection: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["syncSelection"];
                                };
                            };
                            readonly required: readonly ["channel", "userConfig"];
                        };
                    };
                };
                readonly required: readonly ["accountId", "type", "units", "quantifier", "appliedOnFees", "appliedByDefaultOnChannels", "amount", "appliedToAllFees", "isAppliedByDefault"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OpenApiTaxesControllerGetUnitTypeActualTaxes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The unit type id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly unitTypeId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly accountId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
                        readonly description: "`LOCAL_TAX` `CITY_TAX` `VAT` `GOODS_AND_SERVICES_TAX` `TOURISM_TAX` `OTHER` `STATE_TAX` `COUNTY_TAX` `OCCUPANCY_TAX` `TRANSIENT_OCCUPANCY_TAX` `HOME_SHARING_TAX` `HARMONIZED_SALES_TAX` `MINIMUM_ALTERNATE_TAX`";
                    };
                    readonly units: {
                        readonly type: "string";
                        readonly enum: readonly ["PERCENTAGE", "FIXED"];
                        readonly description: "`PERCENTAGE` `FIXED`";
                    };
                    readonly quantifier: {
                        readonly type: "string";
                        readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                        readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                    };
                    readonly appliedOnFees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["AF"];
                    };
                    readonly appliedByDefaultOnChannels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                            readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                        };
                    };
                    readonly isDeleted: {
                        readonly type: "boolean";
                    };
                    readonly amount: {
                        readonly type: "number";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly appliedToAllFees: {
                        readonly type: "boolean";
                    };
                    readonly isAppliedByDefault: {
                        readonly type: "boolean";
                    };
                    readonly conditionalOverrides: {
                        readonly type: "object";
                        readonly properties: {
                            readonly viewType: {
                                readonly type: "string";
                                readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                                readonly description: "`NIGHTS` `DATES` `NIGHTS_IN_DATES` `LOS`";
                            };
                            readonly rules: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly dateRange: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly from: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["12-31"];
                                                };
                                                readonly to: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["02-01"];
                                                };
                                            };
                                            readonly required: readonly ["from", "to"];
                                        };
                                        readonly nightRanges: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly from: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly to: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly amount: {
                                                        readonly type: "number";
                                                        readonly minimum: 0;
                                                    };
                                                };
                                                readonly required: readonly ["from", "amount"];
                                            };
                                        };
                                    };
                                    readonly required: readonly ["nightRanges"];
                                };
                            };
                            readonly maxNightCountToApplyOn: {
                                readonly type: "number";
                            };
                        };
                        readonly required: readonly ["viewType"];
                    };
                    readonly channelConfig: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly channel: {
                                    readonly type: "string";
                                };
                                readonly userConfig: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly syncSelection: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["syncSelection"];
                                };
                            };
                            readonly required: readonly ["channel", "userConfig"];
                        };
                    };
                };
                readonly required: readonly ["accountId", "type", "units", "quantifier", "appliedOnFees", "appliedByDefaultOnChannels", "amount", "appliedToAllFees", "isAppliedByDefault"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OpenApiTaxesControllerGetUnitTypeLevelTaxes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The unit type id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly unitTypeId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly accountId: {
                        readonly type: "string";
                        readonly examples: readonly ["623892d57f4f56afcb25587c"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
                        readonly description: "`LOCAL_TAX` `CITY_TAX` `VAT` `GOODS_AND_SERVICES_TAX` `TOURISM_TAX` `OTHER` `STATE_TAX` `COUNTY_TAX` `OCCUPANCY_TAX` `TRANSIENT_OCCUPANCY_TAX` `HOME_SHARING_TAX` `HARMONIZED_SALES_TAX` `MINIMUM_ALTERNATE_TAX`";
                    };
                    readonly units: {
                        readonly type: "string";
                        readonly enum: readonly ["PERCENTAGE", "FIXED"];
                        readonly description: "`PERCENTAGE` `FIXED`";
                    };
                    readonly quantifier: {
                        readonly type: "string";
                        readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                        readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                    };
                    readonly appliedOnFees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["AF"];
                    };
                    readonly appliedByDefaultOnChannels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                            readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                        };
                    };
                    readonly isDeleted: {
                        readonly type: "boolean";
                    };
                    readonly amount: {
                        readonly type: "number";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly appliedToAllFees: {
                        readonly type: "boolean";
                    };
                    readonly isAppliedByDefault: {
                        readonly type: "boolean";
                    };
                    readonly conditionalOverrides: {
                        readonly type: "object";
                        readonly properties: {
                            readonly viewType: {
                                readonly type: "string";
                                readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                                readonly description: "`NIGHTS` `DATES` `NIGHTS_IN_DATES` `LOS`";
                            };
                            readonly rules: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly dateRange: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly from: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["12-31"];
                                                };
                                                readonly to: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["02-01"];
                                                };
                                            };
                                            readonly required: readonly ["from", "to"];
                                        };
                                        readonly nightRanges: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly from: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly to: {
                                                        readonly type: "number";
                                                        readonly minimum: 1;
                                                    };
                                                    readonly amount: {
                                                        readonly type: "number";
                                                        readonly minimum: 0;
                                                    };
                                                };
                                                readonly required: readonly ["from", "amount"];
                                            };
                                        };
                                    };
                                    readonly required: readonly ["nightRanges"];
                                };
                            };
                            readonly maxNightCountToApplyOn: {
                                readonly type: "number";
                            };
                        };
                        readonly required: readonly ["viewType"];
                    };
                    readonly channelConfig: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly channel: {
                                    readonly type: "string";
                                };
                                readonly userConfig: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly syncSelection: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["syncSelection"];
                                };
                            };
                            readonly required: readonly ["channel", "userConfig"];
                        };
                    };
                };
                readonly required: readonly ["accountId", "type", "units", "quantifier", "appliedOnFees", "appliedByDefaultOnChannels", "amount", "appliedToAllFees", "isAppliedByDefault"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OpenApiTaxesControllerUpdateTax: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly description: "1. The tax type.\n2. Each tax type can only be defined once on account/listing level.";
                readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
            };
            readonly units: {
                readonly type: "string";
                readonly description: "Determines whether the tax amount should be treated as a fixed or percentage value";
                readonly enum: readonly ["PERCENTAGE", "FIXED"];
            };
            readonly amount: {
                readonly type: "number";
                readonly minimum: 0;
                readonly description: "1. the amount of the tax, could be a fixed value or percentage whether units is 'FIXED' or 'PERCENTAGE' respectively.\n 2. when 'FIXED' then 'amount' has to be greater then 0\n 3. when 'PERCENTAGE' then 'amount' has to be greater then 0 and smaller or equal to 100";
            };
            readonly quantifier: {
                readonly type: "string";
                readonly description: "Determines by what factor the tax amount will be multiplied";
                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
            };
            readonly appliedToAllFees: {
                readonly type: "boolean";
                readonly description: "1. Relevant only when the units equals 'PERCENTAGE'\n2. When equals 'true', then the tax will be calculated on all fees and 'appliedOnFees' must contain all values";
            };
            readonly appliedOnFees: {
                readonly description: "1. Relevant only when the unit equals 'PERCENTAGE'\n\n  2. This defines the fees on which the tax will be calculated";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["AF"];
            };
            readonly isAppliedByDefault: {
                readonly type: "boolean";
                readonly description: "1. When set to 'true' and 'appliedByDefaultOnChannels' is not empty, then Guesty will prededuct the tax from the accommodation fare.\n 2. can not be 'true' when 'appliedByDefaultOnChannels' is empty";
            };
            readonly appliedByDefaultOnChannels: {
                readonly type: "array";
                readonly description: "1. When contains values and 'isAppliedByDefault' is set to 'true', then Guesty will prededuct the tax from the accommodation fare.\n 2. can not contain elements when 'isAppliedByDefault' is 'false'\n 3. currently, only supported for reservations received from source Airbnb";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                };
            };
            readonly conditionalOverrides: {
                readonly description: "Set additional conditions for this tax";
                readonly type: "object";
                readonly required: readonly ["viewType"];
                readonly properties: {
                    readonly viewType: {
                        readonly type: "string";
                        readonly description: "1. The kind of conditions to set on the tax\n 2. When 'units' is 'FIXED' and 'quantifier' is 'guest'/'stay' then 'NiGHTS' and 'NIGHTS_IN_DATES' viewTypes are forbidden,\n 3. When 'units' is 'PERCENTAGE' then all viewTypes are allowed";
                        readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                    };
                    readonly rules: {
                        readonly description: "1. The dates and nights ranges that the tax condition will apply for.\n 2. When viewType is 'LOS' then rules is forbidden, else rules is required and can not be empty.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["nightRanges"];
                            readonly properties: {
                                readonly dateRange: {
                                    readonly description: "1. When viewType is 'NIGHTS' then rules objects can not contain dateRanges.";
                                    readonly type: "object";
                                    readonly required: readonly ["from", "to"];
                                    readonly properties: {
                                        readonly from: {
                                            readonly type: "string";
                                            readonly examples: readonly ["12-31"];
                                        };
                                        readonly to: {
                                            readonly type: "string";
                                            readonly examples: readonly ["02-01"];
                                        };
                                    };
                                };
                                readonly nightRanges: {
                                    readonly description: "1. When viewType is 'DATES' then all rules objects must contain only 1 nightRange with no 'to' field and 'from' field equals 1.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["from", "amount"];
                                        readonly properties: {
                                            readonly from: {
                                                readonly type: "number";
                                                readonly minimum: 1;
                                            };
                                            readonly to: {
                                                readonly type: "number";
                                                readonly minimum: 1;
                                            };
                                            readonly amount: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly maxNightCountToApplyOn: {
                        readonly type: "number";
                        readonly minimum: 1;
                        readonly description: "1. The tax will be applied for all reservation that has night count smaller then 'maxNightCountToApplyOn'\n 2. Only when 'viewType' is 'LOS' then this field is allowed and required";
                    };
                };
            };
            readonly name: {
                readonly type: "string";
                readonly maxLength: 40;
                readonly description: "The name for the tax, which will be used accross guesty. there can be no two taxes with the same name. to remove a name of existing tax pass empty string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The tax id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["LOCAL_TAX", "CITY_TAX", "VAT", "GOODS_AND_SERVICES_TAX", "TOURISM_TAX", "OTHER", "STATE_TAX", "COUNTY_TAX", "OCCUPANCY_TAX", "TRANSIENT_OCCUPANCY_TAX", "HOME_SHARING_TAX", "HARMONIZED_SALES_TAX", "MINIMUM_ALTERNATE_TAX"];
                    readonly description: "`LOCAL_TAX` `CITY_TAX` `VAT` `GOODS_AND_SERVICES_TAX` `TOURISM_TAX` `OTHER` `STATE_TAX` `COUNTY_TAX` `OCCUPANCY_TAX` `TRANSIENT_OCCUPANCY_TAX` `HOME_SHARING_TAX` `HARMONIZED_SALES_TAX` `MINIMUM_ALTERNATE_TAX`";
                };
                readonly units: {
                    readonly type: "string";
                    readonly enum: readonly ["PERCENTAGE", "FIXED"];
                    readonly description: "`PERCENTAGE` `FIXED`";
                };
                readonly quantifier: {
                    readonly type: "string";
                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                    readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                };
                readonly appliedOnFees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["AF"];
                };
                readonly appliedByDefaultOnChannels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                        readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                    };
                };
                readonly isDeleted: {
                    readonly type: "boolean";
                };
                readonly amount: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly appliedToAllFees: {
                    readonly type: "boolean";
                };
                readonly isAppliedByDefault: {
                    readonly type: "boolean";
                };
                readonly conditionalOverrides: {
                    readonly type: "object";
                    readonly properties: {
                        readonly viewType: {
                            readonly type: "string";
                            readonly enum: readonly ["NIGHTS", "DATES", "NIGHTS_IN_DATES", "LOS"];
                            readonly description: "`NIGHTS` `DATES` `NIGHTS_IN_DATES` `LOS`";
                        };
                        readonly rules: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly dateRange: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly from: {
                                                readonly type: "string";
                                                readonly examples: readonly ["12-31"];
                                            };
                                            readonly to: {
                                                readonly type: "string";
                                                readonly examples: readonly ["02-01"];
                                            };
                                        };
                                        readonly required: readonly ["from", "to"];
                                    };
                                    readonly nightRanges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly from: {
                                                    readonly type: "number";
                                                    readonly minimum: 1;
                                                };
                                                readonly to: {
                                                    readonly type: "number";
                                                    readonly minimum: 1;
                                                };
                                                readonly amount: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                };
                                            };
                                            readonly required: readonly ["from", "amount"];
                                        };
                                    };
                                };
                                readonly required: readonly ["nightRanges"];
                            };
                        };
                        readonly maxNightCountToApplyOn: {
                            readonly type: "number";
                        };
                    };
                    readonly required: readonly ["viewType"];
                };
                readonly channelConfig: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly channel: {
                                readonly type: "string";
                            };
                            readonly userConfig: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly syncSelection: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["syncSelection"];
                            };
                        };
                        readonly required: readonly ["channel", "userConfig"];
                    };
                };
            };
            readonly required: readonly ["accountId", "type", "units", "quantifier", "appliedOnFees", "appliedByDefaultOnChannels", "amount", "appliedToAllFees", "isAppliedByDefault"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OwnersControllerRetrieve: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly workingCapital: {
                    readonly type: "number";
                    readonly description: "Current owner's working capital amount";
                    readonly examples: readonly [10];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Can't find reservation with ID {reservation_id}"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OwnersControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly workingCapital: {
                readonly type: "number";
                readonly description: "New working capital amount";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly workingCapital: {
                    readonly type: "number";
                    readonly description: "Current owner's working capital amount";
                    readonly examples: readonly [10];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["each value in listingIds must be a string", "listingIds must be an array", "listingIds should not be empty"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchAdditionalFeesId: {
    readonly body: {
        readonly type: "object";
        readonly description: "When configuring the platform and sources fields, user discretion should be taken to choose platforms or sources that are integrated to the account/listing";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["AB"];
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                readonly description: "Additional fee type.\n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
                readonly examples: readonly ["EARLY_CHECK_IN"];
            };
            readonly value: {
                readonly description: "1. Must be bigger than 0,\n2. when 'isPercentage' is 'true' then must be smaller or equal to 100";
                readonly type: "integer";
                readonly examples: readonly [5];
            };
            readonly isPercentage: {
                readonly description: "Sets wether 'value' should be a fixed amount or percentage";
                readonly type: "boolean";
            };
            readonly targetFee: {
                readonly type: "string";
                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                readonly description: "1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. required when 'isPercentage' is 'true'";
            };
            readonly multiplier: {
                readonly type: "string";
                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                readonly description: "1. Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.";
                readonly examples: readonly ["PER_GUEST"];
            };
            readonly isSyncToSupportedChannelsEnabled: {
                readonly type: "boolean";
                readonly description: "1. Sync fee to account or listing settings and all future reservations for supported booking channels. \n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
            };
            readonly isAutomated: {
                readonly type: "boolean";
                readonly description: "1. Indicates if there are booking channels in which the additional fee should be added automatically to reservations once the reservation arrives in Guesty,\n2. if set to 'true', you must configure at least one of 'allSources', 'automationSources', 'allPlatforms', 'automationPlatforms', 'allRUSources', 'RUSources'";
            };
            readonly allPlatforms: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future reservations in Guesty for all booking channels,\n2. can not be 'true' when 'isAutomated' is 'false',\n3. can not be 'true' when 'automationPlatforms' is not empty";
            };
            readonly automationPlatforms: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future reservations in Guesty for specified booking channels,\n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allPlatforms' is 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                };
            };
            readonly allSources: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future reservations for all manual sources,\n2. Can not be 'true' when 'isAutomated' is 'false',\n3. Can not be 'true' when 'automationSources' is not empty";
            };
            readonly automationSources: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future reservations in Guesty for specified manual sources,\n2. Can not contain values when 'isAutomated' is 'false',\n3. Can not contain values when 'allSources' is 'true'";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly allRUSources: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future rentals united reservations in Guesty for all rentals united booking channels,\n2. Can not be 'true' when 'isAutomated' is 'false'\n3. Can not be 'true' when 'RUSources' is not empty,\n4. when 'true' then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
            };
            readonly RUSources: {
                readonly type: "array";
                readonly description: "1. additional fee will be added to future rentals united reservations in Guesty for specified rentals united booking channels, \n2. Can not contain values when 'isAutomated' is 'false',\n3. Can not contain values when 'allRUSources' is 'true',\n4. when not empty then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                };
            };
            readonly isDeducted: {
                readonly type: "boolean";
                readonly description: "[Beta] 1. Additional fee will be deducted from Accommodation Fare. isDeducted must be [false] without isBundled being [true] when either isSyncToSupportedChannelsEnabled, isAutomated are [true].";
            };
            readonly isBundled: {
                readonly type: "boolean";
                readonly description: "[Beta] 1. Additional fee value bundles/adds to Accommodation Fare, line item will not be created. When isBundled is [true] isDeducted and isSyncToSupportedChannelsEnabled must be [true], isAutomated must be [false].";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "id of item to update";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                    readonly description: "`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                };
                readonly value: {
                    readonly type: "integer";
                };
                readonly targetFee: {
                    readonly type: "string";
                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                    readonly description: "`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                };
                readonly automationSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly automationPlatforms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                        readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                    };
                };
                readonly RUSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                        readonly description: "`agoda` `bookingCom` `despegar` `expedia` `hostelworld` `homeAway`";
                    };
                };
                readonly allSources: {
                    readonly type: "boolean";
                };
                readonly isDeducted: {
                    readonly type: "boolean";
                };
                readonly isBundled: {
                    readonly type: "boolean";
                };
                readonly allPlatforms: {
                    readonly type: "boolean";
                };
                readonly allRUSources: {
                    readonly type: "boolean";
                };
                readonly isAutomated: {
                    readonly type: "boolean";
                };
                readonly isPercentage: {
                    readonly type: "boolean";
                };
                readonly multiplier: {
                    readonly type: "string";
                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                    readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                };
                readonly isSyncToSupportedChannelsEnabled: {
                    readonly type: "boolean";
                };
                readonly deductedConfiguration: {
                    readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                    readonly type: "object";
                    readonly properties: {
                        readonly isApplyToAll: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                            readonly type: "boolean";
                        };
                        readonly sources: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly channels: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly channelConfigurations: {
                    readonly description: "[Beta] Settings overrides per channel";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly channel: {
                                readonly description: "[Beta] Channel name";
                                readonly type: "string";
                            };
                            readonly isEnabled: {
                                readonly description: "[Beta] Is sync to channel enabled";
                                readonly type: "boolean";
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee Type in the channel";
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly multiplier: {
                                readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["channel", "value", "isPercentage"];
                    };
                };
                readonly sourcesConfigurations: {
                    readonly description: "[Beta] Settings overrides per groups of manual sources";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly sources: {
                                readonly type: "array";
                                readonly items: {
                                    readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                    readonly type: "string";
                                };
                                readonly minItems: 1;
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee type\n\n`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                                readonly type: "string";
                                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly multiplier: {
                                readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["value", "isPercentage", "sources"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchOwnersOwneridDocumentsDocumentid: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["DOCUMENT", "CONTRACT"];
            };
            readonly isShared: {
                readonly type: "boolean";
            };
            readonly startDate: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date in YYYY-MM-DD format";
            };
            readonly endDate: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date in YYYY-MM-DD format";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
                readonly documentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Document id";
                };
            };
            readonly required: readonly ["ownerId", "documentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly originalFileName: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly enum: readonly ["DOCUMENT", "CONTRACT"];
                    readonly type: "string";
                    readonly examples: readonly ["DOCUMENT"];
                    readonly description: "`DOCUMENT` `CONTRACT`";
                };
                readonly isShared: {
                    readonly type: "boolean";
                    readonly description: "Document is visible to owner in Owners Portal";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly description: "Document effective date in YYYY-MM-DD format";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly description: "Document expiration date in YYYY-MM-DD format";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly deletedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "ownerId", "originalFileName", "name", "type", "isShared", "createdAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchPropertiesSpacesSpaceSpaceidDetails: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["BEDROOM", "SHARED_SPACE", "FULL_BATHROOM", "HALF_BATHROOM"];
            };
            readonly airbnb_room_id: {
                readonly type: "string";
                readonly examples: readonly ["123456"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly spaceId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735de"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "spaceId to edit";
                };
            };
            readonly required: readonly ["spaceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Space room"];
                            };
                            readonly roomIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly airbnb: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly beds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly KING_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly QUEEN_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly DOUBLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SINGLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SOFA_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly AIR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly BUNK_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly other: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly FLOOR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly WATER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly TODDLER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly CRIB: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly bedroomsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly bathrooms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly SHARED: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly PRIVATE: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchReservationsIdPaymentsPaymentidCancel: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
                readonly paymentId: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment ID";
                };
            };
            readonly required: readonly ["id", "paymentId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly description: "Payment status";
                    readonly examples: readonly ["CANCELLED"];
                };
                readonly paymentMethod: {
                    readonly type: "object";
                    readonly description: "Payment method object\n **\"Recorded\" cash payment method example**";
                    readonly properties: {
                        readonly method: {
                            readonly type: "string";
                            readonly enum: readonly ["RECORDED_CASH", "STRIPE", "AMARYLLIS", "CREDIT", "DEBIT", "ECHECK", "AIRBNB", "BANK_TRANSFER", "CREDIT_NOTE", "VOUCHER", "CHECK", "OTHER"];
                            readonly examples: readonly ["RECORDED_CASH"];
                            readonly description: "`RECORDED_CASH` `STRIPE` `AMARYLLIS` `CREDIT` `DEBIT` `ECHECK` `AIRBNB` `BANK_TRANSFER` `CREDIT_NOTE` `VOUCHER` `CHECK` `OTHER`";
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                        };
                    };
                    readonly required: readonly ["method"];
                };
                readonly amount: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                };
                readonly cancelledAt: {
                    readonly type: "string";
                    readonly format: "date";
                    readonly description: "Date of cancellation";
                    readonly examples: readonly ["2023-05-30T12:00:00.000Z"];
                };
                readonly note: {
                    readonly type: "string";
                    readonly examples: readonly ["Free text"];
                };
            };
            readonly required: readonly ["paymentId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Payment not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostAccountsIdCustomFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly customFields: {
                readonly type: "array";
                readonly description: "Custom Fields Array: all new fields";
                readonly items: {
                    readonly oneOf: readonly [{
                        readonly description: "Use when createing *options* customField: ```type:enum```\n This case required options arry in edition";
                        readonly type: "object";
                        readonly required: readonly ["isPublic", "key", "object", "options", "type"];
                        readonly properties: {
                            readonly isPublic: {
                                readonly type: "boolean";
                            };
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly object: {
                                readonly type: "string";
                                readonly enum: readonly ["listing", "reservation"];
                            };
                            readonly options: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["enum"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["isPublic", "key", "object", "type"];
                        readonly properties: {
                            readonly isPublic: {
                                readonly type: "boolean";
                            };
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly object: {
                                readonly type: "string";
                                readonly enum: readonly ["listing", "reservation"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["user", "boolean", "longtext", "date", "text", "time", "contact", "number"];
                            };
                        };
                    }];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "e.g. - Account id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly isPublic: {
                        readonly type: "boolean";
                    };
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly object: {
                        readonly type: "string";
                        readonly enum: readonly ["listing", "reservation"];
                        readonly description: "`listing` `reservation`";
                    };
                    readonly options: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                        readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostAdditionalFeesAccount: {
    readonly body: {
        readonly type: "object";
        readonly description: "When configuring the platform and sources fields, user discretion should be taken to choose platforms or sources that are integrated to the account/listing";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Define an internal name for your additional fee";
                readonly examples: readonly ["AB"];
            };
            readonly type: {
                readonly description: "Additional fee type.\n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
                readonly type: "string";
                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                readonly examples: readonly ["FOOD"];
            };
            readonly value: {
                readonly description: "1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                readonly type: "integer";
                readonly examples: readonly [5];
            };
            readonly isPercentage: {
                readonly description: "Sets wether 'value' should be a fixed amount or percentage";
                readonly type: "boolean";
            };
            readonly targetFee: {
                readonly description: "1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. required when 'isPercentage' is 'true'";
                readonly type: "string";
                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
            };
            readonly multiplier: {
                readonly description: "1. Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.";
                readonly type: "string";
                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                readonly examples: readonly ["PER_GUEST"];
            };
            readonly isSyncToSupportedChannelsEnabled: {
                readonly type: "boolean";
                readonly description: "1. Sync fee to account or listing settings and all future reservations for supported booking channels. \n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
            };
            readonly isAutomated: {
                readonly type: "boolean";
                readonly description: "1. Indicates if there are booking channels in which the additional fee should be added automatically to reservations once the reservation arrives in Guesty,\n2. if set to 'true', you must configure at least one of 'allSources', 'automationSources', 'allPlatforms', 'automationPlatforms', 'allRUSources', 'RUSources'";
            };
            readonly allPlatforms: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future reservations in Guesty for all booking channels,\n2. can not be 'true' when 'isAutomated' is 'false',\n3. can not be 'true' when 'automationPlatforms' is not empty";
            };
            readonly automationPlatforms: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future reservations in Guesty for specified booking channels,\n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allPlatforms' is 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                };
            };
            readonly allSources: {
                readonly type: "boolean";
                readonly description: "1. if 'true' then the additional fee will be added to all future reservations for all manual sources,\n2. can not be 'true' when 'isAutomated' is 'false',\n3. can not be 'true' when 'automationSources' is not empty";
            };
            readonly automationSources: {
                readonly type: "array";
                readonly description: "1. additional fee will be added to future reservations in Guesty for specified manual sources,\n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allSources' is 'true'";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly allRUSources: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future rentals united reservations in Guesty for all rentals united booking channels,\n2. can not be 'true' when 'isAutomated' is 'false'\n3. can not be 'true' when 'RUSources' is not empty,\n4. when 'true' then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
            };
            readonly RUSources: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future rentals united reservations in Guesty for specified rentals united booking channels, \n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allRUSources' is 'true',\n4. when not empty then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                };
            };
            readonly isDeducted: {
                readonly type: "boolean";
                readonly description: "[Beta] isDeducted must be [false] without isBundled being [true] when either isSyncToSupportedChannelsEnabled, isAutomated are [true].";
            };
            readonly isBundled: {
                readonly type: "boolean";
                readonly description: "[Beta] Bundle as part of accommodation fare";
            };
            readonly deductedConfiguration: {
                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                readonly type: "object";
                readonly properties: {
                    readonly isApplyToAll: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                        readonly type: "boolean";
                    };
                    readonly sources: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly channels: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly channelConfigurations: {
                readonly description: "[Beta] Settings overrides per channel";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly channel: {
                            readonly description: "[Beta] Channel name";
                            readonly type: "string";
                        };
                        readonly isEnabled: {
                            readonly description: "[Beta] Is sync to channel enabled";
                            readonly type: "boolean";
                        };
                        readonly type: {
                            readonly description: "[Beta] Fee Type in the channel";
                            readonly type: "string";
                            readonly examples: readonly ["FOOD"];
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                            readonly minimum: 0;
                            readonly examples: readonly [5];
                        };
                        readonly isPercentage: {
                            readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                            readonly type: "boolean";
                        };
                        readonly multiplier: {
                            readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'";
                            readonly type: "string";
                            readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            readonly examples: readonly ["PER_GUEST"];
                        };
                        readonly targetFee: {
                            readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'";
                            readonly type: "string";
                            readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        };
                        readonly isBundled: {
                            readonly type: "boolean";
                            readonly description: "[Beta] Include fee in the accommodation fare";
                        };
                    };
                    readonly required: readonly ["channel", "value", "isPercentage"];
                };
            };
            readonly sourcesConfigurations: {
                readonly description: "[Beta] Settings overrides per groups of manual sources";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly sources: {
                            readonly type: "array";
                            readonly items: {
                                readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                readonly type: "string";
                            };
                            readonly minItems: 1;
                        };
                        readonly type: {
                            readonly description: "[Beta] Fee type";
                            readonly type: "string";
                            readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                            readonly examples: readonly ["FOOD"];
                        };
                        readonly isPercentage: {
                            readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                            readonly type: "boolean";
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                            readonly minimum: 0;
                            readonly examples: readonly [5];
                        };
                        readonly multiplier: {
                            readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.";
                            readonly type: "string";
                            readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            readonly examples: readonly ["PER_GUEST"];
                        };
                        readonly targetFee: {
                            readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'";
                            readonly type: "string";
                            readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        };
                        readonly isBundled: {
                            readonly type: "boolean";
                            readonly description: "[Beta] Include fee in the accommodation fare";
                        };
                    };
                    readonly required: readonly ["value", "isPercentage", "sources"];
                };
            };
        };
        readonly required: readonly ["name", "type", "value", "isPercentage"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                    readonly description: "`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                };
                readonly value: {
                    readonly type: "integer";
                };
                readonly targetFee: {
                    readonly type: "string";
                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                    readonly description: "`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                };
                readonly automationSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly automationPlatforms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                        readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                    };
                };
                readonly RUSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                        readonly description: "`agoda` `bookingCom` `despegar` `expedia` `hostelworld` `homeAway`";
                    };
                };
                readonly allSources: {
                    readonly type: "boolean";
                };
                readonly isDeducted: {
                    readonly type: "boolean";
                };
                readonly isBundled: {
                    readonly type: "boolean";
                };
                readonly allPlatforms: {
                    readonly type: "boolean";
                };
                readonly allRUSources: {
                    readonly type: "boolean";
                };
                readonly isAutomated: {
                    readonly type: "boolean";
                };
                readonly isPercentage: {
                    readonly type: "boolean";
                };
                readonly multiplier: {
                    readonly type: "string";
                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                    readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                };
                readonly isSyncToSupportedChannelsEnabled: {
                    readonly type: "boolean";
                };
                readonly deductedConfiguration: {
                    readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                    readonly type: "object";
                    readonly properties: {
                        readonly isApplyToAll: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                            readonly type: "boolean";
                        };
                        readonly sources: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly channels: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly channelConfigurations: {
                    readonly description: "[Beta] Settings overrides per channel";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly channel: {
                                readonly description: "[Beta] Channel name";
                                readonly type: "string";
                            };
                            readonly isEnabled: {
                                readonly description: "[Beta] Is sync to channel enabled";
                                readonly type: "boolean";
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee Type in the channel";
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly multiplier: {
                                readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["channel", "value", "isPercentage"];
                    };
                };
                readonly sourcesConfigurations: {
                    readonly description: "[Beta] Settings overrides per groups of manual sources";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly sources: {
                                readonly type: "array";
                                readonly items: {
                                    readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                    readonly type: "string";
                                };
                                readonly minItems: 1;
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee type\n\n`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                                readonly type: "string";
                                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly multiplier: {
                                readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["value", "isPercentage", "sources"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostAdditionalFeesInquiriesInquiryidUpsells: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly ratePlanIds: {
                readonly type: "array";
                readonly description: "Inquiry rate plan IDs to add upsell to the quote of each of them";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Inquiry rate plan id";
                    readonly examples: readonly ["6697b104831bfa39c5bacfc4"];
                };
            };
            readonly additionalFeeIds: {
                readonly type: "array";
                readonly description: "Additional fee ids. Add ID multiple times if you want to add the same upsell fee multiple times. To remove the upsell fee exclude the ID from an array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Additional fee id";
                    readonly examples: readonly ["668bc9f9afa7b3000cbe34c9"];
                };
            };
        };
        readonly required: readonly ["additionalFeeIds"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly inquiryId: {
                    readonly type: "string";
                    readonly examples: readonly ["6697817a90212b000e24375a"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Inquiry id";
                };
            };
            readonly required: readonly ["inquiryId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Inquiry with rate plans with quotes with added upsell fees in invoice items";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostAdditionalFeesListingListingid: {
    readonly body: {
        readonly type: "object";
        readonly description: "When configuring the platform and sources fields, user discretion should be taken to choose platforms or sources that are integrated to the account/listing";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Define an internal name for your additional fee";
                readonly examples: readonly ["AB"];
            };
            readonly type: {
                readonly description: "Additional fee type.\n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
                readonly type: "string";
                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                readonly examples: readonly ["EARLY_CHECK_IN"];
            };
            readonly value: {
                readonly description: "1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                readonly type: "integer";
                readonly examples: readonly [5];
            };
            readonly isPercentage: {
                readonly description: "Sets wether 'value' should be a fixed amount or percentage";
                readonly type: "boolean";
            };
            readonly targetFee: {
                readonly description: "1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. required when 'isPercentage' is 'true'";
                readonly type: "string";
                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
            };
            readonly multiplier: {
                readonly description: "1. Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.";
                readonly type: "string";
                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                readonly examples: readonly ["PER_GUEST"];
            };
            readonly isSyncToSupportedChannelsEnabled: {
                readonly type: "boolean";
                readonly description: "1. Sync fee to account or listing settings and all future reservations for supported booking channels. \n !!! Not all additional fee types can be synced with channels. If you select the additional fee type which cannot be synced with channels, and 'isSyncToSupportedChannelsEnabled' is [true] you will receive a validation error";
            };
            readonly isAutomated: {
                readonly type: "boolean";
                readonly description: "1. Indicates if there are booking channels in which the additional fee should be added automatically to reservations once the reservation arrives in Guesty,\n2. if set to 'true', you must configure at least one of 'allSources', 'automationSources', 'allPlatforms', 'automationPlatforms', 'allRUSources', 'RUSources'";
            };
            readonly allPlatforms: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future reservations in Guesty for all booking channels,\n2. can not be 'true' when 'isAutomated' is 'false',\n3. can not be 'true' when 'automationPlatforms' is not empty";
            };
            readonly automationPlatforms: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future reservations in Guesty for specified booking channels,\n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allPlatforms' is 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                };
            };
            readonly allSources: {
                readonly type: "boolean";
                readonly description: "1. if 'true' then the additional fee will be added to all future reservations for all manual sources,\n2. can not be 'true' when 'isAutomated' is 'false',\n3. can not be 'true' when 'automationSources' is not empty";
            };
            readonly automationSources: {
                readonly type: "array";
                readonly description: "1. additional fee will be added to future reservations in Guesty for specified manual sources,\n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allSources' is 'true'";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly allRUSources: {
                readonly type: "boolean";
                readonly description: "1. If 'true' then the additional fee will be added to all future rentals united reservations in Guesty for all rentals united booking channels,\n2. can not be 'true' when 'isAutomated' is 'false'\n3. can not be 'true' when 'RUSources' is not empty,\n4. when 'true' then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
            };
            readonly RUSources: {
                readonly type: "array";
                readonly description: "1. Additional fee will be added to future rentals united reservations in Guesty for specified rentals united booking channels, \n2. can not contain values when 'isAutomated' is 'false',\n3. can not contain values when 'allRUSources' is 'true',\n4. when not empty then 'rentalsUnited' must be included in 'automationPlatforms' or 'allPlatforms' must be 'true'";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                };
            };
            readonly isDeducted: {
                readonly type: "boolean";
                readonly description: "[Beta] isDeducted must be [false] without isBundled being [true] when either isSyncToSupportedChannelsEnabled, isAutomated are [true].";
            };
            readonly isBundled: {
                readonly type: "boolean";
                readonly description: "[Beta] Bundle as part of accommodation fare";
            };
            readonly deductedConfiguration: {
                readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                readonly type: "object";
                readonly properties: {
                    readonly isApplyToAll: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                        readonly type: "boolean";
                    };
                    readonly sources: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly channels: {
                        readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly channelConfigurations: {
                readonly description: "[Beta] Settings overrides per channel";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly channel: {
                            readonly description: "[Beta] Channel name";
                            readonly type: "string";
                        };
                        readonly isEnabled: {
                            readonly description: "[Beta] Is sync to channel enabled";
                            readonly type: "boolean";
                        };
                        readonly type: {
                            readonly description: "[Beta] Fee Type in the channel";
                            readonly type: "string";
                            readonly examples: readonly ["EARLY_CHECK_IN"];
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                            readonly minimum: 0;
                            readonly examples: readonly [5];
                        };
                        readonly isPercentage: {
                            readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                            readonly type: "boolean";
                        };
                        readonly multiplier: {
                            readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'";
                            readonly type: "string";
                            readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            readonly examples: readonly ["PER_GUEST"];
                        };
                        readonly targetFee: {
                            readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'";
                            readonly type: "string";
                            readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        };
                        readonly isBundled: {
                            readonly type: "boolean";
                            readonly description: "[Beta] Include fee in the accommodation fare";
                        };
                    };
                    readonly required: readonly ["channel", "value", "isPercentage"];
                };
            };
            readonly sourcesConfigurations: {
                readonly description: "[Beta] Settings overrides per groups of manual sources";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly sources: {
                            readonly type: "array";
                            readonly items: {
                                readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                readonly type: "string";
                            };
                            readonly minItems: 1;
                        };
                        readonly type: {
                            readonly description: "[Beta] Fee type";
                            readonly type: "string";
                            readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                            readonly examples: readonly ["EARLY_CHECK_IN"];
                        };
                        readonly isPercentage: {
                            readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                            readonly type: "boolean";
                        };
                        readonly value: {
                            readonly type: "number";
                            readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                            readonly minimum: 0;
                            readonly examples: readonly [5];
                        };
                        readonly multiplier: {
                            readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.";
                            readonly type: "string";
                            readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            readonly examples: readonly ["PER_GUEST"];
                        };
                        readonly targetFee: {
                            readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'";
                            readonly type: "string";
                            readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                        };
                        readonly isBundled: {
                            readonly type: "boolean";
                            readonly description: "[Beta] Include fee in the accommodation fare";
                        };
                    };
                    readonly required: readonly ["value", "isPercentage", "sources"];
                };
            };
        };
        readonly required: readonly ["name", "type", "value", "isPercentage"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["5c2cc4be46cb1e00226a5b6e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                    readonly description: "`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                };
                readonly value: {
                    readonly type: "integer";
                };
                readonly listingId: {
                    readonly type: "string";
                };
                readonly targetFee: {
                    readonly type: "string";
                    readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                    readonly description: "`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                };
                readonly automationSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly automationPlatforms: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "airbnb", "airbnb2", "rentalsUnited", "bookingCom", "expedia", "homeAway", "agoda", "tripAdvisor", "homeaway2", "siteMinder", "bookingPal"];
                        readonly description: "`manual` `airbnb` `airbnb2` `rentalsUnited` `bookingCom` `expedia` `homeAway` `agoda` `tripAdvisor` `homeaway2` `siteMinder` `bookingPal`";
                    };
                };
                readonly RUSources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["agoda", "bookingCom", "despegar", "expedia", "hostelworld", "homeAway"];
                        readonly description: "`agoda` `bookingCom` `despegar` `expedia` `hostelworld` `homeAway`";
                    };
                };
                readonly allSources: {
                    readonly type: "boolean";
                };
                readonly allPlatforms: {
                    readonly type: "boolean";
                };
                readonly allRUSources: {
                    readonly type: "boolean";
                };
                readonly isAutomated: {
                    readonly type: "boolean";
                };
                readonly isPercentage: {
                    readonly type: "boolean";
                };
                readonly multiplier: {
                    readonly type: "string";
                    readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                    readonly description: "`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                };
                readonly isSyncToSupportedChannelsEnabled: {
                    readonly type: "boolean";
                };
                readonly isBundled: {
                    readonly type: "boolean";
                    readonly description: "Bundle as part of accommodation fare";
                };
                readonly deductedConfiguration: {
                    readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed per manual source/channel configuration";
                    readonly type: "object";
                    readonly properties: {
                        readonly isApplyToAll: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for all reservations";
                            readonly type: "boolean";
                        };
                        readonly sources: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific manual sources. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly channels: {
                            readonly description: "[Beta] Deduct the fee amount from accommodation fare once the reservation is confirmed for reservations from specific channels. Will be not counted when \"isApplyToAll\" is \"true\"";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly channelConfigurations: {
                    readonly description: "[Beta] Settings overrides per channel";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly channel: {
                                readonly description: "[Beta] Channel name";
                                readonly type: "string";
                            };
                            readonly isEnabled: {
                                readonly description: "[Beta] Is sync to channel enabled";
                                readonly type: "boolean";
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee Type in the channel";
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly multiplier: {
                                readonly description: "[Beta] 1. Sets the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false',\n2. Its required when 'isPercentage' is 'false'\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["channel", "value", "isPercentage"];
                    };
                };
                readonly sourcesConfigurations: {
                    readonly description: "[Beta] Settings overrides per groups of manual sources";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly sources: {
                                readonly type: "array";
                                readonly items: {
                                    readonly description: "[Beta] List of manual sources to which the fee can be automatically applied.";
                                    readonly type: "string";
                                };
                                readonly minItems: 1;
                            };
                            readonly type: {
                                readonly description: "[Beta] Fee type\n\n`ADDITIONAL_BED` `AIR_CONDITIONING` `EARLY_CHECK_IN` `LATE_CHECK_IN` `BABY_BED` `CLEANING` `CLUB_CARD` `CONCIERGE` `EARLY_CHECKOUT` `LATE_CHECKOUT` `DEPOSIT` `ELECTRICITY` `FOOD` `HEATING` `INTERNET` `LAUNDRY` `LINENS` `TOWELS` `MANAGEMENT` `OIL` `PARKING` `PET` `POOL` `POOL_HEATING` `RESORT` `SERVICE` `TOILETRIES` `TOUR` `TRANSPORTATION` `CAR_RENTAL` `WATER` `WOOD` `TRANSFER` `HOUSEKEEPING` `INSURANCE` `COMMUNITY` `CREDIT_CARD_PROCESSING_FEE` `DAMAGE_WAIVER` `VIP_SERVICES` `PAYMENT_FEE` `ADDITIONAL_CHARGE` `MISCELLANEOUS` `SHIPPING` `VALET` `ACTIVITIES` `FLIGHTS` `GIFT_BASKET` `SPA` `CHEF` `MEET_AND_GREET` `DOCK_FEE` `UTILITY_FEE` `HOT_TUB` `BOOKING_FEE` `BREAKFAST` `BEVERAGE` `MEAL` `WELLNESS` `MINIBAR` `BUSINESS_CENTER` `WIFI` `GUEST_SERVICE` `COMMISSION_CHARGE` `EQUIPMENT_RENTAL` `RESERVATION_FEE` `DAMAGE_CHARGE` `HOMEOWNERS_ASSOCIATION` `GOLF_CART_RENTAL`";
                                readonly type: "string";
                                readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL"];
                            };
                            readonly isPercentage: {
                                readonly description: "[Beta] Sets whether 'value' should be a fixed amount or percentage";
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "[Beta] 1. Must be bigger than 0,\n2. When 'isPercentage' is 'true' then must be smaller or equal to 100";
                                readonly minimum: 0;
                            };
                            readonly multiplier: {
                                readonly description: "1. [Beta] Specifies the factor by which the 'value' will be multiplied in the additional fee amount calculation when 'isPercentage' is 'false'. \\n2. This is required when 'isPercentage' is 'false'.\n\n`PER_NIGHT` `PER_GUEST` `PER_GUEST_PER_NIGHT` `PER_STAY`";
                                readonly type: "string";
                                readonly enum: readonly ["PER_NIGHT", "PER_GUEST", "PER_GUEST_PER_NIGHT", "PER_STAY"];
                            };
                            readonly targetFee: {
                                readonly description: "[Beta] 1. The fee to use for the additional fee amount calculation when 'isPercentage' is 'true',\n2. It's required when 'isPercentage' is 'true'\n\n`PAYOUT` `CLEANING_FEE` `ACCOMMODATION_FARE`";
                                readonly type: "string";
                                readonly enum: readonly ["PAYOUT", "CLEANING_FEE", "ACCOMMODATION_FARE"];
                            };
                            readonly isBundled: {
                                readonly type: "boolean";
                                readonly description: "[Beta] Include fee in the accommodation fare";
                            };
                        };
                        readonly required: readonly ["value", "isPercentage", "sources"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostAdditionalFeesQuotesQuoteidAmount: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly description: "Additional fee ids";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Additional fee id";
                    readonly examples: readonly ["668cf62e6a3556000dfc3aa5"];
                };
            };
        };
        readonly required: readonly ["ids"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly quoteId: {
                    readonly type: "string";
                    readonly examples: readonly ["6697817a90212b000e24375a"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Quote id";
                };
            };
            readonly required: readonly ["quoteId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Additional fee id";
                    };
                    readonly amount: {
                        readonly type: "number";
                        readonly description: "Additional fee amount";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostCommunicationConversationsConversationidPosts: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly module: {
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly description: "`sms`, `email`, `note`, `log`, `whatsapp`, `airbnb2`";
                        readonly examples: readonly ["note"];
                    };
                };
                readonly required: readonly ["type"];
            };
            readonly body: {
                readonly type: "string";
                readonly description: "The message itself";
                readonly examples: readonly ["This is a new note"];
            };
            readonly sentBy: {
                readonly type: "string";
                readonly description: "`host`, `guest`, default: `host`";
                readonly examples: readonly ["host"];
            };
        };
        readonly required: readonly ["module", "body"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly conversationId: {
                    readonly type: "string";
                    readonly examples: readonly ["615997c2e74f61003015ab02"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Conversation Id";
                };
            };
            readonly required: readonly ["conversationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "number";
                    readonly examples: readonly [200];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly module: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly to: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly cc: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly bcc: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly templateValues: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly examples: readonly ["note"];
                                    };
                                };
                            };
                            readonly from: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly examples: readonly ["user"];
                                    };
                                    readonly fullName: {
                                        readonly type: "string";
                                        readonly examples: readonly ["COM - postman"];
                                    };
                                };
                            };
                            readonly isFromMigration: {
                                readonly type: "boolean";
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly examples: readonly ["61643413c9cf7a002d929325"];
                            };
                            readonly body: {
                                readonly type: "string";
                                readonly examples: readonly ["This is new message(COM postman)"];
                            };
                            readonly attachments: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly conversationId: {
                                readonly type: "string";
                                readonly examples: readonly ["615997c2e74f61003015ab02"];
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly examples: readonly ["2021-10-11T12:54:43.248Z"];
                            };
                            readonly __v: {
                                readonly type: "number";
                                readonly examples: readonly [0];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostCommunicationConversationsConversationidSendMessage: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly module: {
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly description: "`sms`, `email`, `note`, `log`, `whatsapp`, `airbnb2`";
                        readonly examples: readonly ["email"];
                    };
                    readonly to: {
                        readonly type: "array";
                        readonly items: {};
                        readonly examples: readonly ["[example@gmail.com]"];
                    };
                    readonly cc: {
                        readonly type: "array";
                        readonly items: {};
                        readonly examples: readonly ["[example@gmail.com]"];
                    };
                    readonly bcc: {
                        readonly type: "array";
                        readonly items: {};
                        readonly examples: readonly ["[example@gmail.com]"];
                    };
                };
                readonly required: readonly ["type"];
            };
            readonly body: {
                readonly type: "string";
                readonly description: "The message itself";
                readonly examples: readonly ["This is a new message"];
            };
        };
        readonly required: readonly ["module", "body"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly conversationId: {
                    readonly type: "string";
                    readonly examples: readonly ["615997c2e74f61003015ab02"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Conversation Id";
                };
            };
            readonly required: readonly ["conversationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "number";
                    readonly examples: readonly [200];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly module: {
                            readonly type: "object";
                            readonly properties: {
                                readonly to: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly cc: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly bcc: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly templateValues: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly examples: readonly ["note"];
                                };
                            };
                        };
                        readonly from: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly examples: readonly ["user"];
                                };
                                readonly fullName: {
                                    readonly type: "string";
                                    readonly examples: readonly ["COM - postman"];
                                };
                            };
                        };
                        readonly isFromMigration: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly examples: readonly ["61643413c9cf7a002d929325"];
                        };
                        readonly body: {
                            readonly type: "string";
                            readonly examples: readonly ["This is new message(COM postman)"];
                        };
                        readonly attachments: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly conversationId: {
                            readonly type: "string";
                            readonly examples: readonly ["615997c2e74f61003015ab02"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2021-10-11T12:54:43.248Z"];
                        };
                        readonly __v: {
                            readonly type: "number";
                            readonly examples: readonly [0];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostContacts: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly firstName: {
                readonly type: "string";
                readonly examples: readonly ["Elad"];
            };
            readonly lastName: {
                readonly type: "string";
                readonly examples: readonly ["Kremer"];
            };
            readonly fullName: {
                readonly type: "string";
                readonly examples: readonly ["Elad Kremer"];
            };
            readonly nickName: {
                readonly type: "string";
                readonly examples: readonly ["My Nickname"];
            };
            readonly title: {
                readonly type: "string";
                readonly examples: readonly ["My Title"];
            };
            readonly company: {
                readonly type: "string";
                readonly examples: readonly ["My Company"];
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly regular: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                };
            };
            readonly emails: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["['aaaa@darkforest.com']"];
            };
            readonly phones: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["['+97777777777777']"];
            };
            readonly preferredContactMethod: {
                readonly type: "string";
                readonly enum: readonly ["email", "sms", "call"];
                readonly examples: readonly ["email"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "Primary email for the contact";
                readonly examples: readonly ["asdasdasdasd@darkforest.com"];
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Primary phone for the contact";
                readonly examples: readonly ["+97777777777777"];
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Notes about the user";
                readonly examples: readonly ["Some notes"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly nickName: {
                    readonly type: "string";
                    readonly examples: readonly ["My Nickname"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["My Title"];
                };
                readonly company: {
                    readonly type: "string";
                    readonly examples: readonly ["My Company"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['aaaa@darkforest.com']"];
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['+97777777777777']"];
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["email", "sms", "call"];
                    readonly examples: readonly ["email"];
                    readonly description: "`email` `sms` `call`";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email for the contact";
                    readonly examples: readonly ["asdasdasdasd@darkforest.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone for the contact";
                    readonly examples: readonly ["+97777777777777"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Notes about the user";
                    readonly examples: readonly ["Some notes"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostGuestsIdPaymentMethods: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Create payment method with Stripe token from tokenization process.";
            readonly properties: {
                readonly stripeCardToken: {
                    readonly type: "string";
                    readonly description: "ID from Stripe payment method";
                    readonly examples: readonly ["pm_..."];
                };
                readonly skipSetupIntent: {
                    readonly type: "boolean";
                    readonly description: "TRUE if credit card was collected with setup_intent performed on the frontend";
                    readonly default: false;
                    readonly examples: readonly [false];
                };
                readonly paymentProviderId: {
                    readonly type: "string";
                    readonly description: "The payment processing account Id used in the tokenization process";
                    readonly default: any;
                    readonly examples: readonly ["5fe4b21675087f01a3c5ab5b"];
                };
                readonly reservationId: {
                    readonly type: "string";
                    readonly description: "Reservation ID";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly reuse: {
                    readonly type: "boolean";
                    readonly description: "Allow this payment method for reusage in other guest's reservations";
                    readonly default: false;
                    readonly examples: readonly [false];
                };
            };
            readonly required: readonly ["stripeCardToken"];
        }, {
            readonly description: "Create payment method using the _id received from Guesty's [credit card tokenization process](https://open-api-docs.guesty.com/docs/tokenizing-payment-methods)";
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "_id from tokenization process response";
                    readonly examples: readonly ["6265d1b6a08a2710e00057b82"];
                };
                readonly paymentProviderId: {
                    readonly type: "string";
                    readonly description: "The payment processing account Id used in the tokenization process";
                    readonly default: any;
                    readonly examples: readonly ["5fe4b21675087f01a3c5ab5b"];
                };
                readonly reservationId: {
                    readonly type: "string";
                    readonly description: "Reservation ID";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly reuse: {
                    readonly type: "boolean";
                    readonly description: "Allow this payment method for reusage in other guest's reservations";
                    readonly default: false;
                    readonly examples: readonly [false];
                };
            };
            readonly required: readonly ["_id"];
        }];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guest ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
};
declare const PostHooks: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: true;
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostIntegrations: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly platform: {
                readonly description: "Integration name";
                readonly type: "string";
                readonly examples: readonly ["manual"];
            };
        };
        readonly required: readonly ["platform"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["5958c7e5884e961000817799"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly properties: {
                        readonly credentials: {
                            readonly type: "object";
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly expiresAt: {
                                    readonly type: "integer";
                                };
                                readonly accessToken: {
                                    readonly type: "string";
                                };
                                readonly refreshToken: {
                                    readonly type: "string";
                                };
                                readonly lastForceRefresh: {
                                    readonly type: "string";
                                    readonly description: "date";
                                };
                            };
                        };
                        readonly forwardEmails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly all: {
                                    readonly type: "boolean";
                                    readonly default: true;
                                };
                                readonly emails: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date";
                        };
                    };
                    readonly description: "Only if platform is airbnb";
                };
                readonly forwardEmails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly all: {
                            readonly type: "boolean";
                            readonly default: true;
                        };
                        readonly emails: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Status of connection";
                };
                readonly platform: {
                    readonly type: "string";
                };
                readonly listings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Listing details";
                        readonly additionalProperties: true;
                    };
                };
                readonly complexes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Complex details";
                        readonly additionalProperties: true;
                    };
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly examples: readonly ["naama"];
                };
                readonly channelId: {
                    readonly type: "string";
                };
                readonly activatedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly disconnectedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly proxyEmail: {
                    readonly type: "string";
                };
                readonly incomingEmail: {
                    readonly type: "string";
                };
                readonly externalAccountId: {
                    readonly type: "string";
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "External ID";
                    readonly examples: readonly ["naama@user.guesty.com"];
                };
                readonly companyName: {
                    readonly type: "string";
                };
                readonly fetchRequests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly fetchAllListings: {
                                readonly type: "boolean";
                            };
                            readonly externalListingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly finishedTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                    readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                };
                readonly migration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                            readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                        };
                        readonly createTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly updateTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly finishedTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly steps: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Step details";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly discrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly discrepancyResolution: {
                            readonly type: "string";
                            readonly enum: readonly ["GUESTY", "AIRBNB"];
                            readonly description: "`GUESTY` `AIRBNB`";
                        };
                        readonly listingQuantityDiscrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly error: {
                            readonly type: "object";
                            readonly properties: {
                                readonly at: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly message: {
                                    readonly type: "string";
                                };
                                readonly raw: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                        };
                        readonly isRollingBack: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                    };
                };
                readonly userId: {
                    readonly type: "string";
                    readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Owner";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly description: "TripAdvisor details";
                    readonly additionalProperties: true;
                };
                readonly homeaway2: {
                    readonly type: "object";
                    readonly description: "Homeaway details";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly properties: {
                        readonly legalEntityId: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "BookingCom details";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly missingStep: {
                    readonly type: "string";
                };
                readonly steps: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                readonly description: "`COMPLETED` `IN_PROGRESS`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly newIntegrationBackup: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly threadIdsMigrated: {
                    readonly type: "boolean";
                };
                readonly isDeleted: {
                    readonly type: "boolean";
                };
                readonly deletedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly description: "full address";
                        readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                    };
                    readonly lng: {
                        readonly type: "number";
                        readonly examples: readonly [34.8202173];
                    };
                    readonly lat: {
                        readonly type: "number";
                        readonly examples: readonly [32.0695525];
                    };
                    readonly street: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                };
            };
            readonly title: {
                readonly type: "string";
                readonly examples: readonly ["Example listing title"];
            };
            readonly origin: {
                readonly type: "string";
                readonly description: "Marks the origin platform that the listing was migrated from";
                readonly examples: readonly ["company_name"];
            };
            readonly originId: {
                readonly type: "string";
                readonly description: "Marks the origin platform listing ID";
                readonly examples: readonly ["67890234"];
            };
            readonly accommodates: {
                readonly type: "number";
                readonly default: 2;
            };
            readonly bathrooms: {
                readonly type: "number";
            };
            readonly minimumAge: {
                readonly type: "number";
            };
            readonly prices: {
                readonly type: "object";
                readonly properties: {
                    readonly guestsIncludedInRegularFee: {
                        readonly type: "number";
                    };
                    readonly extraPersonFee: {
                        readonly type: "number";
                    };
                    readonly basePrice: {
                        readonly type: "number";
                    };
                    readonly basePriceUSD: {
                        readonly type: "number";
                    };
                    readonly monthlyPriceFactor: {
                        readonly type: "number";
                    };
                    readonly weeklyPriceFactor: {
                        readonly type: "number";
                    };
                    readonly weekendBasePrice: {
                        readonly type: "number";
                    };
                    readonly securityDepositFee: {
                        readonly type: "number";
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly cleaningFee: {
                        readonly type: "number";
                    };
                };
            };
            readonly terms: {
                readonly type: "object";
                readonly properties: {
                    readonly minNights: {
                        readonly type: "number";
                        readonly default: 1;
                    };
                    readonly maxNights: {
                        readonly type: "number";
                        readonly default: 45;
                    };
                    readonly cancellation: {
                        readonly type: "string";
                    };
                };
            };
            readonly timezone: {
                readonly type: "string";
                readonly default: "Asia/Jerusalem";
            };
            readonly pictures: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly large: {
                            readonly type: "string";
                        };
                        readonly caption: {
                            readonly type: "string";
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                        readonly original: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly examples: readonly [39516];
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                    };
                };
            };
            readonly propertyType: {
                readonly type: "string";
                readonly description: "property type\n\nDefault: `Apartment`";
                readonly enum: readonly ["Apartment", "House", "Loft", "Boat", "Camper/RV", "Condominium", "Chalet", "Bed & Breakfast", "Villa", "Tent", "Other", "Cabin", "Townhouse", "Bungalow", "Hut"];
                readonly default: "Apartment";
            };
            readonly roomType: {
                readonly type: "string";
                readonly description: "room type\n\nDefault: `Entire home/apt`";
                readonly enum: readonly ["Entire home/apt", "Apartment", "Quadruple", "Suite", "Triple", "Studio", "Family", "Dormitory room", "Bungalow", "Chalet", "Holiday Home", "Villa", "Mobile home", "Tent"];
                readonly default: "Entire home/apt";
            };
            readonly defaultCheckInTime: {
                readonly type: "string";
                readonly default: "15:00";
            };
            readonly defaultCheckOutTime: {
                readonly type: "string";
                readonly default: "10:00";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["SINGLE", "MTL"];
                readonly description: "Listing type";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly pms: {
                readonly type: "object";
                readonly properties: {
                    readonly active: {
                        readonly type: "boolean";
                    };
                    readonly automation: {
                        readonly type: "object";
                        readonly properties: {
                            readonly autoList: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly active: {
                                        readonly type: "boolean";
                                    };
                                    readonly config: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly inbox: {
                        readonly type: "object";
                        readonly properties: {
                            readonly customSignature: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cleaningStatus: {
                        readonly type: "object";
                        readonly properties: {
                            readonly value: {
                                readonly type: "string";
                                readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly examples: readonly ["2019-08-24T14:15:22Z"];
                            };
                        };
                    };
                    readonly paymentProcessing: {
                        readonly type: "object";
                        readonly properties: {
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly paymentProviders: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly stripe: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly active: {
                                                readonly type: "boolean";
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                            };
                                            readonly accountName: {
                                                readonly type: "string";
                                            };
                                            readonly defaultCurrency: {
                                                readonly type: "string";
                                            };
                                            readonly syncedAt: {
                                                readonly type: "string";
                                                readonly format: "date";
                                            };
                                            readonly payload: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly livemode: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly token_type: {
                                                        readonly type: "string";
                                                    };
                                                    readonly stripe_publishable_key: {
                                                        readonly type: "string";
                                                    };
                                                    readonly stripe_user_id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly scope: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly autoPayments: {
                        readonly type: "object";
                        readonly properties: {
                            readonly policy: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly owners: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly default: readonly [];
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "Listing nickname";
            };
            readonly amenities: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly mtl: {
                readonly description: "In case if you are going to create a listing with the child unit, please fill in 'mtl' object";
                readonly type: "object";
                readonly properties: {
                    readonly aas: {
                        readonly type: "string";
                        readonly description: "Can be one of the following: 'oc'(on create), 'm'(manual), 'bc'(before check-in)";
                        readonly examples: readonly ["bc"];
                    };
                    readonly aao: {
                        readonly type: readonly ["string", "null"];
                        readonly description: "Define the automatic assignment rules for the selected multi unit. Note that it is not relevant for listings that have manual assignment logic (aas: 'm'). Can be one of the following: 'f'(first free by unit's nickname), 'r'(randomly)";
                        readonly examples: readonly ["f"];
                    };
                    readonly bc: {
                        readonly type: readonly ["number", "null"];
                        readonly description: "Number of days before check-in";
                    };
                    readonly c: {
                        readonly type: readonly ["array", "null"];
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Array with children ids";
                    };
                    readonly p: {
                        readonly type: readonly ["string", "null"];
                        readonly description: "Parent id";
                    };
                    readonly hdb4: {
                        readonly type: readonly ["number", "null"];
                        readonly description: "Highlighting days before";
                    };
                    readonly lmcn: {
                        readonly type: readonly ["boolean", "null"];
                        readonly description: "True if the availability should be calculated according to max consecutive nights. Otherwise it will be calculated according to the number of vacant sub-unit";
                    };
                };
            };
            readonly manageSubunitPictures: {
                readonly type: "boolean";
            };
            readonly isListed: {
                readonly type: "boolean";
            };
            readonly numberOfChildrenToCreate: {
                readonly type: "number";
            };
        };
        readonly required: readonly ["address", "title", "prices", "pictures", "type", "nickname", "terms"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                };
                readonly integrations: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["5958c7e5884e961000817799"];
                            };
                            readonly airbnb2: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly credentials: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly expiresAt: {
                                                readonly type: "integer";
                                            };
                                            readonly accessToken: {
                                                readonly type: "string";
                                            };
                                            readonly refreshToken: {
                                                readonly type: "string";
                                            };
                                            readonly lastForceRefresh: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "date";
                                    };
                                };
                                readonly description: "Only if platform is airbnb";
                            };
                            readonly forwardEmails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly all: {
                                        readonly type: "boolean";
                                        readonly default: true;
                                    };
                                    readonly emails: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Status of connection";
                            };
                            readonly platform: {
                                readonly type: "string";
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Listing details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly complexes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Complex details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly examples: readonly ["naama"];
                            };
                            readonly channelId: {
                                readonly type: "string";
                            };
                            readonly activatedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly disconnectedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly proxyEmail: {
                                readonly type: "string";
                            };
                            readonly incomingEmail: {
                                readonly type: "string";
                            };
                            readonly externalAccountId: {
                                readonly type: "string";
                            };
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "External ID";
                                readonly examples: readonly ["naama@user.guesty.com"];
                            };
                            readonly companyName: {
                                readonly type: "string";
                            };
                            readonly fetchRequests: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly fetchAllListings: {
                                            readonly type: "boolean";
                                        };
                                        readonly externalListingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                            readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                            };
                            readonly migration: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                        readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                    };
                                    readonly createTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly updateTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly finishedTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Step details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly discrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly discrepancyResolution: {
                                        readonly type: "string";
                                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                                        readonly description: "`GUESTY` `AIRBNB`";
                                    };
                                    readonly listingQuantityDiscrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly error: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly at: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly message: {
                                                readonly type: "string";
                                            };
                                            readonly raw: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly notes: {
                                        readonly type: "string";
                                    };
                                    readonly isRollingBack: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                            };
                            readonly userId: {
                                readonly type: "string";
                                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Owner";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly tripAdvisor: {
                                readonly type: "object";
                                readonly description: "TripAdvisor details";
                                readonly additionalProperties: true;
                            };
                            readonly homeaway2: {
                                readonly type: "object";
                                readonly description: "Homeaway details";
                                readonly additionalProperties: true;
                            };
                            readonly bookingCom: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly legalEntityId: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "BookingCom details";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly missingStep: {
                                readonly type: "string";
                            };
                            readonly steps: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                            readonly description: "`COMPLETED` `IN_PROGRESS`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly newIntegrationBackup: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly threadIdsMigrated: {
                                readonly type: "boolean";
                            };
                            readonly isDeleted: {
                                readonly type: "boolean";
                            };
                            readonly deletedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly isVirtual: {
                    readonly type: "boolean";
                };
                readonly nickname: {
                    readonly type: "string";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isListed: {
                    readonly type: "boolean";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly propertyType: {
                    readonly type: "string";
                };
                readonly roomType: {
                    readonly type: "string";
                };
                readonly bedType: {
                    readonly type: "string";
                };
                readonly accommodates: {
                    readonly type: "number";
                };
                readonly bedrooms: {
                    readonly type: "number";
                };
                readonly areaSquareFeet: {
                    readonly type: "number";
                };
                readonly address: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly publishedAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly defaultCheckInTime: {
                    readonly type: "string";
                };
                readonly defaultCheckOutTime: {
                    readonly type: "string";
                };
                readonly cleaning: {
                    readonly type: "object";
                    readonly properties: {
                        readonly defaultCleaningTime: {
                            readonly type: "string";
                        };
                        readonly instructions: {
                            readonly type: "string";
                        };
                    };
                };
                readonly cleaningStatus: {
                    readonly type: "object";
                    readonly properties: {
                        readonly value: {
                            readonly type: "string";
                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly large: {
                            readonly type: "string";
                        };
                        readonly caption: {
                            readonly type: "string";
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                        readonly original: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly examples: readonly [39516];
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                    };
                };
                readonly pictures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly regular: {
                                readonly type: "string";
                            };
                            readonly thumbnail: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly large: {
                                readonly type: "string";
                            };
                            readonly caption: {
                                readonly type: "string";
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                            readonly original: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly size: {
                                readonly type: "number";
                                readonly examples: readonly [39516];
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                        };
                    };
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly amenitiesNotIncluded: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly terms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly minNights: {
                            readonly type: "number";
                        };
                        readonly maxNights: {
                            readonly type: "number";
                        };
                        readonly cancellation: {
                            readonly type: "string";
                        };
                    };
                };
                readonly prices: {
                    readonly type: "object";
                    readonly properties: {
                        readonly guestsIncludedInRegularFee: {
                            readonly type: "number";
                        };
                        readonly extraPersonFee: {
                            readonly type: "number";
                        };
                        readonly basePrice: {
                            readonly type: "number";
                        };
                        readonly basePriceUSD: {
                            readonly type: "number";
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weekendBasePrice: {
                            readonly type: "number";
                        };
                        readonly securityDepositFee: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly cleaningFee: {
                            readonly type: "number";
                        };
                    };
                };
                readonly netIncomeFormula: {
                    readonly type: "string";
                };
                readonly commissionFormula: {
                    readonly type: "string";
                };
                readonly commissionTaxPrecentage: {
                    readonly type: "string";
                };
                readonly pms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly automation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly autoList: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly config: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly inbox: {
                            readonly type: "object";
                            readonly properties: {
                                readonly customSignature: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly paymentProcessing: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly paymentProviders: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly stripe: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly accountName: {
                                                    readonly type: "string";
                                                };
                                                readonly defaultCurrency: {
                                                    readonly type: "string";
                                                };
                                                readonly syncedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly livemode: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly token_type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_publishable_key: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_user_id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly scope: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly autoPayments: {
                            readonly type: "object";
                            readonly properties: {
                                readonly policy: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                    };
                };
                readonly receptionistsService: {
                    readonly title: "object";
                    readonly properties: {
                        readonly receptionDesk: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ittt: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly screening: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checklist: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly contactPersonUserId: {
                            readonly type: "string";
                        };
                    };
                    readonly type: "object";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly calendarRules: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly publicDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly privateDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly markups: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostListingsCsv: {
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostListingsEmail: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly to: {
                readonly description: "Address of recipient";
                readonly required: readonly ["to"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostOwners: {
    readonly body: {
        readonly required: readonly ["firstName", "lastName", "email", "listings"];
        readonly type: "object";
        readonly title: "title test";
        readonly description: "desctiption test";
        readonly properties: {
            readonly ownersPortalSettings: {
                readonly type: "object";
                readonly description: "The OPSettings object";
                readonly properties: {
                    readonly bookedNights: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly revenue: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly accommodationFare: {
                        readonly type: "boolean";
                    };
                    readonly guestsReports: {
                        readonly type: "boolean";
                    };
                    readonly guestsReportsViewId: {
                        readonly type: "string";
                    };
                    readonly occupancy: {
                        readonly type: "boolean";
                    };
                    readonly avgNightlyRate: {
                        readonly type: "boolean";
                    };
                    readonly revPal: {
                        readonly type: "boolean";
                    };
                    readonly hostPayout: {
                        readonly type: "boolean";
                    };
                    readonly nightlyRate: {
                        readonly type: "boolean";
                    };
                    readonly minNights: {
                        readonly type: "boolean";
                    };
                    readonly bookingSource: {
                        readonly type: "boolean";
                    };
                    readonly showInternalNotesForBlocks: {
                        readonly type: "boolean";
                    };
                    readonly showReservedReservations: {
                        readonly type: "boolean";
                    };
                    readonly showHelpCenter: {
                        readonly type: "boolean";
                    };
                    readonly showOwnerStatements: {
                        readonly type: "boolean";
                    };
                    readonly allowReservations: {
                        readonly type: "boolean";
                    };
                    readonly allowReservationsUnavailableDates: {
                        readonly type: "boolean";
                    };
                    readonly allowChangeCheckinCheckoutTime: {
                        readonly type: "boolean";
                    };
                    readonly showGuestFullName: {
                        readonly type: "boolean";
                    };
                    readonly showGuestEmail: {
                        readonly type: "boolean";
                    };
                    readonly showGuestPhone: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly listings: {
                readonly type: "array";
                readonly description: "Listings Id";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
            };
            readonly locale: {
                readonly type: "string";
                readonly description: "Localization";
                readonly examples: readonly ["en-US"];
            };
            readonly active: {
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly allowReservations: {
                readonly type: "boolean";
                readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                readonly examples: readonly ["false"];
            };
            readonly showReservationTooltips: {
                readonly type: "boolean";
                readonly description: "Deprecated. Always treated as true";
                readonly examples: readonly ["false"];
            };
            readonly businessInformation: {
                readonly type: "object";
                readonly properties: {
                    readonly businessType: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly other: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly street: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly zipcode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                            readonly full: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly vatIdentificationNumber: {
                        readonly type: "string";
                    };
                    readonly vatRate: {
                        readonly type: "number";
                        readonly description: "Range between 0 - 100";
                    };
                    readonly ownerCommission: {
                        readonly type: "number";
                        readonly description: "Range between 0 - 100";
                    };
                };
            };
            readonly birthday: {
                readonly type: "string";
                readonly description: "Date";
            };
            readonly anniversary: {
                readonly type: "string";
                readonly description: "Date";
            };
            readonly workingCapital: {
                readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_retrieve)";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly firstName: {
                readonly type: "string";
                readonly examples: readonly ["Elad"];
            };
            readonly lastName: {
                readonly type: "string";
                readonly examples: readonly ["Kremer"];
            };
            readonly fullName: {
                readonly type: "string";
                readonly examples: readonly ["Elad Kremer"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "Primary email address";
                readonly examples: readonly ["example@guesty.com"];
            };
            readonly address: {
                readonly type: "string";
                readonly examples: readonly ["test address"];
            };
            readonly personalAddress: {
                readonly type: "object";
                readonly properties: {
                    readonly street: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly zipcode: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                    readonly full: {
                        readonly type: "string";
                    };
                };
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Primary phone number";
                readonly examples: readonly ["15417543010"];
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly regular: {
                        readonly type: "string";
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                };
            };
            readonly notes: {
                readonly type: "string";
                readonly examples: readonly ["this is a note"];
            };
            readonly createdAt: {
                readonly type: "string";
                readonly description: "date ISO";
                readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ownersPortalSettings: {
                    readonly type: "object";
                    readonly description: "The OPSettings object";
                    readonly properties: {
                        readonly bookedNights: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly revenue: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly accommodationFare: {
                            readonly type: "boolean";
                        };
                        readonly guestsReports: {
                            readonly type: "boolean";
                        };
                        readonly occupancy: {
                            readonly type: "boolean";
                        };
                        readonly avgNightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly revPal: {
                            readonly type: "boolean";
                        };
                        readonly hostPayout: {
                            readonly type: "boolean";
                        };
                        readonly nightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly minNights: {
                            readonly type: "boolean";
                        };
                        readonly bookingSource: {
                            readonly type: "boolean";
                        };
                        readonly showInternalNotesForBlocks: {
                            readonly type: "boolean";
                        };
                        readonly showReservedReservations: {
                            readonly type: "boolean";
                        };
                        readonly showHelpCenter: {
                            readonly type: "boolean";
                        };
                        readonly showOwnerStatements: {
                            readonly type: "boolean";
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                        };
                        readonly allowReservationsUnavailableDates: {
                            readonly type: "boolean";
                        };
                        readonly showGuestFullName: {
                            readonly type: "boolean";
                        };
                        readonly showGuestEmail: {
                            readonly type: "boolean";
                        };
                        readonly showGuestPhone: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listings: {
                    readonly type: "array";
                    readonly description: "Listings Id";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly locale: {
                    readonly type: "string";
                    readonly description: "Localization";
                    readonly examples: readonly ["en-US"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly allowReservations: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                    readonly examples: readonly ["false"];
                };
                readonly showReservationTooltips: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Always treated as true";
                    readonly examples: readonly ["false"];
                };
                readonly businessInformation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly businessType: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly other: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly vatIdentificationNumber: {
                            readonly type: "string";
                        };
                        readonly vatRate: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                        readonly ownerCommission: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                    };
                };
                readonly birthday: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly anniversary: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly workingCapital: {
                    readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email address";
                    readonly examples: readonly ["example@guesty.com"];
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["test address"];
                };
                readonly personalAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly zipcode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly full: {
                            readonly type: "string";
                        };
                    };
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone number";
                    readonly examples: readonly ["15417543010"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly notes: {
                    readonly type: "string";
                    readonly examples: readonly ["this is a note"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "date ISO";
                    readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostOwnersOwneridDocuments: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly file: {
                readonly type: "string";
                readonly description: "Document in pdf format, maximum size 5 MB";
                readonly format: "binary";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly type: {
                readonly type: "string";
                readonly default: "DOCUMENT";
                readonly description: "Type of the document, defaults to DOCUMENT\n\nDefault: `DOCUMENT`";
                readonly enum: readonly ["DOCUMENT", "CONTRACT"];
            };
            readonly isShared: {
                readonly type: "boolean";
            };
            readonly startDate: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date in YYYY-MM-DD format";
            };
            readonly endDate: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date in YYYY-MM-DD format";
            };
        };
        readonly required: readonly ["file", "name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner id";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly originalFileName: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly enum: readonly ["DOCUMENT", "CONTRACT"];
                    readonly type: "string";
                    readonly examples: readonly ["DOCUMENT"];
                    readonly description: "`DOCUMENT` `CONTRACT`";
                };
                readonly isShared: {
                    readonly type: "boolean";
                    readonly description: "Document is visible to owner in Owners Portal";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly description: "Document effective date in YYYY-MM-DD format";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly description: "Document expiration date in YYYY-MM-DD format";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly deletedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "ownerId", "originalFileName", "name", "type", "isShared", "createdAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Invalid request"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostPaymentProvidersIdAssignListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingIds: {
                readonly type: "array";
                readonly description: "Array of listing ids to assign";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["5df48488228c7b0073a5e0b9"];
                };
            };
        };
        readonly required: readonly ["listingIds"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Stripe payment provider";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly syncedAt: {
                    readonly type: "string";
                    readonly format: "date";
                };
                readonly lastPendingPaymentDate: {
                    readonly type: "string";
                    readonly format: "date";
                };
                readonly listings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly pendingPaymentsCount: {
                    readonly type: "number";
                };
                readonly paymentMethodsCount: {
                    readonly type: "number";
                };
                readonly providerAccountId: {
                    readonly type: "string";
                };
                readonly isDefault: {
                    readonly type: "boolean";
                };
                readonly providerType: {
                    readonly type: "string";
                };
                readonly connectedBy: {
                    readonly type: "string";
                };
                readonly accountName: {
                    readonly type: "string";
                };
                readonly defaultCurrency: {
                    readonly type: "string";
                };
                readonly statsLastUpdated: {
                    readonly type: "string";
                    readonly format: "date";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostPropertiesHouseRules: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly houseRules: {
                    readonly type: "object";
                    readonly properties: {
                        readonly suitableForChildren: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly suitableForInfants: {
                            readonly type: "boolean";
                        };
                        readonly petsAllowed: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly petsCharged: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly smokingAllowed: {
                            readonly type: "boolean";
                        };
                        readonly partiesAllowed: {
                            readonly type: "boolean";
                        };
                        readonly additionalRules: {
                            readonly type: "string";
                            readonly examples: readonly ["No alcohol"];
                        };
                        readonly quietHours: {
                            readonly type: "object";
                            readonly properties: {
                                readonly set: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly start: {
                                    readonly type: "string";
                                    readonly examples: readonly ["22:00"];
                                };
                                readonly end: {
                                    readonly type: "string";
                                    readonly examples: readonly ["08:00"];
                                };
                            };
                        };
                        readonly minimumAge: {
                            readonly type: "integer";
                            readonly examples: readonly [21];
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly suitableForChildren: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly suitableForInfants: {
                        readonly type: "boolean";
                    };
                    readonly petsAllowed: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly petsCharged: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly smokingAllowed: {
                        readonly type: "boolean";
                    };
                    readonly partiesAllowed: {
                        readonly type: "boolean";
                    };
                    readonly additionalRules: {
                        readonly type: "string";
                        readonly examples: readonly ["No alcohol"];
                    };
                    readonly quietHours: {
                        readonly type: "object";
                        readonly properties: {
                            readonly set: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                            readonly start: {
                                readonly type: "string";
                                readonly examples: readonly ["22:00"];
                            };
                            readonly end: {
                                readonly type: "string";
                                readonly examples: readonly ["08:00"];
                            };
                        };
                    };
                    readonly minimumAge: {
                        readonly type: "integer";
                        readonly examples: readonly [21];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostPropertiesSpacesSpaceSpaceidEdit: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly beds: {
                readonly type: "object";
                readonly properties: {
                    readonly KING_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly QUEEN_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly DOUBLE_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly SINGLE_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly SOFA_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly AIR_MATTRESS: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly BUNK_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly other: {
                readonly type: "object";
                readonly properties: {
                    readonly FLOOR_MATTRESS: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly WATER_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly TODDLER_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly CRIB: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly spaceId: {
                    readonly type: "string";
                    readonly examples: readonly ["6287a21df5dbf500360254d0"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "spaceId to edit";
                };
            };
            readonly required: readonly ["spaceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Space room"];
                            };
                            readonly roomIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly airbnb: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly beds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly KING_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly QUEEN_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly DOUBLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SINGLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SOFA_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly AIR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly BUNK_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly other: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly FLOOR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly WATER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly TODDLER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly CRIB: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly bedroomsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly bathrooms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly SHARED: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly PRIVATE: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostPropertiesSpacesSpaceSpaceidRemove: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly spaceId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735df"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "spaceId to remove";
                };
            };
            readonly required: readonly ["spaceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Space room"];
                            };
                            readonly roomIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly airbnb: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly beds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly KING_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly QUEEN_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly DOUBLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SINGLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SOFA_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly AIR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly BUNK_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly other: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly FLOOR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly WATER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly TODDLER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly CRIB: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly bedroomsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly bathrooms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly SHARED: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly PRIVATE: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostPropertiesSpacesUnitTypeUnittypeidAdd: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly _id: {
                readonly type: "string";
                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
            };
            readonly name: {
                readonly type: "string";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["BEDROOM", "SHARED_SPACE", "FULL_BATHROOM", "HALF_BATHROOM"];
            };
            readonly airbnb_room_id: {
                readonly type: "string";
            };
            readonly beds: {
                readonly type: "object";
                readonly properties: {
                    readonly KING_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly QUEEN_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly DOUBLE_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly SINGLE_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly SOFA_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly AIR_MATTRESS: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly BUNK_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly other: {
                readonly type: "object";
                readonly properties: {
                    readonly FLOOR_MATTRESS: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly WATER_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly TODDLER_BED: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                    readonly CRIB: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly default: 0;
                        readonly examples: readonly [1];
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735af"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unit type Id to add room to";
                };
            };
            readonly required: readonly ["unitTypeId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly examples: readonly ["Space room"];
                            };
                            readonly roomIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly airbnb: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly beds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly KING_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly QUEEN_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly DOUBLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SINGLE_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly SOFA_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly AIR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly BUNK_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly other: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly FLOOR_MATTRESS: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly WATER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly TODDLER_BED: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                    readonly CRIB: {
                                        readonly minimum: 0;
                                        readonly type: "number";
                                        readonly default: 0;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly bedroomsAllowed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly bathrooms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly SHARED: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly PRIVATE: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservations: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingId: {
                readonly type: "string";
                readonly description: "Unique Id";
                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
            };
            readonly checkInDateLocalized: {
                readonly type: "string";
                readonly description: "Date of the format YYYY-MM-DD";
                readonly examples: readonly ["2023-01-01"];
            };
            readonly checkOutDateLocalized: {
                readonly type: "string";
                readonly description: "Date of the format YYYY-MM-DD";
                readonly examples: readonly ["2023-01-04"];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "Reservation status";
                readonly examples: readonly ["confirmed"];
            };
            readonly money: {
                readonly type: "object";
                readonly properties: {
                    readonly fareAccommodation: {
                        readonly type: "number";
                        readonly examples: readonly ["120"];
                    };
                    readonly fareCleaning: {
                        readonly type: "number";
                        readonly examples: readonly ["20"];
                    };
                    readonly invoiceItems: {
                        readonly type: "array";
                        readonly items: {
                            readonly properties: {
                                readonly title: {
                                    readonly type: "string";
                                };
                                readonly amount: {
                                    readonly type: "number";
                                };
                                readonly normalType: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AF", "AFO", "AFD", "AFA", "ARC", "CF", "PRO", "CO", "LOSD", "GCD", "AFE", "LT", "CT", "TT", "GST", "VAT", "ST", "COT", "OCT", "TOT", "HSHAT", "HST", "MAT", "TRT", "CFE", "CM", "PCM", "PF", "LGT", "HT", "TAF", "RT", "OT", "TAX", "SDC", "ADF", "OTHER"];
                                    readonly description: "Invoice item's type identifier";
                                };
                                readonly description: {
                                    readonly type: "string";
                                };
                                readonly secondIdentifier: {
                                    readonly type: "string";
                                    readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER"];
                                    readonly description: "An additional optional identifier";
                                    readonly examples: readonly ["MANAGEMENT"];
                                };
                            };
                            readonly required: readonly ["title", "amount", "normalType", "secondIdentifier"];
                            readonly type: "object";
                        };
                    };
                    readonly currency: {
                        readonly type: "string";
                        readonly description: "Currency must match the currency of the property";
                        readonly examples: readonly ["USD"];
                    };
                };
                readonly required: readonly ["fareAccommodation", "currency"];
            };
            readonly guest: {
                readonly type: "object";
                readonly properties: {
                    readonly firstName: {
                        readonly type: "string";
                        readonly description: "Guest's first name";
                        readonly examples: readonly ["Tony"];
                    };
                    readonly lastName: {
                        readonly type: "string";
                        readonly description: "Guest's last name";
                        readonly examples: readonly ["Stark"];
                    };
                    readonly phone: {
                        readonly type: "string";
                        readonly description: "Guest's phone number";
                        readonly examples: readonly ["+97777777"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "Guest's email";
                        readonly examples: readonly ["tony@stark.com"];
                    };
                };
            };
            readonly guestId: {
                readonly type: "string";
                readonly description: "Unique Id";
                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
            };
        };
        readonly required: readonly ["listingId", "checkInDateLocalized", "checkOutDateLocalized", "status"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly limitations: {
                            readonly type: "object";
                            readonly properties: {
                                readonly availableStatuses: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly properties: {
                                readonly invalidCreditCards: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly reports: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly platform: {
                            readonly type: "string";
                        };
                    };
                };
                readonly guestyFeeDetails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly feeMinimum: {
                            readonly type: "number";
                        };
                        readonly fee: {
                            readonly type: "number";
                        };
                        readonly feeUsd: {
                            readonly type: "number";
                        };
                        readonly isMinimumFee: {
                            readonly type: "boolean";
                        };
                        readonly isMaximumFee: {
                            readonly type: "boolean";
                        };
                        readonly planItems: {
                            readonly type: "array";
                            readonly items: {};
                        };
                    };
                };
                readonly review: {
                    readonly type: "object";
                    readonly properties: {
                        readonly shouldReview: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly atTimeOfConfirmation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly snapshotCreated: {
                            readonly type: "boolean";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly manual: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly taxes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly appliedOnFees: {
                                        readonly type: "string";
                                    };
                                    readonly appliedByDefaultOnChannels: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly units: {
                                        readonly type: "string";
                                    };
                                    readonly quantifier: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly appliedToAllFees: {
                                        readonly type: "boolean";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly flag: {
                    readonly type: "boolean";
                };
                readonly accountingEnabled: {
                    readonly type: "boolean";
                };
                readonly isBMApplied: {
                    readonly type: "boolean";
                };
                readonly confirmedPreBookings: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly pulledByDailySync: {
                    readonly type: "boolean";
                };
                readonly manuallyCreated: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly checkIn: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly checkOut: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly altered: {
                            readonly type: "boolean";
                        };
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly authenticationRequiredData: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly lastAuthMsgSentDate: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                            };
                                            readonly authenticationUrl: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly paymentMethodStatus: {
                                        readonly type: "string";
                                    };
                                    readonly isAuthorizationHold: {
                                        readonly type: "boolean";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly refunds: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly authorizationHoldCaptures: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly attempts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly createdAt: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                                };
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique Id";
                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly error: {
                                                    readonly type: "string";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly charge: {
                                                            readonly type: "string";
                                                        };
                                                        readonly code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decline_code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly doc_url: {
                                                            readonly type: "string";
                                                        };
                                                        readonly message: {
                                                            readonly type: "string";
                                                        };
                                                        readonly payment_intent: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                    readonly description: "Unique Id";
                                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly amount: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_capturable: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_received: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly application: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly capture_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly charges: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly object: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly data: {
                                                                            readonly type: "array";
                                                                            readonly items: {
                                                                                readonly type: "object";
                                                                                readonly properties: {
                                                                                    readonly id: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly object: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly amount: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_captured: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_refunded: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly application: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly billing_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly address: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly city: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line1: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line2: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly postal_code: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly state: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly email: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly name: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly phone: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly calculated_statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly captured: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly created: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly currency: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly customer: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly description: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly disputed: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly failure_code: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly failure_message: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly livemode: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly metadata: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly accountId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly confirmationCode: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reservationId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly OTA: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly listingId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly outcome: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly network_status: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reason: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_level: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_score: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly seller_message: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly paid: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly payment_intent: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly card: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly brand: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly checks: {
                                                                                                        readonly type: "object";
                                                                                                        readonly properties: {
                                                                                                            readonly cvc_check: {
                                                                                                                readonly type: "string";
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly exp_month: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly exp_year: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly fingerprint: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly funding: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly last4: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly network: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly refunded: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly refunds: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly object: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly data: {
                                                                                                readonly type: "array";
                                                                                                readonly items: {};
                                                                                            };
                                                                                            readonly has_more: {
                                                                                                readonly type: "boolean";
                                                                                            };
                                                                                            readonly total_count: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly url: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly status: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly has_more: {
                                                                            readonly type: "boolean";
                                                                        };
                                                                        readonly total_count: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly url: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly client_secret: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly confirmation_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly accountId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly confirmationCode: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly reservationId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly OTA: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly listingId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly next_action: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly type: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly use_stripe_sdk: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly type: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly merchant: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_d_secure_2_source: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_name: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly server_transaction_id: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_method_url: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_optimizations: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_encryption: {
                                                                                    readonly type: "object";
                                                                                    readonly properties: {
                                                                                        readonly directory_server_id: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly algorithm: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly certificate: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly root_certificate_authorities: {
                                                                                            readonly type: "array";
                                                                                            readonly items: {};
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly payment_method_options: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly card: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly request_three_d_secure: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method_types: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                                readonly statement_descriptor: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly status: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly payment_method: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly billing_details: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly address: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly city: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly country: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line1: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line2: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly postal_code: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly state: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly email: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly name: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly phone: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly card: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly brand: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly checks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly cvc_check: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly exp_month: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly exp_year: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly fingerprint: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly funding: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly last4: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly networks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly available: {
                                                                                    readonly type: "array";
                                                                                    readonly items: {};
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly three_d_secure_usage: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly supported: {
                                                                                    readonly type: "boolean";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly statusCode: {
                                                            readonly type: "number";
                                                        };
                                                        readonly requestId: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly receiptTargets: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly shouldBePaidAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly guestId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly autoPaymentsPolicy: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly paymentProviderIds: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly netIncome: {
                            readonly type: "number";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly commissionTaxPercentage: {
                            readonly type: "number";
                        };
                        readonly commissionTax: {
                            readonly type: "number";
                        };
                        readonly commissionIncTax: {
                            readonly type: "number";
                        };
                        readonly ownerRevenueFormula: {
                            readonly type: "string";
                        };
                        readonly ownerRevenue: {
                            readonly type: "number";
                        };
                        readonly currencyConversionRateToAccount: {
                            readonly type: "number";
                        };
                        readonly isTouchedPayments: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly guestId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly mtl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly assigned: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
                readonly isReturningGuest: {
                    readonly type: "boolean";
                };
                readonly confirmedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly importedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly additionalFeesAtCreation: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly automationSources: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly isPercentage: {
                                readonly type: "boolean";
                            };
                            readonly isAutomated: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                            };
                            readonly targetFee: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly conversationId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Account ID is required"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsApiReservationsReservationidPreApprove: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5cc84c6919031c00212a0a38"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of reservation";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly examples: readonly ["CONNECTED"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly preApproveState: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly platform: {
                            readonly type: "string";
                            readonly examples: readonly ["manual"];
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                        };
                    };
                };
            };
            readonly required: readonly ["_id", "accountId", "listingId", "status", "checkInDateLocalized", "checkOutDateLocalized", "preApproveState", "pendingTasks", "integration"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["\\\"reservationId\\\" with value \\\"63c40b0e5821e4d9e87536sd\\\" fails to match the valid mongo id pattern"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly examples: readonly ["error"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["VALIDATION_ERROR"];
                };
            };
            readonly required: readonly ["message", "type", "code"];
            readonly examples: readonly ["{\n    \"message\": \"\\\"reservationId\\\" with value \\\"63c40b0e5821e4d9e87536sd\\\" fails to match the valid mongo id pattern\",\n    \"type\": \"error\",\n    \"code\": \"VALIDATION_ERROR\"\n}"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsCsv: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                                readonly examples: readonly ["checkIn"];
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between\n\n **IMPORTANT NOTE:**\n In order to use the $between operator please check the syntax of the example below:\n `[{\"field\":\"checkIn\", \"operator\":\"$between\",\"from\":\"2023-03-02T00:00:00%2B01:00\",\"to\":\"2023-03-02T23:59:59%2B01:00\"}]`";
                                readonly examples: readonly ["$gt"];
                            };
                            readonly value: {
                                readonly type: "integer";
                                readonly description: "Value to filter by";
                                readonly examples: readonly [0];
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                                readonly default: any;
                                readonly examples: readonly ["now"];
                            };
                        };
                    };
                    readonly required: readonly ["field", "operator", "value"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Array of filters to query by";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn checkOut confirmationCode guest.fullname listing.title"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting, default: `checkIn`";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["100"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. Default value: `250`, max: `500`";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["100"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsEmail: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly to: {
                readonly type: "string";
                readonly description: "Address of recipient";
                readonly examples: readonly ["koby@guesty.com"];
            };
        };
        readonly required: readonly ["to"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                                readonly examples: readonly ["checkIn"];
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between\n\n **IMPORTANT NOTE:**\n In order to use the $between operator please check the syntax of the example below:\n `[{\"field\":\"checkIn\", \"operator\":\"$between\",\"from\":\"2023-03-02T00:00:00%2B01:00\",\"to\":\"2023-03-02T23:59:59%2B01:00\"}]`";
                                readonly examples: readonly ["$gt"];
                            };
                            readonly value: {
                                readonly type: "integer";
                                readonly description: "Value to filter by";
                                readonly examples: readonly [0];
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                                readonly default: any;
                                readonly examples: readonly ["now"];
                            };
                        };
                    };
                    readonly required: readonly ["field", "operator", "value"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Array of filters to query by";
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn checkOut confirmationCode guest.fullname listing.title"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["checkIn"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting, default: `checkIn`";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly examples: readonly ["100"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Limit for list of records. Default value: `250`, max: `500`";
                };
                readonly skip: {
                    readonly type: "integer";
                    readonly examples: readonly ["100"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Skip number of records. In case nothing provided so nothing will be skipped";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdApprove: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Reservation status is approved - can't approve"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdDecline: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Reservation status is approved - can't decline"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdInvoiceitems: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "Title of the invoice item";
                readonly examples: readonly ["Accommodation fare"];
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Price to be charged for the invoice item";
                readonly examples: readonly [98.52];
            };
            readonly normalType: {
                readonly type: "string";
                readonly description: "Invoice item's type identifier";
                readonly examples: readonly ["AFE"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the invoice item";
                readonly examples: readonly ["Management fee description"];
            };
            readonly secondIdentifier: {
                readonly type: "string";
                readonly description: "An additional optional identifier";
                readonly examples: readonly ["MANAGEMENT"];
            };
        };
        readonly required: readonly ["amount", "title", "normalType", "secondIdentifier"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e7abcde0000000A08011001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly limitations: {
                            readonly type: "object";
                            readonly properties: {
                                readonly availableStatuses: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly properties: {
                                readonly invalidCreditCards: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly reports: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly platform: {
                            readonly type: "string";
                        };
                    };
                };
                readonly guestyFeeDetails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly feeMinimum: {
                            readonly type: "number";
                        };
                        readonly fee: {
                            readonly type: "number";
                        };
                        readonly feeUsd: {
                            readonly type: "number";
                        };
                        readonly isMinimumFee: {
                            readonly type: "boolean";
                        };
                        readonly isMaximumFee: {
                            readonly type: "boolean";
                        };
                        readonly planItems: {
                            readonly type: "array";
                            readonly items: {};
                        };
                    };
                };
                readonly review: {
                    readonly type: "object";
                    readonly properties: {
                        readonly shouldReview: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly atTimeOfConfirmation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly snapshotCreated: {
                            readonly type: "boolean";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly manual: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly taxes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly appliedOnFees: {
                                        readonly type: "string";
                                    };
                                    readonly appliedByDefaultOnChannels: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly units: {
                                        readonly type: "string";
                                    };
                                    readonly quantifier: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly appliedToAllFees: {
                                        readonly type: "boolean";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly flag: {
                    readonly type: "boolean";
                };
                readonly accountingEnabled: {
                    readonly type: "boolean";
                };
                readonly isBMApplied: {
                    readonly type: "boolean";
                };
                readonly confirmedPreBookings: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly pulledByDailySync: {
                    readonly type: "boolean";
                };
                readonly manuallyCreated: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly checkIn: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly checkOut: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly altered: {
                            readonly type: "boolean";
                        };
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly authenticationRequiredData: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly lastAuthMsgSentDate: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                            };
                                            readonly authenticationUrl: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly paymentMethodStatus: {
                                        readonly type: "string";
                                    };
                                    readonly isAuthorizationHold: {
                                        readonly type: "boolean";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly refunds: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly authorizationHoldCaptures: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly attempts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly createdAt: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                                };
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique Id";
                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly error: {
                                                    readonly type: "string";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly charge: {
                                                            readonly type: "string";
                                                        };
                                                        readonly code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decline_code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly doc_url: {
                                                            readonly type: "string";
                                                        };
                                                        readonly message: {
                                                            readonly type: "string";
                                                        };
                                                        readonly payment_intent: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                    readonly description: "Unique Id";
                                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly amount: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_capturable: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_received: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly application: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly capture_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly charges: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly object: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly data: {
                                                                            readonly type: "array";
                                                                            readonly items: {
                                                                                readonly type: "object";
                                                                                readonly properties: {
                                                                                    readonly id: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly object: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly amount: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_captured: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_refunded: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly application: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly billing_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly address: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly city: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line1: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line2: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly postal_code: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly state: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly email: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly name: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly phone: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly calculated_statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly captured: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly created: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly currency: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly customer: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly description: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly disputed: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly failure_code: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly failure_message: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly livemode: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly metadata: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly accountId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly confirmationCode: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reservationId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly OTA: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly listingId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly outcome: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly network_status: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reason: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_level: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_score: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly seller_message: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly paid: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly payment_intent: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly card: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly brand: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly checks: {
                                                                                                        readonly type: "object";
                                                                                                        readonly properties: {
                                                                                                            readonly cvc_check: {
                                                                                                                readonly type: "string";
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly exp_month: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly exp_year: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly fingerprint: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly funding: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly last4: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly network: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly refunded: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly refunds: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly object: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly data: {
                                                                                                readonly type: "array";
                                                                                                readonly items: {};
                                                                                            };
                                                                                            readonly has_more: {
                                                                                                readonly type: "boolean";
                                                                                            };
                                                                                            readonly total_count: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly url: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly status: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly has_more: {
                                                                            readonly type: "boolean";
                                                                        };
                                                                        readonly total_count: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly url: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly client_secret: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly confirmation_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly accountId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly confirmationCode: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly reservationId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly OTA: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly listingId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly next_action: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly type: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly use_stripe_sdk: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly type: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly merchant: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_d_secure_2_source: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_name: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly server_transaction_id: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_method_url: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_optimizations: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_encryption: {
                                                                                    readonly type: "object";
                                                                                    readonly properties: {
                                                                                        readonly directory_server_id: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly algorithm: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly certificate: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly root_certificate_authorities: {
                                                                                            readonly type: "array";
                                                                                            readonly items: {};
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly payment_method_options: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly card: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly request_three_d_secure: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method_types: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                                readonly statement_descriptor: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly status: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly payment_method: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly billing_details: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly address: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly city: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly country: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line1: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line2: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly postal_code: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly state: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly email: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly name: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly phone: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly card: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly brand: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly checks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly cvc_check: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly exp_month: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly exp_year: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly fingerprint: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly funding: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly last4: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly networks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly available: {
                                                                                    readonly type: "array";
                                                                                    readonly items: {};
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly three_d_secure_usage: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly supported: {
                                                                                    readonly type: "boolean";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly statusCode: {
                                                            readonly type: "number";
                                                        };
                                                        readonly requestId: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly receiptTargets: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly shouldBePaidAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly guestId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly autoPaymentsPolicy: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly paymentProviderIds: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly netIncome: {
                            readonly type: "number";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly commissionTaxPercentage: {
                            readonly type: "number";
                        };
                        readonly commissionTax: {
                            readonly type: "number";
                        };
                        readonly commissionIncTax: {
                            readonly type: "number";
                        };
                        readonly ownerRevenueFormula: {
                            readonly type: "string";
                        };
                        readonly ownerRevenue: {
                            readonly type: "number";
                        };
                        readonly currencyConversionRateToAccount: {
                            readonly type: "number";
                        };
                        readonly isTouchedPayments: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly guestId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly mtl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly assigned: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
                readonly isReturningGuest: {
                    readonly type: "boolean";
                };
                readonly confirmedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly importedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly additionalFeesAtCreation: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly automationSources: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly isPercentage: {
                                readonly type: "boolean";
                            };
                            readonly isAutomated: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                            };
                            readonly targetFee: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly conversationId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Title is required"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdPayments: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly paymentMethod: {
                readonly type: "object";
                readonly properties: {
                    readonly method: {
                        readonly type: "string";
                        readonly enum: readonly ["CASH", "CREDIT", "DEBIT", "ECHECK", "AIRBNB", "BANK_TRANSFER", "CREDIT_NOTE", "VOUCHER", "CHECK", "STRIPE", "AMARYLLIS", "OTHER"];
                        readonly examples: readonly ["CASH"];
                    };
                    readonly saveForFutureUse: {
                        readonly type: "boolean";
                    };
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Required only for payments processed using credit cards (i.e not cash, echeck etc). \n Please see 'List guest's payment methods' request for more info.";
                        readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    };
                };
                readonly required: readonly ["method, id"];
            };
            readonly amount: {
                readonly type: "number";
                readonly examples: readonly [10];
            };
            readonly shouldBePaidAt: {
                readonly type: "string";
                readonly format: "date";
                readonly description: "Expected charge date. \n Not passing this param at all or passing it with a past date, will immediately charge the payment.";
                readonly examples: readonly ["2023-05-30T12:00:00.000Z"];
            };
            readonly paidAt: {
                readonly type: "string";
                readonly format: "date";
                readonly description: "Used when adding a record to payment history - the actual charge date.";
                readonly examples: readonly ["2023-05-30T12:00:00.000Z"];
            };
            readonly note: {
                readonly type: "string";
                readonly description: "Free text";
            };
            readonly isAuthorizationHold: {
                readonly type: "boolean";
                readonly description: "True in case of Authorization hold kind of payments";
                readonly examples: readonly [false];
            };
        };
        readonly required: readonly ["paymentMethod", "amount"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly paymentProviderId: {
                    readonly type: "string";
                };
                readonly paymentProvider: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly syncedAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly lastPendingPaymentDate: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly pendingPaymentsCount: {
                            readonly type: "number";
                        };
                        readonly paymentMethodsCount: {
                            readonly type: "number";
                        };
                        readonly providerAccountId: {
                            readonly type: "string";
                        };
                        readonly isDefault: {
                            readonly type: "boolean";
                        };
                        readonly providerType: {
                            readonly type: "string";
                        };
                        readonly connectedBy: {
                            readonly type: "string";
                        };
                        readonly accountName: {
                            readonly type: "string";
                        };
                        readonly defaultCurrency: {
                            readonly type: "string";
                        };
                        readonly statsLastUpdated: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Method is required"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdPaymentsPaymentidRefund: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly amount: {
                readonly type: "number";
                readonly examples: readonly [100];
            };
            readonly note: {
                readonly type: "string";
                readonly examples: readonly ["Free text"];
            };
        };
        readonly required: readonly ["amount"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
                readonly paymentId: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment ID";
                };
            };
            readonly required: readonly ["id", "paymentId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly paymentProviderId: {
                    readonly type: "string";
                };
                readonly paymentProvider: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly syncedAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly lastPendingPaymentDate: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly pendingPaymentsCount: {
                            readonly type: "number";
                        };
                        readonly paymentMethodsCount: {
                            readonly type: "number";
                        };
                        readonly providerAccountId: {
                            readonly type: "string";
                        };
                        readonly isDefault: {
                            readonly type: "boolean";
                        };
                        readonly providerType: {
                            readonly type: "string";
                        };
                        readonly connectedBy: {
                            readonly type: "string";
                        };
                        readonly accountName: {
                            readonly type: "string";
                        };
                        readonly defaultCurrency: {
                            readonly type: "string";
                        };
                        readonly statsLastUpdated: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Payment not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostReservationsIdRequestCancellationSync: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly cancellationData: {
                readonly type: "object";
                readonly properties: {
                    readonly reason: {
                        readonly type: "string";
                        readonly enum: readonly ["DECLINE_REASON_HOST_DOUBLE", "DECLINE_REASON_HOST_CHANGE", "DECLINE_REASON_HOST_UNAUTHORIZED_PARTY", "DECLINE_REASON_HOST_BEHAVIOR", "DECLINE_REASON_HOST_OTHER", "DECLINE_REASON_HOST_ASKED", "DECLINE_REASON_COVID19_HOST", "DECLINE_REASON_HOST_BAD_FIT", "DECLINE_REASON_HOST_BAD_REVIEWS_SPARSE_PROFILE"];
                        readonly examples: readonly ["DECLINE_REASON_HOST_DOUBLE"];
                    };
                    readonly subReason: {
                        readonly type: "string";
                        readonly enum: readonly ["DECLINE_REASON_HOST_EMERGENCY", "DECLINE_REASON_HOST_HOST_UNAVAILABLE", "DECLINE_REASON_HOST_DOUBLE_BOOKED", "DECLINE_REASON_HOST_RESERVATION_LENGTH", "DECLINE_REASON_HOST_DIFFERENT_PRICE", "DECLINE_REASON_HOST_UNAUTHORIZED_PARTY", "DECLINE_REASON_HOST_PARTY_REVIEWS", "DECLINE_REASON_HOST_PARTY_INDICATION", "DECLINE_REASON_HOST_BEHAVIOR_REVIEWS", "DECLINE_REASON_HOST_BEHAVIOR_INDICATION", "DECLINE_REASON_HOST_BEHAVIOR_OTHER", "DECLINE_REASON_HOST_GUEST_PROFILE"];
                        readonly examples: readonly ["DECLINE_REASON_HOST_HOST_UNAVAILABLE"];
                    };
                    readonly messageToAirbnb: {
                        readonly type: "string";
                    };
                    readonly messageToGuest: {
                        readonly type: "string";
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["6550033b5c3e4cff130c3564"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly details: {
                    readonly type: "object";
                    readonly properties: {
                        readonly reason: {
                            readonly type: "string";
                            readonly examples: readonly ["DECLINE_REASON_HOST_DOUBLE"];
                        };
                        readonly subReason: {
                            readonly type: "string";
                            readonly examples: readonly ["DECLINE_REASON_HOST_HOST_UNAVAILABLE"];
                        };
                        readonly messageToAirbnb: {
                            readonly type: "string";
                        };
                        readonly messageToGuest: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly cancelledAt: {
                    readonly type: "string";
                    readonly format: "date";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation error message";
                        };
                        readonly cause: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation sub error message";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly description: "Error metadata";
                            readonly properties: {};
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation error message";
                        };
                        readonly cause: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation sub error message";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly description: "Error metadata";
                            readonly properties: {};
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation error message";
                        };
                        readonly cause: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation sub error message";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly description: "Error metadata";
                            readonly properties: {};
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation error message";
                        };
                        readonly cause: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation sub error message";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly description: "Error metadata";
                            readonly properties: {};
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation error message";
                        };
                        readonly cause: {
                            readonly type: "string";
                            readonly description: "Reservation cancellation sub error message";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly description: "Error metadata";
                            readonly properties: {};
                        };
                    };
                };
                readonly isSuccessful: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostSavedReplies: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly question: {
                readonly type: "string";
                readonly examples: readonly ["TV"];
            };
            readonly answer: {
                readonly type: "string";
                readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
            };
            readonly applyWhenHasBooking: {
                readonly type: "boolean";
            };
            readonly applyWhenNoBooking: {
                readonly type: "boolean";
            };
            readonly isAbstract: {
                readonly type: "boolean";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["user", "guest", "contact", "review"];
            };
            readonly language: {
                readonly description: "Language of the saved reply.";
                readonly type: "string";
                readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                readonly examples: readonly ["en"];
            };
            readonly excludeListingIds: {
                readonly description: "Exclude saved reply from the specific listings";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly listingsIds: {
                readonly description: "Apply saved reply for the specific listings";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly folder: {
                readonly type: "string";
                readonly examples: readonly ["City"];
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly filters: {
                readonly description: "Apply saved reply to listings which match the filters";
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Subject of the filter, e.g. listing.address.city";
                    };
                    readonly operator: {
                        readonly type: "string";
                        readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                    };
                    readonly value: {
                        readonly type: "array";
                        readonly description: "Values to filter by.";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
        readonly required: readonly ["question", "answer"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly question: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                };
                readonly answer: {
                    readonly type: "string";
                    readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
                };
                readonly applyWhenHasBooking: {
                    readonly type: "boolean";
                };
                readonly applyWhenNoBooking: {
                    readonly type: "boolean";
                };
                readonly isAbstract: {
                    readonly type: "boolean";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "guest", "contact", "review"];
                    readonly description: "`user` `guest` `contact` `review`";
                };
                readonly language: {
                    readonly description: "Language of the saved reply.\n\n`en` `fr` `es` `it` `ru` `ja` `zh`";
                    readonly type: "string";
                    readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                    readonly examples: readonly ["en"];
                };
                readonly excludeListingIds: {
                    readonly description: "Exclude saved reply from the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly listingsIds: {
                    readonly description: "Apply saved reply for the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly folder: {
                    readonly type: "string";
                    readonly examples: readonly ["City"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly filters: {
                    readonly description: "Apply saved reply to listings which match the filters";
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly field: {
                            readonly type: "string";
                            readonly description: "Subject of the filter, e.g. listing.address.city";
                        };
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                        };
                        readonly value: {
                            readonly type: "array";
                            readonly description: "Values to filter by.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["CannedResponse validation failed: language: `de` is not a valid enum value for path `language`."];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostTasksOpenApiCreateSingleTask: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["title"];
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "The name you call the task";
                readonly examples: readonly ["Post Stay Clean"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Add any additional information needed to define the task.";
                readonly examples: readonly ["A regular clean between guest stays."];
            };
            readonly priority: {
                readonly type: "string";
                readonly description: "Priority value\n\nDefault: `medium`";
                readonly enum: readonly ["medium", "high", "low"];
                readonly default: "medium";
                readonly examples: readonly [2];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "Task types help you with better identification and reporting.";
                readonly enum: readonly ["cleaning", "maintenance", "inspection", "mid-stay", "runner", "sanitation", "check-in", "issue", "inventory", "administration"];
                readonly examples: readonly ["cleaning"];
            };
            readonly assigneeGroup: {
                readonly type: "array";
                readonly description: "The team the assignees are part of. This is a tag.";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["Cleaners A"];
                };
            };
            readonly assigneeId: {
                readonly description: "The unique identifier of the person assigned to the task.";
                readonly type: "string";
                readonly examples: readonly ["69gvymvx55zwf5nn2ubng97cm"];
            };
            readonly supervisorId: {
                readonly type: "string";
                readonly description: "The uniqueID of the person assigned to supervise the task.";
                readonly examples: readonly ["eg2x3iyeqnttngcn4mhzrzawr"];
            };
            readonly checklist: {
                readonly type: "array";
                readonly description: "A list of action items that help define the task.";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["Clean floors"];
                };
            };
            readonly attachments: {
                readonly type: "array";
                readonly description: "The place to attach external files needed for the task.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                            readonly examples: readonly ["attachment.png"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment";
                            readonly examples: readonly [4401630];
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                            readonly default: "cbt";
                            readonly examples: readonly ["cbt"];
                        };
                    };
                };
            };
            readonly expenses: {
                readonly type: "array";
                readonly maxItems: 20;
                readonly description: "The list of expenses that will be created in Accounting automatically either upon completion of the task or at the date provided (only available for accounting add-on users). Max items: 20.";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["name", "category", "vendorId", "amount", "expenseShare"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Expense name.";
                            readonly examples: readonly ["Maintenance expense"];
                        };
                        readonly category: {
                            readonly type: "string";
                            readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                            readonly description: "Expense category";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Expense description";
                            readonly examples: readonly ["Bulb replacement"];
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "Amount value";
                            readonly examples: readonly [20.45];
                        };
                        readonly recognitionDate: {
                            readonly type: "string";
                            readonly format: "date";
                            readonly description: "Expense recognition date. ISO 8601 Date format (year-month-day). If no date provided, will be used date of task creation.";
                            readonly examples: readonly ["2023-10-27"];
                        };
                        readonly vendorId: {
                            readonly type: "string";
                            readonly description: "You can get your vendor ID [here](/reference/vendorscontroller_getall)";
                            readonly examples: readonly ["5f4f6e1c1c6e4e001f7e8b4e"];
                        };
                        readonly shareSplit: {
                            readonly type: "number";
                            readonly description: "A share split is a floating point number that represents the percentage. For example, \n      - \\`0.5\\` means that the share is 50% between PMC and Owner.\n      - \\`0.1\\` means that the share is 10% Owner and 90% PMC.\n      - \\`0\\` means that the charge covered 100% by PMC.";
                            readonly examples: readonly [0.5];
                        };
                        readonly attachments: {
                            readonly type: "object";
                            readonly description: "Add attachments to expense.";
                            readonly required: readonly ["url", "extension", "fileName"];
                            readonly properties: {
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "URL to CDN where attachment is stored. Max length is 2048 characters";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                                readonly extension: {
                                    readonly type: "string";
                                    readonly description: "Attachment file extension. Max length is 10 characters";
                                    readonly examples: readonly ["png"];
                                };
                                readonly fileName: {
                                    readonly type: "string";
                                    readonly description: "Attachment file name. Max length is 256 characters";
                                    readonly examples: readonly ["Invoice copy"];
                                };
                            };
                        };
                    };
                };
            };
            readonly startTime: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and time the task must begin (specific task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T11:30:00-04:00"];
            };
            readonly canStartAfter: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T11:30:00-04:00"];
            };
            readonly mustFinishBefore: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T14:00:00-04:00"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "The object ID of the listing the task is attached to";
                readonly examples: readonly ["5803ca18e48f450300c76173"];
            };
            readonly reservationId: {
                readonly type: "string";
                readonly description: "The reservation ID of the listing the task is attached to";
                readonly examples: readonly ["5803ca18e48f450300c76173"];
            };
            readonly comments: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly text: {
                            readonly type: "string";
                            readonly description: "Textual comment";
                            readonly examples: readonly ["This is a cool comment"];
                        };
                        readonly attachments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly examples: readonly ["attachment.png"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly plannedDuration: {
                readonly type: "number";
                readonly description: "The amount of time budgeted for the task (hours).";
                readonly examples: readonly [2];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the task.";
                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                };
                readonly shortTaskId: {
                    readonly type: "object";
                    readonly description: "A short task ID for quick reference.";
                    readonly properties: {
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assigneeGroup: {
                    readonly type: "array";
                    readonly description: "The team the assignees is part of. This is a tag";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["cleaners"];
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Task types help you with better identification and reporting.";
                };
                readonly checklistFinished: {
                    readonly type: "array";
                    readonly description: "A list of finished action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklist: {
                    readonly type: "array";
                    readonly description: "A list of action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklistAggregated: {
                    readonly type: "array";
                    readonly description: "A list of action items.";
                    readonly items: {};
                };
                readonly tags: {
                    readonly type: "array";
                    readonly description: "List of tags the task is related to";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the task, being one of the following enumerators: pending,confirmed, in progress,completed,canceled.";
                    readonly examples: readonly ["confirmed"];
                };
                readonly comment: {
                    readonly type: "object";
                    readonly description: "Notes added to the task by the assignee and supervisor. Contains the text, user ID and date the comment was published.";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the comment.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly text: {
                            readonly type: "string";
                            readonly description: "The comment text.";
                        };
                        readonly by: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the user who made the comment.";
                        };
                        readonly date: {
                            readonly type: "string";
                            readonly description: "The date and time the comment was posted.";
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The ID of the account the task is attached to";
                    readonly examples: readonly ["Q5fb67280e396Q77002e6c2683"];
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly description: "The ID of the user who created the task.";
                    readonly examples: readonly ["Q5fb67280e39Q677002e6c268c"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "The name you call the task";
                    readonly examples: readonly ["Post Stay Clean"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Add any additional information needed to define the task.";
                    readonly examples: readonly ["A regular clean between guest stays."];
                };
                readonly priority: {
                    readonly type: "string";
                    readonly description: "Assign the level of importance to the task in enumerators - High,Medium,Low\n\n`medium` `high` `low`";
                    readonly enum: readonly ["medium", "high", "low"];
                    readonly examples: readonly ["high"];
                };
                readonly assigneeId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the person assigned to the task.";
                };
                readonly supervisorId: {
                    readonly type: "string";
                    readonly description: "The uniqueID of the person assigned to supervise the task.";
                    readonly examples: readonly ["64a6b8cfa08e0446a6f4b840"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "";
                    readonly examples: readonly ["Australia/Sydney"];
                };
                readonly afterEffects: {
                    readonly type: "object";
                    readonly description: "Actions to be triggered upon the completion of the task.";
                    readonly properties: {
                        readonly action: {
                            readonly type: "string";
                            readonly description: "The action to be performed.";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the action.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly payload: {
                            readonly type: "object";
                            readonly description: "The information or data to be included within the action.";
                            readonly properties: {
                                readonly target: {
                                    readonly type: "string";
                                    readonly description: "The intended recipient.\n\n`user` `contact` `guest` `supervisor`";
                                    readonly enum: readonly ["user", "contact", "guest", "supervisor"];
                                };
                                readonly targetId: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the target.";
                                };
                                readonly message: {
                                    readonly type: "object";
                                    readonly description: "The message object.";
                                    readonly properties: {
                                        readonly subject: {
                                            readonly type: "string";
                                            readonly description: "States topic of the message.";
                                        };
                                        readonly body: {
                                            readonly type: "string";
                                            readonly description: "Contains the message string.";
                                        };
                                        readonly attachments: {
                                            readonly type: "object";
                                            readonly description: "Contains and describes an attached file.";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier of the attachment object.";
                                                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "URL location of the attached file.";
                                                };
                                                readonly title: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the file attachment.";
                                                    readonly examples: readonly ["Post Stay Clean"];
                                                };
                                                readonly mimetype: {
                                                    readonly type: "string";
                                                    readonly description: "State the kind of file attached.";
                                                };
                                                readonly size: {
                                                    readonly type: "string";
                                                    readonly description: "The storage size of the attachment.";
                                                };
                                                readonly client: {
                                                    readonly type: "string";
                                                    readonly description: "";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly attachments: {
                    readonly type: "object";
                    readonly description: "The place to attach external files needed for the task.";
                    readonly properties: {
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached.";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment.";
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                        };
                    };
                };
                readonly timing: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["none", "specific", "flexible", "legacy"];
                            readonly examples: readonly ["specific"];
                            readonly description: "`none` `specific` `flexible` `legacy`";
                        };
                        readonly startTime: {
                            readonly type: "string";
                            readonly description: "The date and time the task must begin (fixed task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                            readonly examples: readonly ["2024-01-10T21:00:00.000Z"];
                        };
                        readonly canStartAfter: {
                            readonly type: "string";
                            readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                        readonly mustFinishBefore: {
                            readonly type: "string";
                            readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                    };
                };
                readonly apply: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["listing", "reservation", "owner-reservation"];
                            readonly examples: readonly ["reservation"];
                            readonly description: "`listing` `reservation` `owner-reservation`";
                        };
                        readonly listingId: {
                            readonly type: "string";
                            readonly description: "The object ID of the listing the task is attached to. Only when reservationId don't exist";
                            readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                        };
                        readonly reservationId: {
                            readonly type: "string";
                            readonly description: "The reservation ID of the listing the task is attached to. Only when listingId don't exist";
                            readonly examples: readonly ["9fba3d97d8e62500Gd7f6d842"];
                        };
                        readonly ownerReservationId: {
                            readonly type: "string";
                            readonly description: "The owner reservation ID of the listing the task is attached to. Only when owner reservation ";
                        };
                    };
                };
                readonly plannedDuration: {
                    readonly type: "number";
                    readonly description: "The amount of time budgeted for the task (hours).";
                    readonly examples: readonly [0.08];
                };
                readonly pendingExpenses: {
                    readonly description: "The list of expenses that will be created upon task completion";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Not available for Pending expenses";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly postedExpenses: {
                    readonly type: "array";
                    readonly description: "The list of recognized expenses";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Expense accounting data";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                    readonly failureCode: {
                                        readonly type: "number";
                                        readonly description: "Charge creation Error code";
                                        readonly examples: readonly [10001];
                                    };
                                    readonly requestId: {
                                        readonly type: "string";
                                        readonly description: "Request id for debugging";
                                        readonly examples: readonly ["456dd47bdb3862d2"];
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostViews: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly examples: readonly ["Example Listing"];
            };
            readonly section: {
                readonly type: "string";
                readonly description: "listings, reservation";
                readonly examples: readonly ["listings"];
            };
        };
        readonly required: readonly ["title", "section"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Id of the user owning this view";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title for the view";
                };
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                            };
                            readonly value: {
                                readonly type: "string";
                                readonly description: "Value to filter by.";
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly default: any;
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                            };
                        };
                        readonly required: readonly ["field", "operator", "value"];
                    };
                };
                readonly fields: {
                    readonly type: "string";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly description: "ascending sort , use - to descending sort";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly type: "string";
                };
                readonly scheduledEmails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly days: {
                                readonly type: "array";
                                readonly description: "Array of numbers 0-6, number per day";
                                readonly examples: readonly ["4 (send on Thursday)"];
                                readonly items: {};
                            };
                            readonly recipient: {
                                readonly type: "string";
                                readonly description: "Emails separated by comma";
                            };
                            readonly hour: {
                                readonly type: "number";
                                readonly description: "when the report should be sent";
                            };
                        };
                        readonly required: readonly ["hour"];
                    };
                };
                readonly shares: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly contactId: {
                                readonly type: "string";
                                readonly description: "Required Contact ID to share with";
                                readonly examples: readonly ["5926bdfb1bfe871000d0a745"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostWebhooks: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly url: {
                readonly type: "string";
                readonly examples: readonly ["https://www.hookurl.com"];
            };
            readonly events: {
                readonly type: "array";
                readonly description: "add list of event to register for the provided url";
                readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly examples: readonly ["https://www.hookurl.com"];
                };
                readonly events: {
                    readonly type: "array";
                    readonly description: "add list of event to register for the provided url\n\n`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                    readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                        readonly description: "`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PriceAdjustmentsControllerCreateManualPriceAdjustments: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly reservationId: {
                readonly type: "string";
                readonly examples: readonly ["623892d57f4f56afcb25587c"];
            };
            readonly priceAdjustments: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly normalType: {
                            readonly type: "string";
                            readonly enum: readonly ["AF", "AFO", "ARC", "LOSD", "GCD", "CO", "PRO", "CF", "PCM", "CM", "LT", "CT", "TT", "GST", "VAT", "TTH", "LGT", "HT", "TAF", "TRT", "AFE", "PF", "CFE", "RT", "ST", "COT", "OCT", "TOT", "HSHAT", "HST", "MAT", "SDC", "TAX", "OT", "OTHER"];
                            readonly description: "Read more about valid enums <a href=\"https://open-api-docs.guesty.com/docs/valid-enumerations\">here</a>";
                        };
                        readonly secondIdentifier: {
                            readonly type: "string";
                            readonly enum: readonly ["ADDITIONAL_BED", "AIR_CONDITIONING", "EARLY_CHECK_IN", "LATE_CHECK_IN", "BABY_BED", "CLEANING", "CLUB_CARD", "CONCIERGE", "EARLY_CHECKOUT", "LATE_CHECKOUT", "DEPOSIT", "ELECTRICITY", "FOOD", "HEATING", "INTERNET", "LAUNDRY", "LINENS", "TOWELS", "MANAGEMENT", "OIL", "PARKING", "PET", "POOL", "POOL_HEATING", "RESORT", "SERVICE", "TOILETRIES", "TOUR", "TRANSPORTATION", "CAR_RENTAL", "WATER", "WOOD", "TRANSFER", "HOUSEKEEPING", "INSURANCE", "COMMUNITY", "CREDIT_CARD_PROCESSING_FEE", "DAMAGE_WAIVER", "VIP_SERVICES", "PAYMENT_FEE", "ADDITIONAL_CHARGE", "MISCELLANEOUS", "SHIPPING", "VALET", "ACTIVITIES", "FLIGHTS", "GIFT_BASKET", "SPA", "CHEF", "MEET_AND_GREET", "DOCK_FEE", "UTILITY_FEE", "HOT_TUB", "BOOKING_FEE", "BREAKFAST", "BEVERAGE", "MEAL", "WELLNESS", "MINIBAR", "BUSINESS_CENTER", "WIFI", "GUEST_SERVICE", "COMMISSION_CHARGE", "EQUIPMENT_RENTAL", "RESERVATION_FEE", "DAMAGE_CHARGE", "HOMEOWNERS_ASSOCIATION", "GOLF_CART_RENTAL", "EXPEDIA_AFE"];
                            readonly description: "When normalType AFE (Additional Fee) is selected, secondIdentifier is required, else it's forbidden. Second identifier is the type of the additional fee";
                        };
                        readonly amount: {
                            readonly type: "number";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly realizationDates: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly date: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["date"];
                            };
                        };
                    };
                    readonly required: readonly ["normalType", "amount"];
                };
            };
        };
        readonly required: readonly ["reservationId", "priceAdjustments"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
};
declare const PriceAdjustmentsControllerGetAllTotalAmountPriceAdjustment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly reservationId: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly accountId: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly amount: {
                        readonly type: "number";
                    };
                    readonly normalType: {
                        readonly type: "string";
                    };
                    readonly secondIdentifier: {
                        readonly type: "string";
                    };
                    readonly creationMethod: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                    };
                    readonly userName: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly updatedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly attributedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly adjustmentFlow: {
                        readonly type: "string";
                    };
                    readonly sourceName: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["_id", "reservationId", "accountId", "amount", "normalType", "creationMethod", "type", "userName", "createdAt", "updatedAt"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PromotionControllerAssignListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listings: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
        readonly required: readonly ["listings"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly promotionId: {
                    readonly type: "string";
                    readonly examples: readonly ["63ee4b7e459ca31532f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "promotion id.";
                };
            };
            readonly required: readonly ["promotionId"];
        }];
    };
};
declare const PromotionControllerUnassignListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listings: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
        readonly required: readonly ["listings"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly promotionId: {
                    readonly type: "string";
                    readonly examples: readonly ["63ee4b7e459ca31532f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "promotion id.";
                };
            };
            readonly required: readonly ["promotionId"];
        }];
    };
};
declare const PutAccountsIdCustomFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly customFields: {
                readonly type: "array";
                readonly description: "**IMPORTANT NOTE:**\nThe oroginal object should be sent,\n **The only field editable is 'options' for 'enum' customFiled type**";
                readonly items: {
                    readonly description: "Use when createing *options* customField: ```type:enum```\n This case required options arry in edition";
                    readonly type: "object";
                    readonly required: readonly ["fieldId", "isPublic", "key", "object", "options", "type"];
                    readonly properties: {
                        readonly isPublic: {
                            readonly type: "boolean";
                        };
                        readonly key: {
                            readonly type: "string";
                        };
                        readonly object: {
                            readonly type: "string";
                            readonly enum: readonly ["listing", "reservation"];
                        };
                        readonly options: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["enum"];
                        };
                        readonly fieldId: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly isPublic: {
                        readonly type: "boolean";
                    };
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly object: {
                        readonly type: "string";
                        readonly enum: readonly ["listing", "reservation"];
                        readonly description: "`listing` `reservation`";
                    };
                    readonly options: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["user", "boolean", "enum", "longtext", "date", "text", "time", "contact", "number"];
                        readonly description: "`user` `boolean` `enum` `longtext` `date` `text` `time` `contact` `number`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutAvailabilityPricingApiCalendarListings: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly required: readonly ["listingId", "startDate", "endDate"];
            readonly properties: {
                readonly listingId: {
                    readonly description: "The listing id to update";
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                };
                readonly startDate: {
                    readonly description: "First day affected by changes (format: YYYY-MM-DD)";
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-01-01"];
                };
                readonly endDate: {
                    readonly description: "Last date affected by changes (format: YYYY-MM-DD)";
                    readonly type: "string";
                    readonly format: "YYYY-MM-DD";
                    readonly examples: readonly ["2023-01-01"];
                };
                readonly status: {
                    readonly description: "New status, enum: available, unavailable.";
                    readonly type: "string";
                    readonly enum: readonly ["available", "unavailable"];
                    readonly examples: readonly ["available"];
                };
                readonly price: {
                    readonly description: "New price, in the listing's currency.";
                    readonly type: "number";
                    readonly examples: readonly ["100"];
                };
                readonly isBasePrice: {
                    readonly description: "Whether to reset prices for the range to the listing's base price";
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly minNights: {
                    readonly description: "New min nights value";
                    readonly type: "integer";
                    readonly examples: readonly ["3"];
                };
                readonly isBaseMinNights: {
                    readonly description: "Whether to reset min nights for the range to the listing's base min nights";
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly note: {
                    readonly description: "Note to add to those dates.";
                    readonly type: "string";
                    readonly examples: readonly ["this is a note"];
                };
                readonly cta: {
                    readonly description: "Set Closed To Arrival for the date range.";
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly ctd: {
                    readonly description: "Set Closed To Departure for the date range.";
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "string";
            readonly examples: readonly ["ok"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Listing not found"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["LISTING_NOT_FOUND"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b68e3a-573cc83364fce31b0fd45abc"];
                };
            };
            readonly required: readonly ["message", "code", "data", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["child \"endDate\" fails because [\"endDate\" is required]"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["ValidationError"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b69790-624dc23b6c3abdaf7a0ce73d"];
                };
            };
            readonly required: readonly ["message", "code", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Internal Server Error"];
                };
            };
            readonly required: readonly ["message"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutAvailabilityPricingApiCalendarListingsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["startDate", "endDate"];
        readonly properties: {
            readonly startDate: {
                readonly description: "First day affected by changes (format: YYYY-MM-DD)";
                readonly type: "string";
                readonly format: "YYYY-MM-DD";
                readonly examples: readonly ["2023-01-01"];
            };
            readonly endDate: {
                readonly description: "Last date affected by changes (format: YYYY-MM-DD)";
                readonly type: "string";
                readonly format: "YYYY-MM-DD";
                readonly examples: readonly ["2023-02-01"];
            };
            readonly status: {
                readonly description: "New status, enum: available, unavailable.";
                readonly type: "string";
                readonly enum: readonly ["available", "unavailable"];
                readonly examples: readonly ["available"];
            };
            readonly price: {
                readonly description: "New price, in the listing's currency.";
                readonly type: "number";
                readonly examples: readonly ["100"];
            };
            readonly isBasePrice: {
                readonly description: "Whether to reset prices for the range to the listing's base price";
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly minNights: {
                readonly description: "New min nights value";
                readonly type: "integer";
                readonly examples: readonly ["3"];
            };
            readonly isBaseMinNights: {
                readonly description: "Whether to reset min nights for the range to the listing's base min nights";
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly note: {
                readonly description: "Note to add to those dates.";
                readonly type: "string";
                readonly examples: readonly ["this is a note"];
            };
            readonly cta: {
                readonly description: "Set Closed To Arrival for the date range.";
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly ctd: {
                readonly description: "Set Closed To Departure for the date range.";
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly useChildValues: {
                readonly description: "Accept changes to minNights on sub-unit";
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ad"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "string";
            readonly examples: readonly ["ok"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Listing not found"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["LISTING_NOT_FOUND"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b68e3a-573cc83364fce31b0fd45abc"];
                };
            };
            readonly required: readonly ["message", "code", "data", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "422": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["child \"endDate\" fails because [\"endDate\" is required]"];
                };
                readonly code: {
                    readonly type: "string";
                    readonly examples: readonly ["ValidationError"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly examples: readonly ["Root=1-63b69790-624dc23b6c3abdaf7a0ce73d"];
                };
            };
            readonly required: readonly ["message", "code", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                    readonly examples: readonly ["Internal Server Error"];
                };
            };
            readonly required: readonly ["message"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutContactsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly _id: {
                readonly type: "string";
                readonly description: "Unique Id";
                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
            };
            readonly firstName: {
                readonly type: "string";
                readonly examples: readonly ["Elad"];
            };
            readonly lastName: {
                readonly type: "string";
                readonly examples: readonly ["Kremer"];
            };
            readonly fullName: {
                readonly type: "string";
                readonly examples: readonly ["Elad Kremer"];
            };
            readonly nickName: {
                readonly type: "string";
                readonly examples: readonly ["My Nickname"];
            };
            readonly title: {
                readonly type: "string";
                readonly examples: readonly ["My Title"];
            };
            readonly company: {
                readonly type: "string";
                readonly examples: readonly ["My Company"];
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly regular: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                };
            };
            readonly emails: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["['aaaa@darkforest.com']"];
            };
            readonly phones: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["['+97777777777777']"];
            };
            readonly preferredContactMethod: {
                readonly type: "string";
                readonly enum: readonly ["email", "sms", "call"];
                readonly examples: readonly ["email"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "Primary email for the contact";
                readonly examples: readonly ["asdasdasdasd@darkforest.com"];
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Primary phone for the contact";
                readonly examples: readonly ["+97777777777777"];
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Notes about the user";
                readonly examples: readonly ["Some notes"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Entry ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly nickName: {
                    readonly type: "string";
                    readonly examples: readonly ["My Nickname"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["My Title"];
                };
                readonly company: {
                    readonly type: "string";
                    readonly examples: readonly ["My Company"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['aaaa@darkforest.com']"];
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["['+97777777777777']"];
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["email", "sms", "call"];
                    readonly examples: readonly ["email"];
                    readonly description: "`email` `sms` `call`";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email for the contact";
                    readonly examples: readonly ["asdasdasdasd@darkforest.com"];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone for the contact";
                    readonly examples: readonly ["+97777777777777"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Notes about the user";
                    readonly examples: readonly ["Some notes"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutFinancialsListingId: {
    readonly body: {
        readonly type: "object";
        readonly description: "Select financials fields with updated values. Non-updated fields are not required in the body";
        readonly properties: {
            readonly guestsIncludedInRegularFee: {
                readonly type: "number";
                readonly description: "The higest number of guests that will not reauires to add extraPersonFee";
            };
            readonly extraPersonFee: {
                readonly type: "number";
                readonly description: "The amount of fee which is added for each extra person, above guestsIncludedInRegularFee, in the reservation";
            };
            readonly basePrice: {
                readonly type: "number";
                readonly description: "The cost per night for the listing";
            };
            readonly basePriceUSD: {
                readonly type: "number";
                readonly description: "The cost per night in USD for the listing";
            };
            readonly monthlyPriceFactor: {
                readonly type: "number";
                readonly description: "A factor for the nightly cost for reservations that are longer then a month";
            };
            readonly weeklyPriceFactor: {
                readonly type: "number";
                readonly description: "A factor for the nightly cost for reservations that are longer then a week";
            };
            readonly weekendBasePrice: {
                readonly type: "number";
                readonly description: "The base price for weekend";
            };
            readonly securityDepositFee: {
                readonly type: "number";
            };
            readonly currency: {
                readonly type: "string";
                readonly description: "The currency that is in use for the listing prices";
            };
            readonly cleaningFee: {
                readonly type: "object";
                readonly description: "Object to define cleaningFee settings";
                readonly properties: {
                    readonly value: {
                        readonly type: "object";
                        readonly description: "Default settings for cleaning fee";
                        readonly properties: {
                            readonly valueType: {
                                readonly type: "string";
                                readonly description: "Defines rather value is a fixed number or percentage";
                                readonly enum: readonly ["FIXED", "PERCENTAGE"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                                readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                            };
                            readonly formula: {
                                readonly type: "number";
                                readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                            };
                        };
                    };
                    readonly lastUpdatedAt: {
                        readonly type: "string";
                        readonly format: "date";
                        readonly description: "Last update date";
                    };
                    readonly airbnb: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly rentalsUnited: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly homeAway: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly expedia: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly despegar: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly bookingCom: {
                        readonly type: "object";
                        readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                        readonly properties: {
                            readonly value: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly valueType: {
                                        readonly type: "string";
                                        readonly description: "Defines rather value is a fixed number or percentage";
                                        readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                    };
                                    readonly multiplier: {
                                        readonly type: "string";
                                        readonly description: "Sets the factor by which cleaning fee value will be multiplied";
                                        readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                    };
                                    readonly formula: {
                                        readonly type: "number";
                                        readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly guestsIncludedInRegularFee: {
                    readonly type: "number";
                    readonly description: "The higest number of guests that will not reauires to add extraPersonFee";
                };
                readonly extraPersonFee: {
                    readonly type: "number";
                    readonly description: "The amount of fee which is added for each extra person, above guestsIncludedInRegularFee, in the reservation";
                };
                readonly basePrice: {
                    readonly type: "number";
                    readonly description: "The cost per night for the listing";
                };
                readonly basePriceUSD: {
                    readonly type: "number";
                    readonly description: "The cost per night in USD for the listing";
                };
                readonly monthlyPriceFactor: {
                    readonly type: "number";
                    readonly description: "A factor for the nightly cost for reservations that are longer then a month";
                };
                readonly weeklyPriceFactor: {
                    readonly type: "number";
                    readonly description: "A factor for the nightly cost for reservations that are longer then a week";
                };
                readonly weekendBasePrice: {
                    readonly type: "number";
                    readonly description: "The base price for weekend";
                };
                readonly securityDepositFee: {
                    readonly type: "number";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency that is in use for the listing prices";
                };
                readonly cleaningFee: {
                    readonly type: "object";
                    readonly description: "Object to define cleaningFee settings";
                    readonly properties: {
                        readonly value: {
                            readonly type: "object";
                            readonly description: "Default settings for cleaning fee";
                            readonly properties: {
                                readonly valueType: {
                                    readonly type: "string";
                                    readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                    readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                };
                                readonly multiplier: {
                                    readonly type: "string";
                                    readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                    readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                };
                                readonly formula: {
                                    readonly type: "number";
                                    readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                };
                            };
                        };
                        readonly lastUpdatedAt: {
                            readonly type: "string";
                            readonly format: "date";
                            readonly description: "Last update date";
                        };
                        readonly airbnb: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly rentalsUnited: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly homeAway: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly expedia: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly despegar: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly description: "For channel specific cleaningFee settings, the 'value' field will be saved under the channel name";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly valueType: {
                                            readonly type: "string";
                                            readonly description: "Defines rather value is a fixed number or percentage\n\n`FIXED` `PERCENTAGE`";
                                            readonly enum: readonly ["FIXED", "PERCENTAGE"];
                                        };
                                        readonly multiplier: {
                                            readonly type: "string";
                                            readonly description: "Sets the factor by which cleaning fee value will be multiplied\n\n`PER_STAY` `PER_GUEST` `PER_NIGHT` `PER_GUEST_PER_NIGHT`";
                                            readonly enum: readonly ["PER_STAY", "PER_GUEST", "PER_NIGHT", "PER_GUEST_PER_NIGHT"];
                                        };
                                        readonly formula: {
                                            readonly type: "number";
                                            readonly description: "Defines the cleaningFee value, as fixed or as a percentage accordinf to 'valueType'";
                                        };
                                        readonly _id: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutHooksHookid: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: true;
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly hookId: {
                    readonly type: "string";
                    readonly examples: readonly ["616442ca8eb305002d901545"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Hook Id";
                };
            };
            readonly required: readonly ["hookId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutIntegrationsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly _id: {
                readonly type: "string";
                readonly description: "Unique Id";
                readonly examples: readonly ["5958c7e5884e961000817799"];
            };
            readonly airbnb2: {
                readonly type: "object";
                readonly properties: {
                    readonly credentials: {
                        readonly type: "object";
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                            };
                            readonly expiresAt: {
                                readonly type: "integer";
                            };
                            readonly accessToken: {
                                readonly type: "string";
                            };
                            readonly refreshToken: {
                                readonly type: "string";
                            };
                            readonly lastForceRefresh: {
                                readonly type: "string";
                                readonly description: "date";
                            };
                        };
                    };
                    readonly forwardEmails: {
                        readonly type: "object";
                        readonly properties: {
                            readonly all: {
                                readonly type: "boolean";
                                readonly default: true;
                            };
                            readonly emails: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly description: "Only if platform is airbnb";
            };
            readonly forwardEmails: {
                readonly type: "object";
                readonly properties: {
                    readonly all: {
                        readonly type: "boolean";
                        readonly default: true;
                    };
                    readonly emails: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly active: {
                readonly type: "boolean";
                readonly description: "Status of connection";
            };
            readonly platform: {
                readonly type: "string";
                readonly description: "Platform information";
                readonly examples: readonly ["airbnb2"];
            };
            readonly listings: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Listing details";
                    readonly additionalProperties: true;
                };
            };
            readonly complexes: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly description: "Complex details";
                    readonly additionalProperties: true;
                };
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "Integration nickname";
                readonly examples: readonly ["naama"];
            };
            readonly channelId: {
                readonly type: "string";
                readonly description: "Channel Id";
                readonly examples: readonly ["airbnb2"];
            };
            readonly proxyEmail: {
                readonly type: "string";
                readonly examples: readonly ["test@user.guesty.com"];
            };
            readonly incomingEmail: {
                readonly type: "string";
                readonly examples: readonly ["test@user.guesty.com"];
            };
            readonly externalAccountId: {
                readonly type: "string";
                readonly examples: readonly ["123456789"];
            };
            readonly id: {
                readonly type: "integer";
                readonly description: "External ID";
                readonly examples: readonly ["naama@user.guesty.com"];
            };
            readonly companyName: {
                readonly type: "string";
                readonly description: "Company name";
                readonly examples: readonly ["Test company"];
            };
            readonly fetchRequests: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fetchAllListings: {
                            readonly type: "boolean";
                        };
                        readonly externalListingIds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                        };
                        readonly createTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly updateTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly finishedTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                    };
                };
            };
            readonly status: {
                readonly type: "string";
                readonly description: "Status of integration";
                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
            };
            readonly migration: {
                readonly type: "object";
                readonly properties: {
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                    };
                    readonly createTime: {
                        readonly type: "string";
                        readonly description: "Date";
                    };
                    readonly updateTime: {
                        readonly type: "string";
                        readonly description: "Date";
                    };
                    readonly finishedTime: {
                        readonly type: "string";
                        readonly description: "Date";
                    };
                    readonly steps: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "Step details";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly discrepancyStepExecuted: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                    readonly discrepancyResolution: {
                        readonly type: "string";
                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                    };
                    readonly listingQuantityDiscrepancyStepExecuted: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                    readonly error: {
                        readonly type: "object";
                        readonly properties: {
                            readonly at: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly code: {
                                readonly type: "string";
                            };
                            readonly message: {
                                readonly type: "string";
                            };
                            readonly raw: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                        };
                    };
                    readonly notes: {
                        readonly type: "string";
                    };
                    readonly isRollingBack: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                };
            };
            readonly userId: {
                readonly type: "string";
                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
            };
            readonly accountId: {
                readonly type: "string";
                readonly description: "Owner";
                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
            };
            readonly tripAdvisor: {
                readonly type: "object";
                readonly description: "TripAdvisor details";
                readonly additionalProperties: true;
            };
            readonly homeaway2: {
                readonly type: "object";
                readonly description: "Homeaway details";
                readonly additionalProperties: true;
            };
            readonly bookingCom: {
                readonly type: "object";
                readonly properties: {
                    readonly legalEntityId: {
                        readonly type: "string";
                    };
                };
                readonly description: "BookingCom details";
            };
            readonly missingStep: {
                readonly type: "string";
                readonly description: "Missing integration step";
                readonly examples: readonly ["add_account_settings"];
            };
            readonly steps: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                        };
                    };
                };
            };
            readonly newIntegrationBackup: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly threadIdsMigrated: {
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly isDeleted: {
                readonly type: "boolean";
                readonly description: "Flag to delete integration";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17de3f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Integration ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["5958c7e5884e961000817799"];
                };
                readonly airbnb2: {
                    readonly type: "object";
                    readonly properties: {
                        readonly credentials: {
                            readonly type: "object";
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly expiresAt: {
                                    readonly type: "integer";
                                };
                                readonly accessToken: {
                                    readonly type: "string";
                                };
                                readonly refreshToken: {
                                    readonly type: "string";
                                };
                                readonly lastForceRefresh: {
                                    readonly type: "string";
                                    readonly description: "date";
                                };
                            };
                        };
                        readonly forwardEmails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly all: {
                                    readonly type: "boolean";
                                    readonly default: true;
                                };
                                readonly emails: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date";
                        };
                    };
                    readonly description: "Only if platform is airbnb";
                };
                readonly forwardEmails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly all: {
                            readonly type: "boolean";
                            readonly default: true;
                        };
                        readonly emails: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Status of connection";
                };
                readonly platform: {
                    readonly type: "string";
                };
                readonly listings: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Listing details";
                        readonly additionalProperties: true;
                    };
                };
                readonly complexes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "Complex details";
                        readonly additionalProperties: true;
                    };
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly examples: readonly ["naama"];
                };
                readonly channelId: {
                    readonly type: "string";
                };
                readonly activatedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly disconnectedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly proxyEmail: {
                    readonly type: "string";
                };
                readonly incomingEmail: {
                    readonly type: "string";
                };
                readonly externalAccountId: {
                    readonly type: "string";
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "External ID";
                    readonly examples: readonly ["naama@user.guesty.com"];
                };
                readonly companyName: {
                    readonly type: "string";
                };
                readonly fetchRequests: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly fetchAllListings: {
                                readonly type: "boolean";
                            };
                            readonly externalListingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly finishedTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                    readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                };
                readonly migration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                            readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                        };
                        readonly createTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly updateTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly finishedTime: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly steps: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Step details";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly discrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly discrepancyResolution: {
                            readonly type: "string";
                            readonly enum: readonly ["GUESTY", "AIRBNB"];
                            readonly description: "`GUESTY` `AIRBNB`";
                        };
                        readonly listingQuantityDiscrepancyStepExecuted: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly error: {
                            readonly type: "object";
                            readonly properties: {
                                readonly at: {
                                    readonly type: "string";
                                    readonly description: "Date";
                                };
                                readonly code: {
                                    readonly type: "string";
                                };
                                readonly message: {
                                    readonly type: "string";
                                };
                                readonly raw: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                        };
                        readonly isRollingBack: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                    };
                };
                readonly userId: {
                    readonly type: "string";
                    readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Owner";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly tripAdvisor: {
                    readonly type: "object";
                    readonly description: "TripAdvisor details";
                    readonly additionalProperties: true;
                };
                readonly homeaway2: {
                    readonly type: "object";
                    readonly description: "Homeaway details";
                    readonly additionalProperties: true;
                };
                readonly bookingCom: {
                    readonly type: "object";
                    readonly properties: {
                        readonly legalEntityId: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "BookingCom details";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly missingStep: {
                    readonly type: "string";
                };
                readonly steps: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                readonly description: "`COMPLETED` `IN_PROGRESS`";
                            };
                            readonly createTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly updateTime: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly newIntegrationBackup: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly threadIdsMigrated: {
                    readonly type: "boolean";
                };
                readonly isDeleted: {
                    readonly type: "boolean";
                };
                readonly deletedAt: {
                    readonly type: "string";
                    readonly description: "Date";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["API is deprecated for HomeAway integrations"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutListingsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly accommodates: {
                readonly type: "number";
            };
            readonly bathrooms: {
                readonly type: "number";
            };
            readonly minimumAge: {
                readonly type: "number";
            };
            readonly defaultCheckInTime: {
                readonly type: "string";
            };
            readonly defaultCheckOutTime: {
                readonly type: "string";
            };
            readonly timezone: {
                readonly type: "string";
            };
            readonly listingType: {
                readonly type: "string";
                readonly description: "listing type";
                readonly enum: readonly ["Private Room", "Entire home/apt", "Shared room"];
            };
            readonly propertyType: {
                readonly type: "string";
                readonly description: "property type";
                readonly enum: readonly ["Apartment", "House", "Loft", "Boat", "Camper/RV", "Condominium", "Chalet", "Bed & Breakfast", "Villa", "Tent", "Other", "Cabin", "Townhouse", "Bungalow", "Hut"];
            };
            readonly roomType: {
                readonly type: "string";
                readonly description: "room type";
                readonly enum: readonly ["Apartment", "Quadruple", "Suite", "Triple", "Studio", "Family", "Dormitory room", "Bungalow", "Chalet", "Holiday Home", "Villa", "Mobile home", "Tent"];
            };
            readonly childrenToConnect: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly description: "Array with children ids that are supposed to be connected";
            };
            readonly childrenToDisconnect: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly description: "Array with children ids that are supposed to be disconnected";
            };
            readonly numberOfChildrenToCreate: {
                readonly type: "number";
                readonly description: "Number of children to create automatically";
            };
            readonly address: {
                readonly type: "object";
                readonly properties: {
                    readonly full: {
                        readonly type: "string";
                        readonly description: "full address";
                        readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                    };
                    readonly lng: {
                        readonly type: "number";
                        readonly examples: readonly [34.8202173];
                    };
                    readonly lat: {
                        readonly type: "number";
                        readonly examples: readonly [32.0695525];
                    };
                    readonly street: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                };
            };
            readonly pms: {
                readonly type: "object";
                readonly properties: {
                    readonly active: {
                        readonly type: "boolean";
                    };
                    readonly automation: {
                        readonly type: "object";
                        readonly properties: {
                            readonly autoList: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly active: {
                                        readonly type: "boolean";
                                    };
                                    readonly config: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly inbox: {
                        readonly type: "object";
                        readonly properties: {
                            readonly customSignature: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cleaningStatus: {
                        readonly type: "object";
                        readonly properties: {
                            readonly value: {
                                readonly type: "string";
                                readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly examples: readonly ["2019-08-24T14:15:22Z"];
                            };
                        };
                    };
                    readonly paymentProcessing: {
                        readonly type: "object";
                        readonly properties: {
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly paymentProviders: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly stripe: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly active: {
                                                readonly type: "boolean";
                                            };
                                            readonly status: {
                                                readonly type: "string";
                                            };
                                            readonly accountName: {
                                                readonly type: "string";
                                            };
                                            readonly defaultCurrency: {
                                                readonly type: "string";
                                            };
                                            readonly syncedAt: {
                                                readonly type: "string";
                                                readonly format: "date";
                                            };
                                            readonly payload: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly livemode: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly token_type: {
                                                        readonly type: "string";
                                                    };
                                                    readonly stripe_publishable_key: {
                                                        readonly type: "string";
                                                    };
                                                    readonly stripe_user_id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly scope: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly autoPayments: {
                        readonly type: "object";
                        readonly properties: {
                            readonly policy: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly nickname: {
                readonly type: "string";
            };
            readonly publicDescription: {
                readonly type: "object";
                readonly properties: {
                    readonly summary: {
                        readonly type: "string";
                    };
                    readonly space: {
                        readonly type: "string";
                    };
                    readonly access: {
                        readonly type: "string";
                    };
                    readonly interactionWithGuests: {
                        readonly type: "string";
                    };
                    readonly neighborhood: {
                        readonly type: "string";
                    };
                    readonly transit: {
                        readonly type: "string";
                    };
                    readonly notes: {
                        readonly type: "string";
                    };
                    readonly houseRules: {
                        readonly type: "string";
                    };
                };
            };
            readonly hostName: {
                readonly type: "string";
            };
            readonly houseManual: {
                readonly type: "string";
            };
            readonly parkingInstructions: {
                readonly type: "string";
            };
            readonly trashCollectedOn: {
                readonly type: "string";
            };
            readonly wifiName: {
                readonly type: "string";
            };
            readonly wifiPassword: {
                readonly type: "string";
            };
            readonly cleaning: {
                readonly type: "object";
                readonly properties: {
                    readonly defaultCleaningTime: {
                        readonly type: "string";
                    };
                    readonly instructions: {
                        readonly type: "string";
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                };
                readonly integrations: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["5958c7e5884e961000817799"];
                            };
                            readonly airbnb2: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly credentials: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly expiresAt: {
                                                readonly type: "integer";
                                            };
                                            readonly accessToken: {
                                                readonly type: "string";
                                            };
                                            readonly refreshToken: {
                                                readonly type: "string";
                                            };
                                            readonly lastForceRefresh: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "date";
                                    };
                                };
                                readonly description: "Only if platform is airbnb";
                            };
                            readonly forwardEmails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly all: {
                                        readonly type: "boolean";
                                        readonly default: true;
                                    };
                                    readonly emails: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Status of connection";
                            };
                            readonly platform: {
                                readonly type: "string";
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Listing details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly complexes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Complex details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly examples: readonly ["naama"];
                            };
                            readonly channelId: {
                                readonly type: "string";
                            };
                            readonly activatedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly disconnectedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly proxyEmail: {
                                readonly type: "string";
                            };
                            readonly incomingEmail: {
                                readonly type: "string";
                            };
                            readonly externalAccountId: {
                                readonly type: "string";
                            };
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "External ID";
                                readonly examples: readonly ["naama@user.guesty.com"];
                            };
                            readonly companyName: {
                                readonly type: "string";
                            };
                            readonly fetchRequests: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly fetchAllListings: {
                                            readonly type: "boolean";
                                        };
                                        readonly externalListingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                            readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                            };
                            readonly migration: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                        readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                    };
                                    readonly createTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly updateTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly finishedTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Step details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly discrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly discrepancyResolution: {
                                        readonly type: "string";
                                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                                        readonly description: "`GUESTY` `AIRBNB`";
                                    };
                                    readonly listingQuantityDiscrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly error: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly at: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly message: {
                                                readonly type: "string";
                                            };
                                            readonly raw: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly notes: {
                                        readonly type: "string";
                                    };
                                    readonly isRollingBack: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                            };
                            readonly userId: {
                                readonly type: "string";
                                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Owner";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly tripAdvisor: {
                                readonly type: "object";
                                readonly description: "TripAdvisor details";
                                readonly additionalProperties: true;
                            };
                            readonly homeaway2: {
                                readonly type: "object";
                                readonly description: "Homeaway details";
                                readonly additionalProperties: true;
                            };
                            readonly bookingCom: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly legalEntityId: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "BookingCom details";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly missingStep: {
                                readonly type: "string";
                            };
                            readonly steps: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                            readonly description: "`COMPLETED` `IN_PROGRESS`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly newIntegrationBackup: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly threadIdsMigrated: {
                                readonly type: "boolean";
                            };
                            readonly isDeleted: {
                                readonly type: "boolean";
                            };
                            readonly deletedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly isVirtual: {
                    readonly type: "boolean";
                };
                readonly nickname: {
                    readonly type: "string";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isListed: {
                    readonly type: "boolean";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly propertyType: {
                    readonly type: "string";
                };
                readonly roomType: {
                    readonly type: "string";
                };
                readonly bedType: {
                    readonly type: "string";
                };
                readonly accommodates: {
                    readonly type: "number";
                };
                readonly bedrooms: {
                    readonly type: "number";
                };
                readonly areaSquareFeet: {
                    readonly type: "number";
                };
                readonly address: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly publishedAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly defaultCheckInTime: {
                    readonly type: "string";
                };
                readonly defaultCheckOutTime: {
                    readonly type: "string";
                };
                readonly cleaning: {
                    readonly type: "object";
                    readonly properties: {
                        readonly defaultCleaningTime: {
                            readonly type: "string";
                        };
                        readonly instructions: {
                            readonly type: "string";
                        };
                    };
                };
                readonly cleaningStatus: {
                    readonly type: "object";
                    readonly properties: {
                        readonly value: {
                            readonly type: "string";
                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly large: {
                            readonly type: "string";
                        };
                        readonly caption: {
                            readonly type: "string";
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                        readonly original: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly examples: readonly [39516];
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                    };
                };
                readonly pictures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly regular: {
                                readonly type: "string";
                            };
                            readonly thumbnail: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly large: {
                                readonly type: "string";
                            };
                            readonly caption: {
                                readonly type: "string";
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                            readonly original: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly size: {
                                readonly type: "number";
                                readonly examples: readonly [39516];
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                        };
                    };
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly amenitiesNotIncluded: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly terms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly minNights: {
                            readonly type: "number";
                        };
                        readonly maxNights: {
                            readonly type: "number";
                        };
                        readonly cancellation: {
                            readonly type: "string";
                        };
                    };
                };
                readonly prices: {
                    readonly type: "object";
                    readonly properties: {
                        readonly guestsIncludedInRegularFee: {
                            readonly type: "number";
                        };
                        readonly extraPersonFee: {
                            readonly type: "number";
                        };
                        readonly basePrice: {
                            readonly type: "number";
                        };
                        readonly basePriceUSD: {
                            readonly type: "number";
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weekendBasePrice: {
                            readonly type: "number";
                        };
                        readonly securityDepositFee: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly cleaningFee: {
                            readonly type: "number";
                        };
                    };
                };
                readonly netIncomeFormula: {
                    readonly type: "string";
                };
                readonly commissionFormula: {
                    readonly type: "string";
                };
                readonly commissionTaxPrecentage: {
                    readonly type: "string";
                };
                readonly pms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly automation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly autoList: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly config: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly inbox: {
                            readonly type: "object";
                            readonly properties: {
                                readonly customSignature: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly paymentProcessing: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly paymentProviders: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly stripe: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly accountName: {
                                                    readonly type: "string";
                                                };
                                                readonly defaultCurrency: {
                                                    readonly type: "string";
                                                };
                                                readonly syncedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly livemode: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly token_type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_publishable_key: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_user_id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly scope: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly autoPayments: {
                            readonly type: "object";
                            readonly properties: {
                                readonly policy: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                    };
                };
                readonly receptionistsService: {
                    readonly title: "object";
                    readonly properties: {
                        readonly receptionDesk: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ittt: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly screening: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checklist: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly contactPersonUserId: {
                            readonly type: "string";
                        };
                    };
                    readonly type: "object";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly calendarRules: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly publicDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly privateDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly markups: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutListingsIdAvailabilitySettings: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["calendarRules"];
        readonly properties: {
            readonly calendarRules: {
                readonly type: "object";
                readonly properties: {
                    readonly defaultAvailability: {
                        readonly type: "string";
                        readonly enum: readonly ["AVAILABLE", "BLOCKED"];
                        readonly examples: readonly ["AVAILABLE"];
                    };
                    readonly seasonalMinNights: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly from: {
                                    readonly type: "string";
                                    readonly description: "date of the format YYYY-MM-DD";
                                    readonly examples: readonly ["2020-12-01"];
                                };
                                readonly to: {
                                    readonly type: "string";
                                    readonly description: "date of the format YYYY-MM-DD";
                                    readonly examples: readonly ["2021-12-01"];
                                };
                            };
                        };
                    };
                    readonly preparationTime: {
                        readonly type: "object";
                        readonly description: "To set the preparation time to none, send the preparation time in the following way:\n '\"preparationTime\":{\"defaultSettings\":{\"days\":0}}'";
                        readonly properties: {
                            readonly defaultSettings: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly days: {
                                        readonly type: "number";
                                    };
                                    readonly when: {
                                        readonly type: "string";
                                        readonly enum: readonly ["BEFORE", "AFTER"];
                                    };
                                };
                            };
                        };
                    };
                    readonly rentalPeriods: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly from: {
                                    readonly type: "string";
                                    readonly description: "date of the format YYYY-MM-DD";
                                };
                                readonly to: {
                                    readonly type: "string";
                                    readonly description: "date of the format YYYY-MM-DD";
                                };
                            };
                        };
                    };
                    readonly advanceNotice: {
                        readonly type: "object";
                        readonly properties: {
                            readonly defaultSettings: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly hours: {
                                        readonly type: "number";
                                    };
                                    readonly allowRequestToBook: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    };
                    readonly bookingWindow: {
                        readonly type: "object";
                        readonly properties: {
                            readonly defaultSettings: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly days: {
                                        readonly type: "number";
                                        readonly examples: readonly [180];
                                    };
                                };
                            };
                        };
                    };
                    readonly dynamicCheckin: {
                        readonly type: "object";
                        readonly properties: {
                            readonly defaultSettings: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly days: {
                                        readonly type: "number";
                                        readonly examples: readonly [10];
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Listing ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "String (ObjectId)";
                    readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                };
                readonly integrations: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["5958c7e5884e961000817799"];
                            };
                            readonly airbnb2: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly credentials: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly expiresAt: {
                                                readonly type: "integer";
                                            };
                                            readonly accessToken: {
                                                readonly type: "string";
                                            };
                                            readonly refreshToken: {
                                                readonly type: "string";
                                            };
                                            readonly lastForceRefresh: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "date";
                                    };
                                };
                                readonly description: "Only if platform is airbnb";
                            };
                            readonly forwardEmails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly all: {
                                        readonly type: "boolean";
                                        readonly default: true;
                                    };
                                    readonly emails: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "Status of connection";
                            };
                            readonly platform: {
                                readonly type: "string";
                            };
                            readonly listings: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Listing details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly complexes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "Complex details";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly examples: readonly ["naama"];
                            };
                            readonly channelId: {
                                readonly type: "string";
                            };
                            readonly activatedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly disconnectedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly proxyEmail: {
                                readonly type: "string";
                            };
                            readonly incomingEmail: {
                                readonly type: "string";
                            };
                            readonly externalAccountId: {
                                readonly type: "string";
                            };
                            readonly id: {
                                readonly type: "integer";
                                readonly description: "External ID";
                                readonly examples: readonly ["naama@user.guesty.com"];
                            };
                            readonly companyName: {
                                readonly type: "string";
                            };
                            readonly fetchRequests: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly fetchAllListings: {
                                            readonly type: "boolean";
                                        };
                                        readonly externalListingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                            readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly finishedTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                            };
                            readonly migration: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                        readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                    };
                                    readonly createTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly updateTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly finishedTime: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Step details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly discrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly discrepancyResolution: {
                                        readonly type: "string";
                                        readonly enum: readonly ["GUESTY", "AIRBNB"];
                                        readonly description: "`GUESTY` `AIRBNB`";
                                    };
                                    readonly listingQuantityDiscrepancyStepExecuted: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly error: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly at: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                            };
                                            readonly message: {
                                                readonly type: "string";
                                            };
                                            readonly raw: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly notes: {
                                        readonly type: "string";
                                    };
                                    readonly isRollingBack: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                            };
                            readonly userId: {
                                readonly type: "string";
                                readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Owner";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly tripAdvisor: {
                                readonly type: "object";
                                readonly description: "TripAdvisor details";
                                readonly additionalProperties: true;
                            };
                            readonly homeaway2: {
                                readonly type: "object";
                                readonly description: "Homeaway details";
                                readonly additionalProperties: true;
                            };
                            readonly bookingCom: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly legalEntityId: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "BookingCom details";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                            readonly missingStep: {
                                readonly type: "string";
                            };
                            readonly steps: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                            readonly description: "`COMPLETED` `IN_PROGRESS`";
                                        };
                                        readonly createTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                        readonly updateTime: {
                                            readonly type: "string";
                                            readonly description: "Date";
                                        };
                                    };
                                };
                            };
                            readonly newIntegrationBackup: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly threadIdsMigrated: {
                                readonly type: "boolean";
                            };
                            readonly isDeleted: {
                                readonly type: "boolean";
                            };
                            readonly deletedAt: {
                                readonly type: "string";
                                readonly description: "Date";
                            };
                        };
                    };
                };
                readonly isVirtual: {
                    readonly type: "boolean";
                };
                readonly nickname: {
                    readonly type: "string";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isListed: {
                    readonly type: "boolean";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly propertyType: {
                    readonly type: "string";
                };
                readonly roomType: {
                    readonly type: "string";
                };
                readonly bedType: {
                    readonly type: "string";
                };
                readonly accommodates: {
                    readonly type: "number";
                };
                readonly bedrooms: {
                    readonly type: "number";
                };
                readonly areaSquareFeet: {
                    readonly type: "number";
                };
                readonly address: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly publishedAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly full: {
                            readonly type: "string";
                            readonly description: "full address";
                            readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                        };
                        readonly lng: {
                            readonly type: "number";
                            readonly examples: readonly [34.8202173];
                        };
                        readonly lat: {
                            readonly type: "number";
                            readonly examples: readonly [32.0695525];
                        };
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly defaultCheckInTime: {
                    readonly type: "string";
                };
                readonly defaultCheckOutTime: {
                    readonly type: "string";
                };
                readonly cleaning: {
                    readonly type: "object";
                    readonly properties: {
                        readonly defaultCleaningTime: {
                            readonly type: "string";
                        };
                        readonly instructions: {
                            readonly type: "string";
                        };
                    };
                };
                readonly cleaningStatus: {
                    readonly type: "object";
                    readonly properties: {
                        readonly value: {
                            readonly type: "string";
                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                        };
                    };
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly large: {
                            readonly type: "string";
                        };
                        readonly caption: {
                            readonly type: "string";
                        };
                        readonly height: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                        readonly original: {
                            readonly type: "string";
                            readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly examples: readonly [39516];
                        };
                        readonly width: {
                            readonly type: "number";
                            readonly examples: readonly [756];
                        };
                    };
                };
                readonly pictures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly regular: {
                                readonly type: "string";
                            };
                            readonly thumbnail: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly large: {
                                readonly type: "string";
                            };
                            readonly caption: {
                                readonly type: "string";
                            };
                            readonly height: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                            readonly original: {
                                readonly type: "string";
                                readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                            };
                            readonly size: {
                                readonly type: "number";
                                readonly examples: readonly [39516];
                            };
                            readonly width: {
                                readonly type: "number";
                                readonly examples: readonly [756];
                            };
                        };
                    };
                };
                readonly amenities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly amenitiesNotIncluded: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly terms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly minNights: {
                            readonly type: "number";
                        };
                        readonly maxNights: {
                            readonly type: "number";
                        };
                        readonly cancellation: {
                            readonly type: "string";
                        };
                    };
                };
                readonly prices: {
                    readonly type: "object";
                    readonly properties: {
                        readonly guestsIncludedInRegularFee: {
                            readonly type: "number";
                        };
                        readonly extraPersonFee: {
                            readonly type: "number";
                        };
                        readonly basePrice: {
                            readonly type: "number";
                        };
                        readonly basePriceUSD: {
                            readonly type: "number";
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weekendBasePrice: {
                            readonly type: "number";
                        };
                        readonly securityDepositFee: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly cleaningFee: {
                            readonly type: "number";
                        };
                    };
                };
                readonly netIncomeFormula: {
                    readonly type: "string";
                };
                readonly commissionFormula: {
                    readonly type: "string";
                };
                readonly commissionTaxPrecentage: {
                    readonly type: "string";
                };
                readonly pms: {
                    readonly type: "object";
                    readonly properties: {
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly automation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly autoList: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly config: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly inbox: {
                            readonly type: "object";
                            readonly properties: {
                                readonly customSignature: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly paymentProcessing: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly paymentProviders: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly stripe: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly accountName: {
                                                    readonly type: "string";
                                                };
                                                readonly defaultCurrency: {
                                                    readonly type: "string";
                                                };
                                                readonly syncedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly livemode: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly token_type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_publishable_key: {
                                                            readonly type: "string";
                                                        };
                                                        readonly stripe_user_id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly scope: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly autoPayments: {
                            readonly type: "object";
                            readonly properties: {
                                readonly policy: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                    };
                };
                readonly receptionistsService: {
                    readonly title: "object";
                    readonly properties: {
                        readonly receptionDesk: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ittt: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly screening: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checklist: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly contactPersonUserId: {
                            readonly type: "string";
                        };
                    };
                    readonly type: "object";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly calendarRules: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly publicDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly privateDescription: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly markups: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutListingsIdCustomFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly customFields: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fieldId: {
                            readonly type: "string";
                            readonly examples: readonly ["5f744b491af840002ca636a2"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly examples: readonly ["Door code"];
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutOwnersId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly ownersPortalSettings: {
                readonly type: "object";
                readonly description: "The OPSettings object";
                readonly properties: {
                    readonly bookedNights: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly revenue: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly accommodationFare: {
                        readonly type: "boolean";
                    };
                    readonly guestsReports: {
                        readonly type: "boolean";
                    };
                    readonly occupancy: {
                        readonly type: "boolean";
                    };
                    readonly avgNightlyRate: {
                        readonly type: "boolean";
                    };
                    readonly revPal: {
                        readonly type: "boolean";
                    };
                    readonly hostPayout: {
                        readonly type: "boolean";
                    };
                    readonly nightlyRate: {
                        readonly type: "boolean";
                    };
                    readonly minNights: {
                        readonly type: "boolean";
                    };
                    readonly bookingSource: {
                        readonly type: "boolean";
                    };
                    readonly showInternalNotesForBlocks: {
                        readonly type: "boolean";
                    };
                    readonly showReservedReservations: {
                        readonly type: "boolean";
                    };
                    readonly showHelpCenter: {
                        readonly type: "boolean";
                    };
                    readonly showOwnerStatements: {
                        readonly type: "boolean";
                    };
                    readonly allowReservations: {
                        readonly type: "boolean";
                    };
                    readonly allowReservationsUnavailableDates: {
                        readonly type: "boolean";
                    };
                    readonly showGuestFullName: {
                        readonly type: "boolean";
                    };
                    readonly showGuestEmail: {
                        readonly type: "boolean";
                    };
                    readonly showGuestPhone: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly listings: {
                readonly type: "array";
                readonly description: "Listings Id";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
            };
            readonly _id: {
                readonly type: "string";
                readonly description: "Unique Id";
                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
            };
            readonly locale: {
                readonly type: "string";
                readonly description: "Localization";
                readonly examples: readonly ["en-US"];
            };
            readonly active: {
                readonly type: "boolean";
                readonly examples: readonly ["false"];
            };
            readonly allowReservations: {
                readonly type: "boolean";
                readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                readonly examples: readonly ["false"];
            };
            readonly showReservationTooltips: {
                readonly type: "boolean";
                readonly description: "Deprecated. Always treated as true";
                readonly examples: readonly ["false"];
            };
            readonly businessInformation: {
                readonly type: "object";
                readonly properties: {
                    readonly businessType: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly other: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly street: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly zipcode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                            readonly full: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly vatIdentificationNumber: {
                        readonly type: "string";
                    };
                    readonly vatRate: {
                        readonly type: "number";
                        readonly description: "Range between 0 - 100";
                    };
                    readonly ownerCommission: {
                        readonly type: "number";
                        readonly description: "Range between 0 - 100";
                    };
                };
            };
            readonly birthday: {
                readonly type: "string";
                readonly description: "Date";
            };
            readonly anniversary: {
                readonly type: "string";
                readonly description: "Date";
            };
            readonly workingCapital: {
                readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly firstName: {
                readonly type: "string";
                readonly examples: readonly ["Elad"];
            };
            readonly lastName: {
                readonly type: "string";
                readonly examples: readonly ["Kremer"];
            };
            readonly fullName: {
                readonly type: "string";
                readonly examples: readonly ["Elad Kremer"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "Primary email address";
                readonly examples: readonly ["example@guesty.com"];
            };
            readonly address: {
                readonly type: "string";
                readonly examples: readonly ["test address"];
            };
            readonly personalAddress: {
                readonly type: "object";
                readonly properties: {
                    readonly street: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly zipcode: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                    readonly full: {
                        readonly type: "string";
                    };
                };
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Primary phone number";
                readonly examples: readonly ["15417543010"];
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                    readonly regular: {
                        readonly type: "string";
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                    };
                };
            };
            readonly notes: {
                readonly type: "string";
                readonly examples: readonly ["this is a note"];
            };
            readonly createdAt: {
                readonly type: "string";
                readonly description: "date ISO";
                readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Owner ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly ownersPortalSettings: {
                    readonly type: "object";
                    readonly description: "The OPSettings object";
                    readonly properties: {
                        readonly bookedNights: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly revenue: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                        readonly accommodationFare: {
                            readonly type: "boolean";
                        };
                        readonly guestsReports: {
                            readonly type: "boolean";
                        };
                        readonly occupancy: {
                            readonly type: "boolean";
                        };
                        readonly avgNightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly revPal: {
                            readonly type: "boolean";
                        };
                        readonly hostPayout: {
                            readonly type: "boolean";
                        };
                        readonly nightlyRate: {
                            readonly type: "boolean";
                        };
                        readonly minNights: {
                            readonly type: "boolean";
                        };
                        readonly bookingSource: {
                            readonly type: "boolean";
                        };
                        readonly showInternalNotesForBlocks: {
                            readonly type: "boolean";
                        };
                        readonly showReservedReservations: {
                            readonly type: "boolean";
                        };
                        readonly showHelpCenter: {
                            readonly type: "boolean";
                        };
                        readonly showOwnerStatements: {
                            readonly type: "boolean";
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                        };
                        readonly allowReservationsUnavailableDates: {
                            readonly type: "boolean";
                        };
                        readonly showGuestFullName: {
                            readonly type: "boolean";
                        };
                        readonly showGuestEmail: {
                            readonly type: "boolean";
                        };
                        readonly showGuestPhone: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listings: {
                    readonly type: "array";
                    readonly description: "Listings Id";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                };
                readonly locale: {
                    readonly type: "string";
                    readonly description: "Localization";
                    readonly examples: readonly ["en-US"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly examples: readonly ["false"];
                };
                readonly allowReservations: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                    readonly examples: readonly ["false"];
                };
                readonly showReservationTooltips: {
                    readonly type: "boolean";
                    readonly description: "Deprecated. Always treated as true";
                    readonly examples: readonly ["false"];
                };
                readonly businessInformation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly businessType: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly other: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly vatIdentificationNumber: {
                            readonly type: "string";
                        };
                        readonly vatRate: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                        readonly ownerCommission: {
                            readonly type: "number";
                            readonly description: "Range between 0 - 100";
                        };
                    };
                };
                readonly birthday: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly anniversary: {
                    readonly type: "string";
                    readonly description: "Date";
                };
                readonly workingCapital: {
                    readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                    readonly type: "number";
                    readonly examples: readonly [0];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad"];
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Kremer"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["Elad Kremer"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Primary email address";
                    readonly examples: readonly ["example@guesty.com"];
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["test address"];
                };
                readonly personalAddress: {
                    readonly type: "object";
                    readonly properties: {
                        readonly street: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly zipcode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly full: {
                            readonly type: "string";
                        };
                    };
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Primary phone number";
                    readonly examples: readonly ["15417543010"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly regular: {
                            readonly type: "string";
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                    };
                };
                readonly notes: {
                    readonly type: "string";
                    readonly examples: readonly ["this is a note"];
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly description: "date ISO";
                    readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutOwnersReservationsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly checkIn: {
                readonly type: "string";
                readonly description: "Check in with format YYYY-MM-DD HH:mm:ss";
                readonly examples: readonly ["2020-03-19 15:00:00"];
            };
            readonly checkOut: {
                readonly type: "string";
                readonly description: "Check out with format YYYY-MM-DD HH:mm:ss";
                readonly examples: readonly ["2020-03-20 10:00:00"];
            };
            readonly note: {
                readonly type: "string";
                readonly examples: readonly ["Free text"];
            };
        };
        readonly required: readonly ["checkIn", "checkOut"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkIn: {
                    readonly type: "string";
                };
                readonly checkOut: {
                    readonly type: "string";
                };
                readonly note: {
                    readonly type: "string";
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly plannedDeparture: {
                    readonly type: "string";
                };
                readonly plannedArrival: {
                    readonly type: "string";
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                };
                readonly listing: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "String (ObjectId)";
                            readonly examples: readonly ["59ac245d27cb310f0017afe3"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly examples: readonly ["2017-09-03T15:48:45.070Z"];
                        };
                        readonly integrations: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["5958c7e5884e961000817799"];
                                    };
                                    readonly airbnb2: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly credentials: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly expiresAt: {
                                                        readonly type: "integer";
                                                    };
                                                    readonly accessToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly refreshToken: {
                                                        readonly type: "string";
                                                    };
                                                    readonly lastForceRefresh: {
                                                        readonly type: "string";
                                                        readonly description: "date";
                                                    };
                                                };
                                            };
                                            readonly forwardEmails: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly all: {
                                                        readonly type: "boolean";
                                                        readonly default: true;
                                                    };
                                                    readonly emails: {
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                            readonly createdAt: {
                                                readonly type: "string";
                                                readonly description: "date";
                                            };
                                        };
                                        readonly description: "Only if platform is airbnb";
                                    };
                                    readonly forwardEmails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly all: {
                                                readonly type: "boolean";
                                                readonly default: true;
                                            };
                                            readonly emails: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                    readonly active: {
                                        readonly type: "boolean";
                                        readonly description: "Status of connection";
                                    };
                                    readonly platform: {
                                        readonly type: "string";
                                    };
                                    readonly listings: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Listing details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly complexes: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly description: "Complex details";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                    readonly nickname: {
                                        readonly type: "string";
                                        readonly examples: readonly ["naama"];
                                    };
                                    readonly channelId: {
                                        readonly type: "string";
                                    };
                                    readonly activatedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly disconnectedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly proxyEmail: {
                                        readonly type: "string";
                                    };
                                    readonly incomingEmail: {
                                        readonly type: "string";
                                    };
                                    readonly externalAccountId: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly description: "External ID";
                                        readonly examples: readonly ["naama@user.guesty.com"];
                                    };
                                    readonly companyName: {
                                        readonly type: "string";
                                    };
                                    readonly fetchRequests: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly fetchAllListings: {
                                                    readonly type: "boolean";
                                                };
                                                readonly externalListingIds: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "TIMEOUT"];
                                                    readonly description: "`NOT_STARTED` `IN_PROGRESS` `COMPLETED` `FAILED` `TIMEOUT`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly finishedTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["NOT_CONNECTED", "CONNECTING", "CONNECTED", "FAILED", "TIMEOUT", "DISCONNECTED", "PENDING"];
                                        readonly description: "`NOT_CONNECTED` `CONNECTING` `CONNECTED` `FAILED` `TIMEOUT` `DISCONNECTED` `PENDING`";
                                    };
                                    readonly migration: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly status: {
                                                readonly type: "string";
                                                readonly enum: readonly ["IN_PROGRESS", "COMPLETED", "FAILED"];
                                                readonly description: "`IN_PROGRESS` `COMPLETED` `FAILED`";
                                            };
                                            readonly createTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly updateTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly finishedTime: {
                                                readonly type: "string";
                                                readonly description: "Date";
                                            };
                                            readonly steps: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly description: "Step details";
                                                    readonly additionalProperties: true;
                                                };
                                            };
                                            readonly discrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly discrepancyResolution: {
                                                readonly type: "string";
                                                readonly enum: readonly ["GUESTY", "AIRBNB"];
                                                readonly description: "`GUESTY` `AIRBNB`";
                                            };
                                            readonly listingQuantityDiscrepancyStepExecuted: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly error: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly at: {
                                                        readonly type: "string";
                                                        readonly description: "Date";
                                                    };
                                                    readonly code: {
                                                        readonly type: "string";
                                                    };
                                                    readonly message: {
                                                        readonly type: "string";
                                                    };
                                                    readonly raw: {
                                                        readonly type: "object";
                                                        readonly additionalProperties: true;
                                                    };
                                                };
                                            };
                                            readonly notes: {
                                                readonly type: "string";
                                            };
                                            readonly isRollingBack: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                        };
                                    };
                                    readonly userId: {
                                        readonly type: "string";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b85"];
                                    };
                                    readonly accountId: {
                                        readonly type: "string";
                                        readonly description: "Owner";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly tripAdvisor: {
                                        readonly type: "object";
                                        readonly description: "TripAdvisor details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly homeaway2: {
                                        readonly type: "object";
                                        readonly description: "Homeaway details";
                                        readonly additionalProperties: true;
                                    };
                                    readonly bookingCom: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly legalEntityId: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly description: "BookingCom details";
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                    readonly missingStep: {
                                        readonly type: "string";
                                    };
                                    readonly steps: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["COMPLETED", "IN_PROGRESS"];
                                                    readonly description: "`COMPLETED` `IN_PROGRESS`";
                                                };
                                                readonly createTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                                readonly updateTime: {
                                                    readonly type: "string";
                                                    readonly description: "Date";
                                                };
                                            };
                                        };
                                    };
                                    readonly newIntegrationBackup: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly threadIdsMigrated: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeleted: {
                                        readonly type: "boolean";
                                    };
                                    readonly deletedAt: {
                                        readonly type: "string";
                                        readonly description: "Date";
                                    };
                                };
                            };
                        };
                        readonly isVirtual: {
                            readonly type: "boolean";
                        };
                        readonly nickname: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly isListed: {
                            readonly type: "boolean";
                        };
                        readonly title: {
                            readonly type: "string";
                        };
                        readonly propertyType: {
                            readonly type: "string";
                        };
                        readonly roomType: {
                            readonly type: "string";
                        };
                        readonly bedType: {
                            readonly type: "string";
                        };
                        readonly accommodates: {
                            readonly type: "number";
                        };
                        readonly bedrooms: {
                            readonly type: "number";
                        };
                        readonly areaSquareFeet: {
                            readonly type: "number";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly publishedAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly full: {
                                    readonly type: "string";
                                    readonly description: "full address";
                                    readonly examples: readonly ["Kaplan St 2, Ramat Gan, Israel"];
                                };
                                readonly lng: {
                                    readonly type: "number";
                                    readonly examples: readonly [34.8202173];
                                };
                                readonly lat: {
                                    readonly type: "number";
                                    readonly examples: readonly [32.0695525];
                                };
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly timezone: {
                            readonly type: "string";
                        };
                        readonly defaultCheckInTime: {
                            readonly type: "string";
                        };
                        readonly defaultCheckOutTime: {
                            readonly type: "string";
                        };
                        readonly cleaning: {
                            readonly type: "object";
                            readonly properties: {
                                readonly defaultCleaningTime: {
                                    readonly type: "string";
                                };
                                readonly instructions: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly cleaningStatus: {
                            readonly type: "object";
                            readonly properties: {
                                readonly value: {
                                    readonly type: "string";
                                    readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                    readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                };
                                readonly updatedAt: {
                                    readonly type: "string";
                                    readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                };
                            };
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly large: {
                                    readonly type: "string";
                                };
                                readonly caption: {
                                    readonly type: "string";
                                };
                                readonly height: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                                readonly original: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                };
                                readonly size: {
                                    readonly type: "number";
                                    readonly examples: readonly [39516];
                                };
                                readonly width: {
                                    readonly type: "number";
                                    readonly examples: readonly [756];
                                };
                            };
                        };
                        readonly pictures: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly regular: {
                                        readonly type: "string";
                                    };
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/c_fit,h_200/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                    };
                                    readonly caption: {
                                        readonly type: "string";
                                    };
                                    readonly height: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                    readonly original: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://res.cloudinary.com/guesty/image/upload/v1659982852/staging6/5213a2d206112710005d96ff/gglflnes8vodgkmtm08c.jpg"];
                                    };
                                    readonly size: {
                                        readonly type: "number";
                                        readonly examples: readonly [39516];
                                    };
                                    readonly width: {
                                        readonly type: "number";
                                        readonly examples: readonly [756];
                                    };
                                };
                            };
                        };
                        readonly amenities: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly amenitiesNotIncluded: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly terms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly minNights: {
                                    readonly type: "number";
                                };
                                readonly maxNights: {
                                    readonly type: "number";
                                };
                                readonly cancellation: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly prices: {
                            readonly type: "object";
                            readonly properties: {
                                readonly guestsIncludedInRegularFee: {
                                    readonly type: "number";
                                };
                                readonly extraPersonFee: {
                                    readonly type: "number";
                                };
                                readonly basePrice: {
                                    readonly type: "number";
                                };
                                readonly basePriceUSD: {
                                    readonly type: "number";
                                };
                                readonly monthlyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weeklyPriceFactor: {
                                    readonly type: "number";
                                };
                                readonly weekendBasePrice: {
                                    readonly type: "number";
                                };
                                readonly securityDepositFee: {
                                    readonly type: "number";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                };
                                readonly cleaningFee: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commissionTaxPrecentage: {
                            readonly type: "string";
                        };
                        readonly pms: {
                            readonly type: "object";
                            readonly properties: {
                                readonly active: {
                                    readonly type: "boolean";
                                };
                                readonly automation: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly autoList: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly active: {
                                                    readonly type: "boolean";
                                                };
                                                readonly config: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly inbox: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly customSignature: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly cleaningStatus: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly value: {
                                            readonly type: "string";
                                            readonly enum: readonly ["clean", "waitingForInspection", "dirty", "unknown"];
                                            readonly description: "`clean` `waitingForInspection` `dirty` `unknown`";
                                        };
                                        readonly updatedAt: {
                                            readonly type: "string";
                                            readonly examples: readonly ["2019-08-24T14:15:22Z"];
                                        };
                                    };
                                };
                                readonly paymentProcessing: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly active: {
                                            readonly type: "boolean";
                                        };
                                        readonly paymentProviders: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly stripe: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly active: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly status: {
                                                            readonly type: "string";
                                                        };
                                                        readonly accountName: {
                                                            readonly type: "string";
                                                        };
                                                        readonly defaultCurrency: {
                                                            readonly type: "string";
                                                        };
                                                        readonly syncedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date";
                                                        };
                                                        readonly payload: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly token_type: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_publishable_key: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly stripe_user_id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly scope: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly autoPayments: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly policy: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                            };
                        };
                        readonly receptionistsService: {
                            readonly title: "object";
                            readonly properties: {
                                readonly receptionDesk: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly ittt: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly screening: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly checklist: {
                                            readonly type: "array";
                                            readonly items: {};
                                        };
                                    };
                                };
                                readonly contactPersonUserId: {
                                    readonly type: "string";
                                };
                            };
                            readonly type: "object";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly customFields: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly calendarRules: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly publicDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly privateDescription: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly markups: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                };
                readonly owner: {
                    readonly type: "object";
                    readonly properties: {
                        readonly ownersPortalSettings: {
                            readonly type: "object";
                            readonly description: "The OPSettings object";
                            readonly properties: {
                                readonly bookedNights: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly revenue: {
                                    readonly type: "boolean";
                                    readonly examples: readonly [true];
                                };
                                readonly accommodationFare: {
                                    readonly type: "boolean";
                                };
                                readonly guestsReports: {
                                    readonly type: "boolean";
                                };
                                readonly occupancy: {
                                    readonly type: "boolean";
                                };
                                readonly avgNightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly revPal: {
                                    readonly type: "boolean";
                                };
                                readonly hostPayout: {
                                    readonly type: "boolean";
                                };
                                readonly nightlyRate: {
                                    readonly type: "boolean";
                                };
                                readonly minNights: {
                                    readonly type: "boolean";
                                };
                                readonly bookingSource: {
                                    readonly type: "boolean";
                                };
                                readonly showInternalNotesForBlocks: {
                                    readonly type: "boolean";
                                };
                                readonly showReservedReservations: {
                                    readonly type: "boolean";
                                };
                                readonly showHelpCenter: {
                                    readonly type: "boolean";
                                };
                                readonly showOwnerStatements: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservations: {
                                    readonly type: "boolean";
                                };
                                readonly allowReservationsUnavailableDates: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestFullName: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestEmail: {
                                    readonly type: "boolean";
                                };
                                readonly showGuestPhone: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly listings: {
                            readonly type: "array";
                            readonly description: "Listings Id";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["5e32fc021690ba0026f6f778", "5e32fc021690d15417543012", "5e32fc021690d15417543013"];
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly locale: {
                            readonly type: "string";
                            readonly description: "Localization";
                            readonly examples: readonly ["en-US"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly examples: readonly ["false"];
                        };
                        readonly allowReservations: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Use ownersPortalSettings.allowReservations";
                            readonly examples: readonly ["false"];
                        };
                        readonly showReservationTooltips: {
                            readonly type: "boolean";
                            readonly description: "Deprecated. Always treated as true";
                            readonly examples: readonly ["false"];
                        };
                        readonly businessInformation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly businessType: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly other: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly street: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly zipcode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                        readonly full: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly vatIdentificationNumber: {
                                    readonly type: "string";
                                };
                                readonly vatRate: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                                readonly ownerCommission: {
                                    readonly type: "number";
                                    readonly description: "Range between 0 - 100";
                                };
                            };
                        };
                        readonly birthday: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly anniversary: {
                            readonly type: "string";
                            readonly description: "Date";
                        };
                        readonly workingCapital: {
                            readonly description: "Deprecated. Use new [API](/reference/ownerscontroller_update)";
                            readonly type: "number";
                            readonly examples: readonly [0];
                        };
                        readonly firstName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad"];
                        };
                        readonly lastName: {
                            readonly type: "string";
                            readonly examples: readonly ["Kremer"];
                        };
                        readonly fullName: {
                            readonly type: "string";
                            readonly examples: readonly ["Elad Kremer"];
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "Primary email address";
                            readonly examples: readonly ["example@guesty.com"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly examples: readonly ["test address"];
                        };
                        readonly personalAddress: {
                            readonly type: "object";
                            readonly properties: {
                                readonly street: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly zipcode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly full: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "Primary phone number";
                            readonly examples: readonly ["15417543010"];
                        };
                        readonly picture: {
                            readonly type: "object";
                            readonly properties: {
                                readonly thumbnail: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                                readonly regular: {
                                    readonly type: "string";
                                };
                                readonly large: {
                                    readonly type: "string";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                            };
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly examples: readonly ["this is a note"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly description: "date ISO";
                            readonly examples: readonly ["2020-03-13T12:17:06.758Z"];
                        };
                    };
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly id: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutPropertiesHouseRulesUnitTypeUnittypeid: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly additionalRules: {
                readonly type: "string";
                readonly examples: readonly ["No alcohol"];
            };
            readonly childrenRules: {
                readonly type: "object";
                readonly properties: {
                    readonly suitableForChildren: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly suitableForInfants: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly examples: readonly ["Children rules reason"];
                    };
                };
            };
            readonly petsAllowed: {
                readonly type: "object";
                readonly properties: {
                    readonly enabled: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly chargeType: {
                        readonly type: "string";
                        readonly examples: readonly ["Credit"];
                    };
                };
            };
            readonly quietBetween: {
                readonly type: "object";
                readonly properties: {
                    readonly enabled: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly hours: {
                        readonly type: "object";
                        readonly properties: {
                            readonly start: {
                                readonly type: "string";
                                readonly examples: readonly ["22:00"];
                            };
                            readonly end: {
                                readonly type: "string";
                                readonly examples: readonly ["08:00"];
                            };
                        };
                    };
                };
            };
            readonly smokingAllowed: {
                readonly type: "object";
                readonly properties: {
                    readonly enabled: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly suitableForEvents: {
                readonly type: "object";
                readonly properties: {
                    readonly enabled: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly minimumAge: {
                readonly type: "integer";
                readonly examples: readonly [21];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["5accf6954c5ed10025902aed"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of the requested unitType";
                };
            };
            readonly required: readonly ["unitTypeId"];
        }];
    };
};
declare const PutReservationsId: {
    readonly body: {
        readonly type: "object";
        readonly additionalProperties: true;
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly integration: {
                    readonly type: "object";
                    readonly properties: {
                        readonly limitations: {
                            readonly type: "object";
                            readonly properties: {
                                readonly availableStatuses: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly bookingCom: {
                            readonly type: "object";
                            readonly properties: {
                                readonly invalidCreditCards: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                                readonly reports: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly platform: {
                            readonly type: "string";
                        };
                    };
                };
                readonly guestyFeeDetails: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly feeMinimum: {
                            readonly type: "number";
                        };
                        readonly fee: {
                            readonly type: "number";
                        };
                        readonly feeUsd: {
                            readonly type: "number";
                        };
                        readonly isMinimumFee: {
                            readonly type: "boolean";
                        };
                        readonly isMaximumFee: {
                            readonly type: "boolean";
                        };
                        readonly planItems: {
                            readonly type: "array";
                            readonly items: {};
                        };
                    };
                };
                readonly review: {
                    readonly type: "object";
                    readonly properties: {
                        readonly shouldReview: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly atTimeOfConfirmation: {
                    readonly type: "object";
                    readonly properties: {
                        readonly snapshotCreated: {
                            readonly type: "boolean";
                        };
                        readonly channelCommission: {
                            readonly type: "object";
                            readonly properties: {
                                readonly useAccountSettings: {
                                    readonly type: "boolean";
                                };
                                readonly _id: {
                                    readonly type: "string";
                                    readonly description: "Unique Id";
                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                };
                                readonly manual: {
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                        readonly taxes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly appliedOnFees: {
                                        readonly type: "string";
                                    };
                                    readonly appliedByDefaultOnChannels: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly units: {
                                        readonly type: "string";
                                    };
                                    readonly quantifier: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly appliedToAllFees: {
                                        readonly type: "boolean";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly monthlyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly weeklyPriceFactor: {
                            readonly type: "number";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly flag: {
                    readonly type: "boolean";
                };
                readonly accountingEnabled: {
                    readonly type: "boolean";
                };
                readonly isBMApplied: {
                    readonly type: "boolean";
                };
                readonly confirmedPreBookings: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly pulledByDailySync: {
                    readonly type: "boolean";
                };
                readonly manuallyCreated: {
                    readonly type: "boolean";
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly checkIn: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly checkOut: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly nightsCount: {
                    readonly type: "number";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly altered: {
                            readonly type: "boolean";
                        };
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly authenticationRequiredData: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly lastAuthMsgSentDate: {
                                                readonly type: "string";
                                                readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                            };
                                            readonly authenticationUrl: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly paymentMethodStatus: {
                                        readonly type: "string";
                                    };
                                    readonly isAuthorizationHold: {
                                        readonly type: "boolean";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly refunds: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly authorizationHoldCaptures: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly attempts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly createdAt: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                                };
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique Id";
                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                };
                                                readonly status: {
                                                    readonly type: "string";
                                                };
                                                readonly error: {
                                                    readonly type: "string";
                                                };
                                                readonly payload: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly charge: {
                                                            readonly type: "string";
                                                        };
                                                        readonly code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decline_code: {
                                                            readonly type: "string";
                                                        };
                                                        readonly doc_url: {
                                                            readonly type: "string";
                                                        };
                                                        readonly message: {
                                                            readonly type: "string";
                                                        };
                                                        readonly payment_intent: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                    readonly description: "Unique Id";
                                                                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly amount: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_capturable: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly amount_received: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly application: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly capture_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly charges: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly object: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly data: {
                                                                            readonly type: "array";
                                                                            readonly items: {
                                                                                readonly type: "object";
                                                                                readonly properties: {
                                                                                    readonly id: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly object: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly amount: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_captured: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly amount_refunded: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly application: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly billing_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly address: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly city: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line1: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly line2: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly postal_code: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly state: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly email: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly name: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly phone: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly calculated_statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly captured: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly created: {
                                                                                        readonly type: "number";
                                                                                    };
                                                                                    readonly currency: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly customer: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly description: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly disputed: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly failure_code: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly failure_message: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly livemode: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly metadata: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly accountId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly confirmationCode: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reservationId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                            readonly OTA: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly listingId: {
                                                                                                readonly type: "string";
                                                                                                readonly description: "Unique Id";
                                                                                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly outcome: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly network_status: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly reason: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_level: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly risk_score: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly seller_message: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly paid: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly payment_intent: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly payment_method_details: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly card: {
                                                                                                readonly type: "object";
                                                                                                readonly properties: {
                                                                                                    readonly brand: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly checks: {
                                                                                                        readonly type: "object";
                                                                                                        readonly properties: {
                                                                                                            readonly cvc_check: {
                                                                                                                readonly type: "string";
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                    readonly country: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly exp_month: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly exp_year: {
                                                                                                        readonly type: "number";
                                                                                                    };
                                                                                                    readonly fingerprint: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly funding: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly last4: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                    readonly network: {
                                                                                                        readonly type: "string";
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                            readonly type: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly refunded: {
                                                                                        readonly type: "boolean";
                                                                                    };
                                                                                    readonly refunds: {
                                                                                        readonly type: "object";
                                                                                        readonly properties: {
                                                                                            readonly object: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                            readonly data: {
                                                                                                readonly type: "array";
                                                                                                readonly items: {};
                                                                                            };
                                                                                            readonly has_more: {
                                                                                                readonly type: "boolean";
                                                                                            };
                                                                                            readonly total_count: {
                                                                                                readonly type: "number";
                                                                                            };
                                                                                            readonly url: {
                                                                                                readonly type: "string";
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                    readonly statement_descriptor: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                    readonly status: {
                                                                                        readonly type: "string";
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly has_more: {
                                                                            readonly type: "boolean";
                                                                        };
                                                                        readonly total_count: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly url: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly client_secret: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly confirmation_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly accountId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly confirmationCode: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly reservationId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                        readonly OTA: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly listingId: {
                                                                            readonly type: "string";
                                                                            readonly description: "Unique Id";
                                                                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                                                        };
                                                                    };
                                                                };
                                                                readonly next_action: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly type: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly use_stripe_sdk: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly type: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly merchant: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_d_secure_2_source: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_name: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly server_transaction_id: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_method_url: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly three_ds_optimizations: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly directory_server_encryption: {
                                                                                    readonly type: "object";
                                                                                    readonly properties: {
                                                                                        readonly directory_server_id: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly algorithm: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly certificate: {
                                                                                            readonly type: "string";
                                                                                        };
                                                                                        readonly root_certificate_authorities: {
                                                                                            readonly type: "array";
                                                                                            readonly items: {};
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly payment_method_options: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly card: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly request_three_d_secure: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly payment_method_types: {
                                                                    readonly type: "array";
                                                                    readonly items: {};
                                                                };
                                                                readonly statement_descriptor: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly status: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly payment_method: {
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly object: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly billing_details: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly address: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly city: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly country: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line1: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly line2: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly postal_code: {
                                                                                    readonly type: "string";
                                                                                };
                                                                                readonly state: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly email: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly name: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly phone: {
                                                                            readonly type: "string";
                                                                        };
                                                                    };
                                                                };
                                                                readonly card: {
                                                                    readonly type: "object";
                                                                    readonly properties: {
                                                                        readonly brand: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly checks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly cvc_check: {
                                                                                    readonly type: "string";
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly country: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly exp_month: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly exp_year: {
                                                                            readonly type: "number";
                                                                        };
                                                                        readonly fingerprint: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly funding: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly last4: {
                                                                            readonly type: "string";
                                                                        };
                                                                        readonly networks: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly available: {
                                                                                    readonly type: "array";
                                                                                    readonly items: {};
                                                                                };
                                                                            };
                                                                        };
                                                                        readonly three_d_secure_usage: {
                                                                            readonly type: "object";
                                                                            readonly properties: {
                                                                                readonly supported: {
                                                                                    readonly type: "boolean";
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                                readonly created: {
                                                                    readonly type: "number";
                                                                };
                                                                readonly customer: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly livemode: {
                                                                    readonly type: "boolean";
                                                                };
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                        readonly statusCode: {
                                                            readonly type: "number";
                                                        };
                                                        readonly requestId: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly receiptTargets: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                    readonly _id: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly shouldBePaidAt: {
                                        readonly type: "string";
                                        readonly examples: readonly ["2021-08-16T08:38:20.280Z"];
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly guestId: {
                                        readonly type: "string";
                                        readonly description: "Unique Id";
                                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly autoPaymentsPolicy: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly paymentProviderIds: {
                            readonly type: "array";
                            readonly items: {};
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly useAccountRevenueShare: {
                            readonly type: "boolean";
                        };
                        readonly netIncomeFormula: {
                            readonly type: "string";
                        };
                        readonly netIncome: {
                            readonly type: "number";
                        };
                        readonly commissionFormula: {
                            readonly type: "string";
                        };
                        readonly commission: {
                            readonly type: "number";
                        };
                        readonly commissionTaxPercentage: {
                            readonly type: "number";
                        };
                        readonly commissionTax: {
                            readonly type: "number";
                        };
                        readonly commissionIncTax: {
                            readonly type: "number";
                        };
                        readonly ownerRevenueFormula: {
                            readonly type: "string";
                        };
                        readonly ownerRevenue: {
                            readonly type: "number";
                        };
                        readonly currencyConversionRateToAccount: {
                            readonly type: "number";
                        };
                        readonly isTouchedPayments: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly guestId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly mtl: {
                    readonly type: "object";
                    readonly properties: {
                        readonly assigned: {
                            readonly type: "boolean";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                    };
                };
                readonly isReturningGuest: {
                    readonly type: "boolean";
                };
                readonly confirmedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly importedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly additionalFeesAtCreation: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly automationSources: {
                                readonly type: "array";
                                readonly items: {};
                            };
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly isPercentage: {
                                readonly type: "boolean";
                            };
                            readonly isAutomated: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "number";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique Id";
                                readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                            };
                            readonly multiplier: {
                                readonly type: "string";
                            };
                            readonly targetFee: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly pendingTasks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly lastUpdatedAt: {
                    readonly type: "string";
                    readonly examples: readonly ["2021-08-17T07:00:00.000Z"];
                };
                readonly __v: {
                    readonly type: "number";
                };
                readonly conversationId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Check out date is required"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutReservationsIdCustomFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly customFields: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fieldId: {
                            readonly type: "string";
                            readonly examples: readonly ["5f744b491af840002ca636a2"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly examples: readonly ["wifipassword"];
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutReservationsIdPaymentsPaymentid: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly status: {
                readonly type: "string";
                readonly description: "Payment status";
                readonly enum: readonly ["PENDING", "PENDING_AUTH", "FAILED", "SUCCEEDED", "CANCELLED", "AUTHORIZATION_HOLD_SUCCEEDED", "FAILED_FULLY_PAID", "PENDING_ACTIVATION"];
                readonly examples: readonly ["SUCCEEDED"];
            };
            readonly paymentMethod: {
                readonly type: "object";
                readonly description: "Payment method object\n **\"Recorded\" cash payment method example**";
                readonly properties: {
                    readonly method: {
                        readonly type: "string";
                        readonly enum: readonly ["CASH", "STRIPE", "AMARYLLIS", "CREDIT", "DEBIT", "ECHECK", "AIRBNB", "BANK_TRANSFER", "CREDIT_NOTE", "VOUCHER", "CHECK", "OTHER"];
                        readonly examples: readonly ["CASH"];
                    };
                    readonly saveForFutureUse: {
                        readonly type: "boolean";
                    };
                    readonly id: {
                        readonly type: "string";
                        readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    };
                };
                readonly required: readonly ["method"];
            };
            readonly amount: {
                readonly type: "number";
                readonly examples: readonly [10];
            };
            readonly shouldBePaidAt: {
                readonly type: "string";
                readonly format: "date";
                readonly description: "Expected charge date. \n Not passing this param at all or passing it with a past date, will immediately charge the payment.";
                readonly examples: readonly ["2023-05-30T12:00:00.000Z"];
            };
            readonly paidAt: {
                readonly type: "string";
                readonly format: "date";
                readonly description: "Used when adding a record to payment history - the actual charge date.";
                readonly examples: readonly ["2023-05-30T12:00:00.000Z"];
            };
            readonly note: {
                readonly type: "string";
                readonly examples: readonly ["Free text"];
            };
            readonly stripePaymentMethodToken: {
                readonly type: "string";
                readonly description: "Stripe pm_ token representing a credit card\n **tok_ kind of tokens are NOT supported**";
                readonly examples: readonly ["pm_stipetoken"];
            };
        };
        readonly required: readonly ["paymentId", "paymentMethod"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
                readonly paymentId: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment ID";
                };
            };
            readonly required: readonly ["id", "paymentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly paymentProviderId: {
                    readonly type: "string";
                };
                readonly paymentProvider: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly syncedAt: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly lastPendingPaymentDate: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                        readonly pendingPaymentsCount: {
                            readonly type: "number";
                        };
                        readonly paymentMethodsCount: {
                            readonly type: "number";
                        };
                        readonly providerAccountId: {
                            readonly type: "string";
                        };
                        readonly isDefault: {
                            readonly type: "boolean";
                        };
                        readonly providerType: {
                            readonly type: "string";
                        };
                        readonly connectedBy: {
                            readonly type: "string";
                        };
                        readonly accountName: {
                            readonly type: "string";
                        };
                        readonly defaultCurrency: {
                            readonly type: "string";
                        };
                        readonly statsLastUpdated: {
                            readonly type: "string";
                            readonly format: "date";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "string";
            readonly examples: readonly ["Method is required"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "string";
            readonly examples: readonly ["Forbidden"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Reservation Not Found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "string";
            readonly examples: readonly ["Internal Server Error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutSavedRepliesReplyid: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly question: {
                readonly type: "string";
                readonly examples: readonly ["TV"];
            };
            readonly answer: {
                readonly type: "string";
                readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
            };
            readonly applyWhenHasBooking: {
                readonly type: "boolean";
            };
            readonly applyWhenNoBooking: {
                readonly type: "boolean";
            };
            readonly isAbstract: {
                readonly type: "boolean";
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["user", "guest", "contact", "review"];
            };
            readonly language: {
                readonly description: "Language of the saved reply.";
                readonly type: "string";
                readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                readonly examples: readonly ["en"];
            };
            readonly excludeListingIds: {
                readonly description: "Exclude saved reply from the specific listings";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly listingsIds: {
                readonly description: "Apply saved reply for the specific listings";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly folder: {
                readonly type: "string";
                readonly examples: readonly ["City"];
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly filters: {
                readonly description: "Apply saved reply to listings which match the filters";
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Subject of the filter, e.g. listing.address.city";
                    };
                    readonly operator: {
                        readonly type: "string";
                        readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                    };
                    readonly value: {
                        readonly type: "array";
                        readonly description: "Values to filter by.";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly replyId: {
                    readonly type: "string";
                    readonly examples: readonly ["61643c7e8eb305002d90151f"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Saved Reply Id";
                };
            };
            readonly required: readonly ["replyId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly question: {
                    readonly type: "string";
                    readonly examples: readonly ["TV"];
                };
                readonly answer: {
                    readonly type: "string";
                    readonly examples: readonly ["Hi {{user}},\n\nWe have a 42\" Samsung LED in the living room."];
                };
                readonly applyWhenHasBooking: {
                    readonly type: "boolean";
                };
                readonly applyWhenNoBooking: {
                    readonly type: "boolean";
                };
                readonly isAbstract: {
                    readonly type: "boolean";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "guest", "contact", "review"];
                    readonly description: "`user` `guest` `contact` `review`";
                };
                readonly language: {
                    readonly description: "Language of the saved reply.\n\n`en` `fr` `es` `it` `ru` `ja` `zh`";
                    readonly type: "string";
                    readonly enum: readonly ["en", "fr", "es", "it", "ru", "ja", "zh"];
                    readonly examples: readonly ["en"];
                };
                readonly excludeListingIds: {
                    readonly description: "Exclude saved reply from the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly listingsIds: {
                    readonly description: "Apply saved reply for the specific listings";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                };
                readonly folder: {
                    readonly type: "string";
                    readonly examples: readonly ["City"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly filters: {
                    readonly description: "Apply saved reply to listings which match the filters";
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Unique Id";
                            readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                        };
                        readonly field: {
                            readonly type: "string";
                            readonly description: "Subject of the filter, e.g. listing.address.city";
                        };
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                        };
                        readonly value: {
                            readonly type: "array";
                            readonly description: "Values to filter by.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique Id";
                    readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "string";
            readonly examples: readonly ["Canned response not found"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutTasksOpenApiTaskid: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "The name you call the task";
                readonly examples: readonly ["Post Stay Clean"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Add any additional information needed to define the task.";
                readonly examples: readonly ["A regular clean between guest stays."];
            };
            readonly priority: {
                readonly type: "string";
                readonly description: "Priority value\n\nDefault: `medium`";
                readonly enum: readonly ["medium", "high", "low"];
                readonly default: "medium";
                readonly examples: readonly [2];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "Task types help you with better identification and reporting.";
                readonly enum: readonly ["cleaning", "maintenance", "inspection", "mid-stay", "runner", "sanitation", "check-in", "issue", "inventory", "administration"];
                readonly examples: readonly ["cleaning"];
            };
            readonly assigneeGroup: {
                readonly type: "array";
                readonly description: "The team the assignees are part of. This is a tag.";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["Cleaners A"];
                };
            };
            readonly assigneeId: {
                readonly description: "The unique identifier of the person assigned to the task.";
                readonly type: "string";
                readonly examples: readonly ["69gvymvx55zwf5nn2ubng97cm"];
            };
            readonly supervisorId: {
                readonly type: "string";
                readonly description: "The uniqueID of the person assigned to supervise the task.";
                readonly examples: readonly ["eg2x3iyeqnttngcn4mhzrzawr"];
            };
            readonly checklist: {
                readonly type: "array";
                readonly description: "A list of action items that help define the task.";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["Clean floors"];
                };
            };
            readonly attachments: {
                readonly type: "array";
                readonly description: "The place to attach external files needed for the task.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                            readonly examples: readonly ["attachment.png"];
                        };
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment";
                            readonly examples: readonly [4401630];
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                            readonly default: "cbt";
                            readonly examples: readonly ["cbt"];
                        };
                    };
                };
            };
            readonly startTime: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and time the task must begin (specific task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T11:30:00-04:00"];
            };
            readonly canStartAfter: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T11:30:00-04:00"];
            };
            readonly mustFinishBefore: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                readonly examples: readonly ["2021-05-10T14:00:00-04:00"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "The object ID of the listing the task is attached to";
                readonly examples: readonly ["5803ca18e48f450300c76173"];
            };
            readonly reservationId: {
                readonly type: "string";
                readonly description: "The reservation ID of the listing the task is attached to";
                readonly examples: readonly ["5803ca18e48f450300c76173"];
            };
            readonly comments: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "Comment identifier for update specific comment";
                            readonly examples: readonly ["5803ca18e48f450300c76173"];
                        };
                        readonly text: {
                            readonly type: "string";
                            readonly description: "Textual comment";
                            readonly examples: readonly ["This is a cool comment"];
                        };
                        readonly attachments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly examples: readonly ["attachment.png"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["pending", "confirmed", "in progress", "completed", "canceled"];
            };
            readonly plannedDuration: {
                readonly type: "number";
                readonly description: "The amount of time budgeted for the task (hours).";
                readonly examples: readonly [2];
            };
            readonly expenses: {
                readonly type: "array";
                readonly maxItems: 20;
                readonly description: "To update existing expenses add existing state of expenses with ids and add changes. To add new expenses, add expenses without id fields";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["name", "category", "vendorId", "amount", "shareSplit"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "";
                            readonly examples: readonly ["66990b0c1bce8d4b6816d272"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Expense name.";
                            readonly examples: readonly ["Maintenance expense"];
                        };
                        readonly category: {
                            readonly type: "string";
                            readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                            readonly description: "Expense category";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Expense description";
                            readonly examples: readonly ["Bulb replacement"];
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "Amount value";
                            readonly examples: readonly [20.45];
                        };
                        readonly recognitionDate: {
                            readonly type: "string";
                            readonly format: "date";
                            readonly description: "Expense recognition date. ISO 8601 Date format (year-month-day). If no date provided, will be used date of task creation.";
                            readonly examples: readonly ["2023-10-27"];
                        };
                        readonly vendorId: {
                            readonly type: "string";
                            readonly description: "You can get your vendor ID [here](/reference/vendorscontroller_getall)";
                            readonly examples: readonly ["5f4f6e1c1c6e4e001f7e8b4e"];
                        };
                        readonly shareSplit: {
                            readonly type: "number";
                            readonly description: "A share split is a floating point number that represents the percentage. For example, \n      - \\`0.5\\` means that the share is 50% between PMC and Owner.\n      - \\`0.1\\` means that the share is 10% Owner and 90% PMC.\n      - \\`0\\` means that the charge covered 100% by PMC.";
                            readonly examples: readonly [0.5];
                        };
                        readonly attachments: {
                            readonly type: "object";
                            readonly description: "Add attachments to expense.";
                            readonly required: readonly ["url", "extension", "fileName"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "";
                                    readonly examples: readonly ["66990b0c1bce8d4b6816d272"];
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "URL to CDN where attachment is stored. Max length is 2048 characters";
                                    readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                                };
                                readonly extension: {
                                    readonly type: "string";
                                    readonly description: "Attachment file extension. Max length is 10 characters";
                                    readonly examples: readonly ["png"];
                                };
                                readonly fileName: {
                                    readonly type: "string";
                                    readonly description: "Attachment file name. Max length is 256 characters";
                                    readonly examples: readonly ["Invoice copy"];
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly taskId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Task id";
                };
            };
            readonly required: readonly ["taskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the task.";
                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                };
                readonly shortTaskId: {
                    readonly type: "object";
                    readonly description: "A short task ID for quick reference.";
                    readonly properties: {
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assigneeGroup: {
                    readonly type: "array";
                    readonly description: "The team the assignees is part of. This is a tag";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["cleaners"];
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Task types help you with better identification and reporting.";
                };
                readonly checklistFinished: {
                    readonly type: "array";
                    readonly description: "A list of finished action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklist: {
                    readonly type: "array";
                    readonly description: "A list of action items that help define the task.";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["Clean room A"];
                    };
                };
                readonly checklistAggregated: {
                    readonly type: "array";
                    readonly description: "A list of action items.";
                    readonly items: {};
                };
                readonly tags: {
                    readonly type: "array";
                    readonly description: "List of tags the task is related to";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the task, being one of the following enumerators: pending,confirmed, in progress,completed,canceled.";
                    readonly examples: readonly ["confirmed"];
                };
                readonly comment: {
                    readonly type: "object";
                    readonly description: "Notes added to the task by the assignee and supervisor. Contains the text, user ID and date the comment was published.";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the comment.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly text: {
                            readonly type: "string";
                            readonly description: "The comment text.";
                        };
                        readonly by: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the user who made the comment.";
                        };
                        readonly date: {
                            readonly type: "string";
                            readonly description: "The date and time the comment was posted.";
                        };
                    };
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The ID of the account the task is attached to";
                    readonly examples: readonly ["Q5fb67280e396Q77002e6c2683"];
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly description: "The ID of the user who created the task.";
                    readonly examples: readonly ["Q5fb67280e39Q677002e6c268c"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "The name you call the task";
                    readonly examples: readonly ["Post Stay Clean"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Add any additional information needed to define the task.";
                    readonly examples: readonly ["A regular clean between guest stays."];
                };
                readonly priority: {
                    readonly type: "string";
                    readonly description: "Assign the level of importance to the task in enumerators - High,Medium,Low\n\n`medium` `high` `low`";
                    readonly enum: readonly ["medium", "high", "low"];
                    readonly examples: readonly ["high"];
                };
                readonly assigneeId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the person assigned to the task.";
                };
                readonly supervisorId: {
                    readonly type: "string";
                    readonly description: "The uniqueID of the person assigned to supervise the task.";
                    readonly examples: readonly ["64a6b8cfa08e0446a6f4b840"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "";
                    readonly examples: readonly ["Australia/Sydney"];
                };
                readonly afterEffects: {
                    readonly type: "object";
                    readonly description: "Actions to be triggered upon the completion of the task.";
                    readonly properties: {
                        readonly action: {
                            readonly type: "string";
                            readonly description: "The action to be performed.";
                        };
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "The unique identifier of the action.";
                            readonly examples: readonly ["5fc628f3d6391a00363234d"];
                        };
                        readonly payload: {
                            readonly type: "object";
                            readonly description: "The information or data to be included within the action.";
                            readonly properties: {
                                readonly target: {
                                    readonly type: "string";
                                    readonly description: "The intended recipient.\n\n`user` `contact` `guest` `supervisor`";
                                    readonly enum: readonly ["user", "contact", "guest", "supervisor"];
                                };
                                readonly targetId: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the target.";
                                };
                                readonly message: {
                                    readonly type: "object";
                                    readonly description: "The message object.";
                                    readonly properties: {
                                        readonly subject: {
                                            readonly type: "string";
                                            readonly description: "States topic of the message.";
                                        };
                                        readonly body: {
                                            readonly type: "string";
                                            readonly description: "Contains the message string.";
                                        };
                                        readonly attachments: {
                                            readonly type: "object";
                                            readonly description: "Contains and describes an attached file.";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier of the attachment object.";
                                                    readonly examples: readonly ["5fc628f3d6391a00363234d"];
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "URL location of the attached file.";
                                                };
                                                readonly title: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the file attachment.";
                                                    readonly examples: readonly ["Post Stay Clean"];
                                                };
                                                readonly mimetype: {
                                                    readonly type: "string";
                                                    readonly description: "State the kind of file attached.";
                                                };
                                                readonly size: {
                                                    readonly type: "string";
                                                    readonly description: "The storage size of the attachment.";
                                                };
                                                readonly client: {
                                                    readonly type: "string";
                                                    readonly description: "";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly attachments: {
                    readonly type: "object";
                    readonly description: "The place to attach external files needed for the task.";
                    readonly properties: {
                        readonly title: {
                            readonly type: "string";
                            readonly description: "Title name of the attached file.";
                            readonly examples: readonly ["Post Stay Clean"];
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL location of the attached file.";
                        };
                        readonly mimetype: {
                            readonly type: "string";
                            readonly description: "State the kind of file attached.";
                        };
                        readonly size: {
                            readonly type: "number";
                            readonly description: "The storage size of the attachment.";
                        };
                        readonly client: {
                            readonly type: "string";
                            readonly description: "Add any additional information needed to define the task.";
                        };
                    };
                };
                readonly timing: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["none", "specific", "flexible", "legacy"];
                            readonly examples: readonly ["specific"];
                            readonly description: "`none` `specific` `flexible` `legacy`";
                        };
                        readonly startTime: {
                            readonly type: "string";
                            readonly description: "The date and time the task must begin (fixed task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                            readonly examples: readonly ["2024-01-10T21:00:00.000Z"];
                        };
                        readonly canStartAfter: {
                            readonly type: "string";
                            readonly description: "The date and the time after which the task can begin (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                        readonly mustFinishBefore: {
                            readonly type: "string";
                            readonly description: "The date and time before which the task must be completed (flexible task). Each task scheduling should be set for fixed or flexible time. If “startTime” has value, leave “canStartFrom” and “mustFinishBefore” blank, and vice versa";
                        };
                    };
                };
                readonly apply: {
                    readonly type: "object";
                    readonly description: "";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["listing", "reservation", "owner-reservation"];
                            readonly examples: readonly ["reservation"];
                            readonly description: "`listing` `reservation` `owner-reservation`";
                        };
                        readonly listingId: {
                            readonly type: "string";
                            readonly description: "The object ID of the listing the task is attached to. Only when reservationId don't exist";
                            readonly examples: readonly ["5fba2d97d8e638002d76d842"];
                        };
                        readonly reservationId: {
                            readonly type: "string";
                            readonly description: "The reservation ID of the listing the task is attached to. Only when listingId don't exist";
                            readonly examples: readonly ["9fba3d97d8e62500Gd7f6d842"];
                        };
                        readonly ownerReservationId: {
                            readonly type: "string";
                            readonly description: "The owner reservation ID of the listing the task is attached to. Only when owner reservation ";
                        };
                    };
                };
                readonly plannedDuration: {
                    readonly type: "number";
                    readonly description: "The amount of time budgeted for the task (hours).";
                    readonly examples: readonly [0.08];
                };
                readonly pendingExpenses: {
                    readonly description: "The list of expenses that will be created upon task completion";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Not available for Pending expenses";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
                readonly postedExpenses: {
                    readonly type: "array";
                    readonly description: "The list of recognized expenses";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "Expense id";
                                readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Expense name";
                                readonly examples: readonly ["Cleaning"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Expense description";
                                readonly examples: readonly ["Expense details"];
                            };
                            readonly shareSplit: {
                                readonly type: "number";
                                readonly description: "Expense split coefficient";
                                readonly examples: readonly ["0.3"];
                            };
                            readonly shareType: {
                                readonly enum: readonly ["percent"];
                                readonly description: "Share split type will be always `percent`";
                            };
                            readonly accounting: {
                                readonly type: "object";
                                readonly description: "Expense accounting data";
                                readonly properties: {
                                    readonly charges: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "number";
                                            readonly description: "Charge ids";
                                        };
                                    };
                                    readonly failureCode: {
                                        readonly type: "number";
                                        readonly description: "Charge creation Error code";
                                        readonly examples: readonly [10001];
                                    };
                                    readonly requestId: {
                                        readonly type: "string";
                                        readonly description: "Request id for debugging";
                                        readonly examples: readonly ["456dd47bdb3862d2"];
                                    };
                                };
                            };
                            readonly category: {
                                readonly type: "object";
                                readonly description: "Expense category\n\n`advertising` `cleaning` `electricity` `furniture_appliances` `gas` `internet` `lock_automation` `management` `mortgage` `pest_control` `pool_cleaning` `property_taxes` `repairs_maintenance` `supplies_purchases` `other_misc` `taxes_paid` `telephone` `television` `trash` `water_septic` `guest_cleaning` `owner_cleaning` `channel_commission` `payment_charge` `pet_fee` `startup_fee` `fotoshoot` `vat`";
                                readonly enum: readonly ["advertising", "cleaning", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat"];
                                readonly examples: readonly ["pool_cleaning"];
                                readonly additionalProperties: true;
                            };
                            readonly chargeable: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly examples: readonly [25];
                                    };
                                };
                            };
                            readonly payTo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Vendor id";
                                        readonly examples: readonly ["664c6a01b6d00de42dbda741"];
                                    };
                                };
                            };
                            readonly attachments: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "Url for cdc where attachment is uploaded";
                                    };
                                    readonly originalExtension: {
                                        readonly type: "string";
                                        readonly description: "Attachment extension";
                                    };
                                    readonly originalFilename: {
                                        readonly type: "string";
                                        readonly description: "Attachment file name";
                                    };
                                    readonly uploadedAt: {
                                        readonly type: "string";
                                        readonly description: "Date of attachment uploading";
                                    };
                                    readonly uploadedBy: {
                                        readonly type: "string";
                                        readonly description: "User id who upload attachment";
                                        readonly examples: readonly ["66851bfe7ac4c20e71804f08"];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutViewsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly _id: {
                readonly type: "string";
                readonly description: "Unique id";
            };
            readonly accountId: {
                readonly type: "string";
                readonly description: "Id of the user owning this view";
            };
            readonly title: {
                readonly type: "string";
                readonly description: "Title for the view";
            };
            readonly filters: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly field: {
                            readonly type: "string";
                            readonly description: "Subject of the filter";
                        };
                        readonly operator: {
                            readonly type: "string";
                            readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value to filter by.";
                        };
                        readonly context: {
                            readonly type: "string";
                            readonly default: any;
                            readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                        };
                    };
                    readonly required: readonly ["field", "operator", "value"];
                };
            };
            readonly fields: {
                readonly type: "string";
                readonly description: "Selection of fields, separated by space";
            };
            readonly sort: {
                readonly type: "string";
                readonly description: "ascending sort , use - to descending sort";
            };
            readonly createdAt: {
                readonly type: "string";
            };
            readonly updatedAt: {
                readonly type: "string";
            };
            readonly scheduledEmails: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly days: {
                            readonly type: "array";
                            readonly description: "Array of numbers 0-6, number per day";
                            readonly examples: readonly ["4 (send on Thursday)"];
                            readonly items: {};
                        };
                        readonly recipient: {
                            readonly type: "string";
                            readonly description: "Emails separated by comma";
                        };
                        readonly hour: {
                            readonly type: "number";
                            readonly description: "when the report should be sent";
                        };
                    };
                    readonly required: readonly ["hour"];
                };
            };
            readonly shares: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly contactId: {
                            readonly type: "string";
                            readonly description: "Required Contact ID to share with";
                            readonly examples: readonly ["5926bdfb1bfe871000d0a745"];
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5fa02fa358d2db673e17bc2d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "View ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "Unique id";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Id of the user owning this view";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title for the view";
                };
                readonly filters: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly field: {
                                readonly type: "string";
                                readonly description: "Subject of the filter";
                            };
                            readonly operator: {
                                readonly type: "string";
                                readonly description: "Enhanced MongoDB comparison operator: $eq, $not, $contains, $notcontains, $gt, $lt, $between";
                            };
                            readonly value: {
                                readonly type: "string";
                                readonly description: "Value to filter by.";
                            };
                            readonly context: {
                                readonly type: "string";
                                readonly default: any;
                                readonly description: "Optional preprocessing. Options are now, createdAt, confirmedAt, canceledAt, alteredAt. When given, the date in value is relative to the context.";
                            };
                        };
                        readonly required: readonly ["field", "operator", "value"];
                    };
                };
                readonly fields: {
                    readonly type: "string";
                    readonly description: "Selection of fields, separated by space";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly description: "ascending sort , use - to descending sort";
                };
                readonly createdAt: {
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly type: "string";
                };
                readonly scheduledEmails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly days: {
                                readonly type: "array";
                                readonly description: "Array of numbers 0-6, number per day";
                                readonly examples: readonly ["4 (send on Thursday)"];
                                readonly items: {};
                            };
                            readonly recipient: {
                                readonly type: "string";
                                readonly description: "Emails separated by comma";
                            };
                            readonly hour: {
                                readonly type: "number";
                                readonly description: "when the report should be sent";
                            };
                        };
                        readonly required: readonly ["hour"];
                    };
                };
                readonly shares: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly contactId: {
                                readonly type: "string";
                                readonly description: "Required Contact ID to share with";
                                readonly examples: readonly ["5926bdfb1bfe871000d0a745"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutWebhooksId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly url: {
                readonly type: "string";
                readonly examples: readonly ["https://www.hookurl.com"];
            };
            readonly events: {
                readonly type: "array";
                readonly description: "add list of event to register for the provided url";
                readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Webhook ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly accountId: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly _id: {
                        readonly type: "string";
                        readonly description: "Unique Id";
                        readonly examples: readonly ["563e0b6a08a2710e00057b82"];
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly examples: readonly ["https://www.hookurl.com"];
                    };
                    readonly events: {
                        readonly type: "array";
                        readonly description: "add list of event to register for the provided url\n\n`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                        readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["guest.created", "guest.deleted", "guest.updated", "listing.new", "listing.updated", "listing.removed", "listing.calendar.updated", "payments.failed", "reservation.messageReceived", "reservation.new", "reservation.updated", "reservation.messageSent", "task.created", "task.deleted", "task.updated", "reservation_update_shortlist", "payments.method.received"];
                            readonly description: "`guest.created` `guest.deleted` `guest.updated` `listing.new` `listing.updated` `listing.removed` `listing.calendar.updated` `payments.failed` `reservation.messageReceived` `reservation.new` `reservation.updated` `reservation.messageSent` `task.created` `task.deleted` `task.updated` `reservation_update_shortlist` `payments.method.received`";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const QuotesOpenApiControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly checkInDateLocalized: {
                readonly type: "string";
                readonly description: "Localized to listing timezone reservation check-in date (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-04"];
            };
            readonly checkOutDateLocalized: {
                readonly type: "string";
                readonly description: "Localized to listing timezone reservation checkout date (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-05"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "Guesty listing ID";
                readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Define the source for getting an updated price quote";
                readonly examples: readonly ["manual"];
            };
            readonly guestsCount: {
                readonly type: "number";
                readonly description: "Number of guests to be included in the quote";
                readonly minimum: 1;
                readonly examples: readonly [2];
            };
            readonly numberOfGuests: {
                readonly description: "Keeps information on the number of guests";
                readonly type: "object";
                readonly properties: {
                    readonly numberOfChildren: {
                        readonly type: "number";
                        readonly description: "Number of children in the reservation. It can be zero";
                    };
                    readonly numberOfInfants: {
                        readonly type: "number";
                        readonly description: "Number of infants in the reservation. It can be zero";
                    };
                    readonly numberOfAdults: {
                        readonly type: "number";
                        readonly description: "Count of adults, must be > 0";
                    };
                };
            };
            readonly ignoreCalendar: {
                readonly type: "boolean";
                readonly description: "The system will check calendar availability and decline (401) if unavailable unless this flag is set to true";
            };
            readonly ignoreTerms: {
                readonly type: "boolean";
                readonly description: "The system will ensure the reservation accords with the terms (min, max nights, any other terms) of the property and will decline(401) if it is. To override, set this flag to true";
            };
            readonly ignoreBlocks: {
                readonly type: "boolean";
                readonly description: "Set this flag to true to ignore existing flexible blocks (advance notice, preparation time, etc)";
            };
            readonly couponCode: {
                readonly type: "string";
                readonly description: "Coupon code to be applied to the quote";
                readonly examples: readonly ["OOM20-DISCOUNT"];
            };
        };
        readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized", "listingId", "source", "guestsCount"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["valid"];
                    readonly description: "`valid`";
                };
                readonly guestsCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly channel: {
                    readonly enum: readonly ["manual_reservations", "owner_reservations", "booking_engine"];
                    readonly type: "string";
                    readonly description: "`manual_reservations` `owner_reservations` `booking_engine`";
                };
                readonly source: {
                    readonly type: "string";
                    readonly examples: readonly ["source-fb-for-bi"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly unassign: {
                    readonly type: "boolean";
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly rates: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly bookerId: {
                    readonly type: "string";
                };
                readonly coupons: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
                readonly promotions: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly alterationPayload: {
                    readonly type: "object";
                    readonly properties: {
                        readonly dates: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checkInDateLocalized: {
                                    readonly type: "string";
                                };
                                readonly checkOutDateLocalized: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized"];
                        };
                        readonly unit: {
                            readonly type: "object";
                            readonly properties: {
                                readonly unitId: {
                                    readonly type: "string";
                                };
                                readonly unitTypeId: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["unitTypeId"];
                        };
                        readonly guestsCount: {
                            readonly type: "number";
                        };
                        readonly ratePlanId: {
                            readonly type: "string";
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                            readonly type: "string";
                            readonly description: "`confirmed` `reserved` `awaiting_payment` `inquiry` `canceled` `closed` `declined` `expired`";
                        };
                        readonly numberOfGuests: {
                            readonly type: "object";
                            readonly properties: {
                                readonly numberOfChildren: {
                                    readonly type: "number";
                                };
                                readonly numberOfInfants: {
                                    readonly type: "number";
                                };
                                readonly numberOfAdults: {
                                    readonly type: "number";
                                };
                            };
                            readonly required: readonly ["numberOfAdults"];
                        };
                    };
                    readonly required: readonly ["reservationId"];
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
                readonly pointOfSale: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "status", "guestsCount", "channel", "source", "createdAt", "expiresAt", "unitTypeId", "checkInDateLocalized", "checkOutDateLocalized", "rates", "coupons", "promotions"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const QuotesOpenApiControllerCreateMultiple: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly quotes: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly checkInDateLocalized: {
                            readonly type: "string";
                            readonly description: "Booker's check-in date";
                            readonly examples: readonly ["2021-01-04"];
                        };
                        readonly checkOutDateLocalized: {
                            readonly type: "string";
                            readonly description: "Booker's check-out date";
                            readonly examples: readonly ["2021-01-05"];
                        };
                        readonly unitId: {
                            readonly type: "string";
                            readonly description: "The unit ID (MTL Child or Single listing)";
                            readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                        };
                        readonly unitTypeId: {
                            readonly type: "string";
                            readonly description: "The unit type ID (MTL Parent or Single listing)";
                            readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                        };
                        readonly guestsCount: {
                            readonly type: "number";
                            readonly description: "Count of guests";
                            readonly minimum: 1;
                            readonly examples: readonly [2];
                        };
                        readonly bookerId: {
                            readonly type: "string";
                            readonly description: "The booker ID";
                            readonly examples: readonly ["1e384c9fc2700d002670b61c"];
                        };
                        readonly source: {
                            readonly type: "string";
                            readonly description: "Source of the inquiry";
                            readonly examples: readonly ["fb-campaign"];
                        };
                        readonly channel: {
                            readonly type: "string";
                            readonly description: "The channel that sent the inquiry";
                            readonly enum: readonly ["manual_reservations", "owner_reservations", "booking_engine"];
                        };
                        readonly numberOfGuests: {
                            readonly description: "Keeps information on the number of guests";
                            readonly type: "object";
                            readonly properties: {
                                readonly numberOfChildren: {
                                    readonly type: "number";
                                    readonly description: "Number of children in the reservation. It can be zero";
                                };
                                readonly numberOfInfants: {
                                    readonly type: "number";
                                    readonly description: "Number of infants in the reservation. It can be zero";
                                };
                                readonly numberOfAdults: {
                                    readonly type: "number";
                                    readonly description: "Count of adults, must be > 0";
                                };
                            };
                        };
                        readonly applyPromotions: {
                            readonly type: "boolean";
                            readonly description: "Whether to apply promotions";
                            readonly default: true;
                            readonly examples: readonly [false];
                        };
                        readonly count: {
                            readonly type: "number";
                            readonly description: "The number of inquiries to create";
                            readonly examples: readonly [2];
                        };
                    };
                    readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized", "unitTypeId", "source", "applyPromotions", "count"];
                };
            };
        };
        readonly required: readonly ["quotes"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly errors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly unitTypeId: {
                                readonly type: "string";
                            };
                            readonly unitId: {
                                readonly type: "string";
                            };
                            readonly inquiryId: {
                                readonly type: "string";
                            };
                            readonly errorMessage: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["unitTypeId", "unitId", "inquiryId", "errorMessage"];
                    };
                };
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                            };
                            readonly reservationId: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["valid"];
                                readonly description: "`valid`";
                            };
                            readonly guestsCount: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly channel: {
                                readonly enum: readonly ["manual_reservations", "owner_reservations", "booking_engine"];
                                readonly type: "string";
                                readonly description: "`manual_reservations` `owner_reservations` `booking_engine`";
                            };
                            readonly source: {
                                readonly type: "string";
                                readonly examples: readonly ["source-fb-for-bi"];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly expiresAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly unitTypeId: {
                                readonly type: "string";
                            };
                            readonly unitId: {
                                readonly type: "string";
                            };
                            readonly unassign: {
                                readonly type: "boolean";
                            };
                            readonly checkInDateLocalized: {
                                readonly type: "string";
                            };
                            readonly checkOutDateLocalized: {
                                readonly type: "string";
                            };
                            readonly rates: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly bookerId: {
                                readonly type: "string";
                            };
                            readonly coupons: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly promotions: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly alterationPayload: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly dates: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly checkInDateLocalized: {
                                                readonly type: "string";
                                            };
                                            readonly checkOutDateLocalized: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized"];
                                    };
                                    readonly unit: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly unitId: {
                                                readonly type: "string";
                                            };
                                            readonly unitTypeId: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["unitTypeId"];
                                    };
                                    readonly guestsCount: {
                                        readonly type: "number";
                                    };
                                    readonly ratePlanId: {
                                        readonly type: "string";
                                    };
                                    readonly reservationId: {
                                        readonly type: "string";
                                    };
                                    readonly status: {
                                        readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                                        readonly type: "string";
                                        readonly description: "`confirmed` `reserved` `awaiting_payment` `inquiry` `canceled` `closed` `declined` `expired`";
                                    };
                                    readonly numberOfGuests: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly numberOfChildren: {
                                                readonly type: "number";
                                            };
                                            readonly numberOfInfants: {
                                                readonly type: "number";
                                            };
                                            readonly numberOfAdults: {
                                                readonly type: "number";
                                            };
                                        };
                                        readonly required: readonly ["numberOfAdults"];
                                    };
                                };
                                readonly required: readonly ["reservationId"];
                            };
                            readonly numberOfGuests: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly numberOfChildren: {
                                        readonly type: "number";
                                        readonly description: "Number of children";
                                        readonly examples: readonly [1];
                                    };
                                    readonly numberOfInfants: {
                                        readonly type: "number";
                                        readonly description: "Number of infants";
                                        readonly examples: readonly [1];
                                    };
                                    readonly numberOfPets: {
                                        readonly type: "number";
                                        readonly description: "Number of pets";
                                        readonly examples: readonly [1];
                                    };
                                    readonly numberOfAdults: {
                                        readonly type: "number";
                                        readonly description: "Number of adults";
                                        readonly examples: readonly [1];
                                    };
                                };
                                readonly required: readonly ["numberOfAdults"];
                            };
                            readonly pointOfSale: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["_id", "accountId", "status", "guestsCount", "channel", "source", "createdAt", "expiresAt", "unitTypeId", "checkInDateLocalized", "checkOutDateLocalized", "rates", "coupons", "promotions"];
                    };
                };
            };
            readonly required: readonly ["errors", "results"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const QuotesOpenApiControllerGetQuote: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly quoteId: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The unique identifier of the quote being retrieved";
                };
            };
            readonly required: readonly ["quoteId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["valid"];
                    readonly description: "`valid`";
                };
                readonly guestsCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly channel: {
                    readonly enum: readonly ["manual_reservations", "owner_reservations", "booking_engine"];
                    readonly type: "string";
                    readonly description: "`manual_reservations` `owner_reservations` `booking_engine`";
                };
                readonly source: {
                    readonly type: "string";
                    readonly examples: readonly ["source-fb-for-bi"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly unassign: {
                    readonly type: "boolean";
                };
                readonly checkInDateLocalized: {
                    readonly type: "string";
                };
                readonly checkOutDateLocalized: {
                    readonly type: "string";
                };
                readonly rates: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly bookerId: {
                    readonly type: "string";
                };
                readonly coupons: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
                readonly promotions: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly alterationPayload: {
                    readonly type: "object";
                    readonly properties: {
                        readonly dates: {
                            readonly type: "object";
                            readonly properties: {
                                readonly checkInDateLocalized: {
                                    readonly type: "string";
                                };
                                readonly checkOutDateLocalized: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized"];
                        };
                        readonly unit: {
                            readonly type: "object";
                            readonly properties: {
                                readonly unitId: {
                                    readonly type: "string";
                                };
                                readonly unitTypeId: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["unitTypeId"];
                        };
                        readonly guestsCount: {
                            readonly type: "number";
                        };
                        readonly ratePlanId: {
                            readonly type: "string";
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                            readonly type: "string";
                            readonly description: "`confirmed` `reserved` `awaiting_payment` `inquiry` `canceled` `closed` `declined` `expired`";
                        };
                        readonly numberOfGuests: {
                            readonly type: "object";
                            readonly properties: {
                                readonly numberOfChildren: {
                                    readonly type: "number";
                                };
                                readonly numberOfInfants: {
                                    readonly type: "number";
                                };
                                readonly numberOfAdults: {
                                    readonly type: "number";
                                };
                            };
                            readonly required: readonly ["numberOfAdults"];
                        };
                    };
                    readonly required: readonly ["reservationId"];
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
                readonly pointOfSale: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["_id", "accountId", "status", "guestsCount", "channel", "source", "createdAt", "expiresAt", "unitTypeId", "checkInDateLocalized", "checkOutDateLocalized", "rates", "coupons", "promotions"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Rate plan name.";
                readonly examples: readonly ["My RatePlan"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Describe the rate plan.";
                readonly examples: readonly ["Rate plan description."];
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["independent"];
                readonly description: "Rate plan type.";
                readonly examples: readonly ["independent"];
            };
            readonly pricingModel: {
                readonly enum: readonly ["nightly_rate"];
                readonly type: readonly ["string", "null"];
                readonly description: "The pricing model.";
                readonly examples: readonly ["nightly_rate"];
            };
            readonly cancellationPolicy: {
                readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free", "special", "direct_reservation_long_stay"];
                readonly type: readonly ["string", "null"];
                readonly description: "The rate plan cancellation policy.";
                readonly examples: readonly ["strict"];
            };
            readonly cancellationFee: {
                readonly enum: readonly [100, 50, 0];
                readonly type: readonly ["number", "null"];
                readonly description: "The rate plan cancellation fee.";
                readonly examples: readonly [100];
            };
            readonly channelSync: {
                readonly default: readonly [];
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                };
                readonly description: "The channel to which the rate plan applies.";
                readonly examples: readonly ["bookingCom"];
            };
            readonly mealPlans: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["breakfast", "lunch", "dinner", "all_inclusive"];
                };
                readonly description: "Rate plan meal plans.";
                readonly examples: readonly ["dinner", "lunch"];
            };
            readonly availabilityRules: {
                readonly description: "Rate plan availability rules.n";
                readonly type: "object";
                readonly properties: {
                    readonly advanceNotice: {
                        readonly type: "number";
                        readonly description: "advance notice";
                        readonly examples: readonly [1];
                    };
                    readonly bookingWindow: {
                        readonly type: "number";
                        readonly description: "booking window";
                        readonly examples: readonly [3];
                    };
                };
            };
        };
        readonly required: readonly ["name", "type"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerGetAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The number of items to skip before starting to collect the result set.";
                };
                readonly limit: {
                    readonly default: 25;
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The numbers of items to return.";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The field by which to sort the items returned.";
                };
                readonly channelId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The channel to which the rate plans apply.";
                };
            };
            readonly required: readonly ["skip", "limit", "sort", "channelId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly requestId: {
                    readonly type: "string";
                };
                readonly ratePlans: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "id";
                                readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "account id";
                                readonly examples: readonly ["5213a2d206112710005d96ff"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["independent"];
                                readonly description: "type\n\n`independent`";
                                readonly examples: readonly ["independent"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "name";
                                readonly examples: readonly ["My rate plan"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "description";
                                readonly examples: readonly ["My rate plan description"];
                            };
                            readonly cancellationPolicy: {
                                readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                                readonly type: readonly ["string", "null"];
                                readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                                readonly examples: readonly ["firm"];
                            };
                            readonly cancellationFee: {
                                readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                                readonly type: readonly ["string", "null"];
                                readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                                readonly examples: readonly [50];
                            };
                            readonly mealPlans: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "number";
                                    readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                    readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                                };
                                readonly description: "mealPlans";
                                readonly examples: readonly ["all_inclusive"];
                            };
                            readonly availabilityRules: {
                                readonly description: "availabilityRules";
                                readonly type: "object";
                                readonly properties: {
                                    readonly advanceNotice: {
                                        readonly type: "number";
                                        readonly description: "advance notice";
                                        readonly examples: readonly [1];
                                    };
                                    readonly bookingWindow: {
                                        readonly type: "number";
                                        readonly description: "booking window";
                                        readonly examples: readonly [3];
                                    };
                                    readonly dateRange: {
                                        readonly description: "date range";
                                        readonly type: "object";
                                        readonly required: readonly ["to", "from", "repeatedDays"];
                                        readonly properties: {
                                            readonly to: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                                readonly description: "to date";
                                            };
                                            readonly from: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                                readonly description: "from date";
                                            };
                                            readonly repeatedDays: {
                                                readonly description: "repeated days";
                                                readonly type: "object";
                                                readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                                readonly properties: {
                                                    readonly "0": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "1": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "2": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "3": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "4": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "5": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "6": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly restrictedDates: {
                                        readonly description: "restricted dates";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly pricingModel: {
                                readonly enum: readonly ["nightly_rate"];
                                readonly type: "string";
                                readonly description: "pricingModel\n\n`nightly_rate`";
                                readonly examples: readonly ["nightly_rate"];
                            };
                            readonly channelSync: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                    readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                                };
                                readonly description: "channelSync";
                                readonly examples: readonly ["bookingCom"];
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "is active";
                                readonly examples: readonly [true];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "createdAt";
                                readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "updatedAt";
                                readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                            };
                        };
                        readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    };
                };
                readonly count: {
                    readonly type: "number";
                };
                readonly limit: {
                    readonly type: "number";
                };
                readonly skip: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["requestId", "ratePlans", "count", "limit", "skip"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerGetById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerGetByListing: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The property ID.";
                };
            };
            readonly required: readonly ["listingId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly skip: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The number of items to skip before starting to collect the result set.";
                };
                readonly limit: {
                    readonly default: 25;
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The numbers of items to return.";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The field by which to sort the items returned. (link to list of filterable fields)";
                };
                readonly channelId: {
                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                    readonly type: "string";
                    readonly examples: readonly ["bookingCom"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The channel to which the rate plans apply.";
                };
            };
            readonly required: readonly ["skip", "limit", "sort", "channelId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly description: "Guesty property ID.";
                };
                readonly ratePlans: {
                    readonly description: "Rate Plans List";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "id";
                                readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "account id";
                                readonly examples: readonly ["5213a2d206112710005d96ff"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["independent"];
                                readonly description: "type\n\n`independent`";
                                readonly examples: readonly ["independent"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "name";
                                readonly examples: readonly ["My rate plan"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "description";
                                readonly examples: readonly ["My rate plan description"];
                            };
                            readonly cancellationPolicy: {
                                readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                                readonly type: readonly ["string", "null"];
                                readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                                readonly examples: readonly ["firm"];
                            };
                            readonly cancellationFee: {
                                readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                                readonly type: readonly ["string", "null"];
                                readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                                readonly examples: readonly [50];
                            };
                            readonly mealPlans: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "number";
                                    readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                    readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                                };
                                readonly description: "mealPlans";
                                readonly examples: readonly ["all_inclusive"];
                            };
                            readonly availabilityRules: {
                                readonly description: "availabilityRules";
                                readonly type: "object";
                                readonly properties: {
                                    readonly advanceNotice: {
                                        readonly type: "number";
                                        readonly description: "advance notice";
                                        readonly examples: readonly [1];
                                    };
                                    readonly bookingWindow: {
                                        readonly type: "number";
                                        readonly description: "booking window";
                                        readonly examples: readonly [3];
                                    };
                                    readonly dateRange: {
                                        readonly description: "date range";
                                        readonly type: "object";
                                        readonly required: readonly ["to", "from", "repeatedDays"];
                                        readonly properties: {
                                            readonly to: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                                readonly description: "to date";
                                            };
                                            readonly from: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                                readonly description: "from date";
                                            };
                                            readonly repeatedDays: {
                                                readonly description: "repeated days";
                                                readonly type: "object";
                                                readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                                readonly properties: {
                                                    readonly "0": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "1": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "2": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "3": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "4": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "5": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                    readonly "6": {
                                                        readonly type: "object";
                                                        readonly required: readonly ["available"];
                                                        readonly properties: {
                                                            readonly available: {
                                                                readonly type: "boolean";
                                                                readonly default: true;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly restrictedDates: {
                                        readonly description: "restricted dates";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly pricingModel: {
                                readonly enum: readonly ["nightly_rate"];
                                readonly type: "string";
                                readonly description: "pricingModel\n\n`nightly_rate`";
                                readonly examples: readonly ["nightly_rate"];
                            };
                            readonly channelSync: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                    readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                                };
                                readonly description: "channelSync";
                                readonly examples: readonly ["bookingCom"];
                            };
                            readonly active: {
                                readonly type: "boolean";
                                readonly description: "is active";
                                readonly examples: readonly [true];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "createdAt";
                                readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "updatedAt";
                                readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                            };
                        };
                        readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "The request ID.";
                };
                readonly count: {
                    readonly type: "number";
                };
                readonly limit: {
                    readonly type: "number";
                };
                readonly skip: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["listingId", "ratePlans", "requestId", "count", "limit", "skip"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerInitAssignListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["listingIds"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "202": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerInitUnassignListings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly required: readonly ["listingIds"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "202": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerPatch: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Rate plan name.";
                readonly examples: readonly ["My RatePlan"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Describe the rate plan.";
                readonly examples: readonly ["Rate plan description."];
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["independent"];
                readonly description: "Rate plan type.";
                readonly examples: readonly ["independent"];
            };
            readonly pricingModel: {
                readonly enum: readonly ["nightly_rate"];
                readonly type: readonly ["string", "null"];
                readonly description: "The pricing model.";
                readonly examples: readonly ["nightly_rate"];
            };
            readonly cancellationPolicy: {
                readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free", "special", "direct_reservation_long_stay"];
                readonly type: readonly ["string", "null"];
                readonly description: "The rate plan cancellation policy.";
                readonly examples: readonly ["strict"];
            };
            readonly cancellationFee: {
                readonly enum: readonly [100, 50, 0];
                readonly type: readonly ["number", "null"];
                readonly description: "The rate plan cancellation fee.";
                readonly examples: readonly [100];
            };
            readonly channelSync: {
                readonly default: readonly [];
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                };
                readonly description: "The channel to which the rate plan applies.";
                readonly examples: readonly ["bookingCom"];
            };
            readonly mealPlans: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["breakfast", "lunch", "dinner", "all_inclusive"];
                };
                readonly description: "Rate plan meal plans.";
                readonly examples: readonly ["dinner", "lunch"];
            };
            readonly availabilityRules: {
                readonly description: "Rate plan availability rules.n";
                readonly type: "object";
                readonly properties: {
                    readonly advanceNotice: {
                        readonly type: "number";
                        readonly description: "advance notice";
                        readonly examples: readonly [1];
                    };
                    readonly bookingWindow: {
                        readonly type: "number";
                        readonly description: "booking window";
                        readonly examples: readonly [3];
                    };
                };
            };
            readonly active: {
                readonly type: "boolean";
                readonly default: true;
                readonly description: "Indicates whether the rate plan is active or not.";
                readonly examples: readonly [true];
            };
        };
        readonly required: readonly ["name", "type", "active"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerRemove: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RatePlanControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Rate plan name.";
                readonly examples: readonly ["My RatePlan"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Describe the rate plan.";
                readonly examples: readonly ["Rate plan description."];
            };
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["independent"];
                readonly description: "Rate plan type.";
                readonly examples: readonly ["independent"];
            };
            readonly pricingModel: {
                readonly enum: readonly ["nightly_rate"];
                readonly type: readonly ["string", "null"];
                readonly description: "The pricing model.";
                readonly examples: readonly ["nightly_rate"];
            };
            readonly cancellationPolicy: {
                readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free", "special", "direct_reservation_long_stay"];
                readonly type: readonly ["string", "null"];
                readonly description: "The rate plan cancellation policy.";
                readonly examples: readonly ["strict"];
            };
            readonly cancellationFee: {
                readonly enum: readonly [100, 50, 0];
                readonly type: readonly ["number", "null"];
                readonly description: "The rate plan cancellation fee.";
                readonly examples: readonly [100];
            };
            readonly channelSync: {
                readonly default: readonly [];
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                };
                readonly description: "The channel to which the rate plan applies.";
                readonly examples: readonly ["bookingCom"];
            };
            readonly mealPlans: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["breakfast", "lunch", "dinner", "all_inclusive"];
                };
                readonly description: "Rate plan meal plans.";
                readonly examples: readonly ["dinner", "lunch"];
            };
            readonly availabilityRules: {
                readonly description: "Rate plan availability rules.n";
                readonly type: "object";
                readonly properties: {
                    readonly advanceNotice: {
                        readonly type: "number";
                        readonly description: "advance notice";
                        readonly examples: readonly [1];
                    };
                    readonly bookingWindow: {
                        readonly type: "number";
                        readonly description: "booking window";
                        readonly examples: readonly [3];
                    };
                };
            };
            readonly active: {
                readonly type: "boolean";
                readonly default: true;
                readonly description: "Indicates whether the rate plan is active or not.";
                readonly examples: readonly [true];
            };
        };
        readonly required: readonly ["name", "type", "active"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ratePlanId: {
                    readonly type: "string";
                    readonly examples: readonly ["62d7d58327dba40034e9670e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The rate plan ID.";
                };
            };
            readonly required: readonly ["ratePlanId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly ratePlan: {
                    readonly description: "rate plan";
                    readonly type: "object";
                    readonly required: readonly ["_id", "accountId", "type", "name", "pricingModel", "active", "createdAt", "updatedAt"];
                    readonly properties: {
                        readonly _id: {
                            readonly type: "string";
                            readonly description: "id";
                            readonly examples: readonly ["5fae51c4fdff570029b147e8"];
                        };
                        readonly accountId: {
                            readonly type: "string";
                            readonly description: "account id";
                            readonly examples: readonly ["5213a2d206112710005d96ff"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["independent"];
                            readonly description: "type\n\n`independent`";
                            readonly examples: readonly ["independent"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "name";
                            readonly examples: readonly ["My rate plan"];
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "description";
                            readonly examples: readonly ["My rate plan description"];
                        };
                        readonly cancellationPolicy: {
                            readonly enum: readonly ["strict", "strict_60", "strict_90", "super_strict", "moderate", "semi_moderate", "semi_flexible", "firm", "flex", "free"];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationPolicy\n\n`strict` `strict_60` `strict_90` `super_strict` `moderate` `semi_moderate` `semi_flexible` `firm` `flex` `free`";
                            readonly examples: readonly ["firm"];
                        };
                        readonly cancellationFee: {
                            readonly enum: readonly ["FIRST_NIGHT", "50%_TOTAL_PRICE", "TOTAL_PRICE", 100, 50, 0];
                            readonly type: readonly ["string", "null"];
                            readonly description: "cancellationFee\n\n`FIRST_NIGHT` `50%_TOTAL_PRICE` `TOTAL_PRICE` `100` `50`";
                            readonly examples: readonly [50];
                        };
                        readonly mealPlans: {
                            readonly type: "array";
                            readonly description: "mealPlans";
                            readonly items: {
                                readonly type: "number";
                                readonly enum: readonly [readonly ["breakfast", "lunch", "dinner", "all_inclusive"]];
                                readonly description: "`breakfast,lunch,dinner,all_inclusive`";
                            };
                            readonly examples: readonly ["all_inclusive"];
                        };
                        readonly availabilityRules: {
                            readonly description: "availabilityRules";
                            readonly type: "object";
                            readonly properties: {
                                readonly advanceNotice: {
                                    readonly type: "number";
                                    readonly description: "advance notice";
                                    readonly examples: readonly [1];
                                };
                                readonly bookingWindow: {
                                    readonly type: "number";
                                    readonly description: "booking window";
                                    readonly examples: readonly [3];
                                };
                                readonly dateRange: {
                                    readonly description: "date range";
                                    readonly type: "object";
                                    readonly required: readonly ["to", "from", "repeatedDays"];
                                    readonly properties: {
                                        readonly to: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "to date";
                                        };
                                        readonly from: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "from date";
                                        };
                                        readonly repeatedDays: {
                                            readonly description: "repeated days";
                                            readonly type: "object";
                                            readonly required: readonly ["0", "1", "2", "3", "4", "5", "6"];
                                            readonly properties: {
                                                readonly "0": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "1": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "2": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "3": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "4": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "5": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                                readonly "6": {
                                                    readonly type: "object";
                                                    readonly required: readonly ["available"];
                                                    readonly properties: {
                                                        readonly available: {
                                                            readonly type: "boolean";
                                                            readonly default: true;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly restrictedDates: {
                                    readonly description: "restricted dates";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly pricingModel: {
                            readonly enum: readonly ["nightly_rate"];
                            readonly type: "string";
                            readonly description: "pricingModel\n\n`nightly_rate`";
                            readonly examples: readonly ["nightly_rate"];
                        };
                        readonly channelSync: {
                            readonly type: "array";
                            readonly description: "channelSync";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["bookingCom", "manual_reservations", "booking_engine"];
                                readonly description: "`bookingCom` `manual_reservations` `booking_engine`";
                            };
                            readonly examples: readonly ["bookingCom"];
                        };
                        readonly active: {
                            readonly type: "boolean";
                            readonly description: "is active";
                            readonly examples: readonly [true];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "createdAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "updatedAt";
                            readonly examples: readonly ["2023-12-01T04:09:27.335Z"];
                        };
                    };
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "request id";
                };
            };
            readonly required: readonly ["ratePlan", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "object";
                    readonly enum: readonly ["CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "EARLYHINTS", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "AMBIGUOUS", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "MISDIRECTED", "UNPROCESSABLE_ENTITY", "FAILED_DEPENDENCY", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED"];
                    readonly examples: readonly [400];
                    readonly additionalProperties: true;
                    readonly description: "`CONTINUE` `SWITCHING_PROTOCOLS` `PROCESSING` `EARLYHINTS` `OK` `CREATED` `ACCEPTED` `NON_AUTHORITATIVE_INFORMATION` `NO_CONTENT` `RESET_CONTENT` `PARTIAL_CONTENT` `AMBIGUOUS` `MOVED_PERMANENTLY` `FOUND` `SEE_OTHER` `NOT_MODIFIED` `TEMPORARY_REDIRECT` `PERMANENT_REDIRECT` `BAD_REQUEST` `UNAUTHORIZED` `PAYMENT_REQUIRED` `FORBIDDEN` `NOT_FOUND` `METHOD_NOT_ALLOWED` `NOT_ACCEPTABLE` `PROXY_AUTHENTICATION_REQUIRED` `REQUEST_TIMEOUT` `CONFLICT` `GONE` `LENGTH_REQUIRED` `PRECONDITION_FAILED` `PAYLOAD_TOO_LARGE` `URI_TOO_LONG` `UNSUPPORTED_MEDIA_TYPE` `REQUESTED_RANGE_NOT_SATISFIABLE` `EXPECTATION_FAILED` `I_AM_A_TEAPOT` `MISDIRECTED` `UNPROCESSABLE_ENTITY` `FAILED_DEPENDENCY` `PRECONDITION_REQUIRED` `TOO_MANY_REQUESTS` `INTERNAL_SERVER_ERROR` `NOT_IMPLEMENTED` `BAD_GATEWAY` `SERVICE_UNAVAILABLE` `GATEWAY_TIMEOUT` `HTTP_VERSION_NOT_SUPPORTED`";
                };
                readonly code: {
                    readonly type: "object";
                    readonly examples: readonly ["VALIDATION_FAILED"];
                    readonly additionalProperties: true;
                };
                readonly message: {
                    readonly type: "object";
                    readonly examples: readonly ["Bad Request"];
                    readonly additionalProperties: true;
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly propertyName: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                        readonly property2Name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly subPropertyName: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "array";
                                        readonly items: {};
                                    };
                                };
                            };
                        };
                        readonly property3Name: {
                            readonly type: readonly ["array", "null"];
                            readonly items: {
                                readonly type: "array";
                                readonly items: {};
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["status", "code", "message", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RateStrategyControllerGetByUnitTypeId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["63ee4b7e459ca31532fdfd232"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Unit type id.";
                };
            };
            readonly required: readonly ["unitTypeId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly rateStrategy: {
                    readonly description: "Partial rate strategy information";
                    readonly type: "object";
                    readonly properties: {
                        readonly _id: {
                            readonly type: "object";
                            readonly description: "ID of the strategy";
                            readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                            readonly additionalProperties: true;
                        };
                        readonly accountId: {
                            readonly type: "object";
                            readonly description: "Account ID";
                            readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                            readonly additionalProperties: true;
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the strategy";
                            readonly examples: readonly ["my rate strategy name"];
                        };
                        readonly assignedListingCount: {
                            readonly type: "number";
                            readonly description: "Assigned listing count";
                            readonly examples: readonly [1];
                        };
                        readonly rules: {
                            readonly description: "Rules for the strategy";
                            readonly type: "object";
                            readonly properties: {
                                readonly seasonal: {
                                    readonly description: "Seasonal rules";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "object";
                                                readonly description: "ID of the seasonal";
                                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name of the rule";
                                                readonly examples: readonly ["event name"];
                                            };
                                            readonly from: {
                                                readonly type: "object";
                                                readonly description: "Start date";
                                                readonly examples: readonly ["2023-11-30"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly to: {
                                                readonly type: "object";
                                                readonly description: "End date";
                                                readonly examples: readonly ["2023-12-01"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly restriction: {
                                                readonly description: "Restrictions";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly active: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is the rule active?";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly checkInWeekDays: {
                                                        readonly description: "Check-in weekdays";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "number";
                                                        };
                                                        readonly examples: readonly [1, 3, 5];
                                                    };
                                                    readonly checkOutWeekDays: {
                                                        readonly description: "Check-out weekdays";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "number";
                                                        };
                                                        readonly examples: readonly [1, 3, 4, 5];
                                                    };
                                                };
                                            };
                                            readonly adjustmentPercentage: {
                                                readonly type: "number";
                                                readonly description: "Adjustment percentage";
                                                readonly examples: readonly [3];
                                            };
                                            readonly minNights: {
                                                readonly type: "number";
                                                readonly description: "Minimum nights";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isAnnual: {
                                                readonly type: "boolean";
                                                readonly description: "Is it annual?";
                                                readonly examples: readonly [false];
                                            };
                                            readonly weekDays: {
                                                readonly description: "Weekdays";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "number";
                                                };
                                                readonly examples: readonly [0, 1, 2, 3, 4, 5, 6];
                                            };
                                        };
                                    };
                                };
                                readonly events: {
                                    readonly description: "Events rules";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "object";
                                                readonly description: "ID of the events";
                                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name of the rule";
                                                readonly examples: readonly ["event name"];
                                            };
                                            readonly from: {
                                                readonly type: "object";
                                                readonly description: "Start date";
                                                readonly examples: readonly ["2023-11-30"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly to: {
                                                readonly type: "object";
                                                readonly description: "End date";
                                                readonly examples: readonly ["2023-12-01"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly restriction: {
                                                readonly description: "Restrictions";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly active: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is the rule active?";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly checkInWeekDays: {
                                                        readonly description: "Check-in weekdays";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "number";
                                                        };
                                                        readonly examples: readonly [1, 3, 5];
                                                    };
                                                    readonly checkOutWeekDays: {
                                                        readonly description: "Check-out weekdays";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "number";
                                                        };
                                                        readonly examples: readonly [1, 3, 4, 5];
                                                    };
                                                };
                                            };
                                            readonly adjustmentPercentage: {
                                                readonly type: "number";
                                                readonly description: "Adjustment percentage";
                                                readonly examples: readonly [3];
                                            };
                                            readonly minNights: {
                                                readonly type: "number";
                                                readonly description: "Minimum nights";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isAnnual: {
                                                readonly type: "boolean";
                                                readonly description: "Is it annual?";
                                                readonly examples: readonly [false];
                                            };
                                        };
                                    };
                                };
                                readonly upcomingAvailability: {
                                    readonly description: "Upcoming availability rules";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name of the rule";
                                                readonly examples: readonly ["upcoming availability rule name"];
                                            };
                                            readonly fromDays: {
                                                readonly type: "number";
                                                readonly description: "Starting days";
                                                readonly examples: readonly [1];
                                            };
                                            readonly toDays: {
                                                readonly type: "number";
                                                readonly description: "Ending days";
                                                readonly examples: readonly [3];
                                            };
                                            readonly weekDays: {
                                                readonly description: "Weekdays";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "number";
                                                };
                                                readonly examples: readonly [1, 2, 3, 5];
                                            };
                                            readonly adjustmentPercentage: {
                                                readonly type: "number";
                                                readonly description: "Adjustment percentage";
                                                readonly examples: readonly [3];
                                            };
                                            readonly minNights: {
                                                readonly type: "number";
                                                readonly description: "Minimum nights";
                                                readonly examples: readonly [4];
                                            };
                                        };
                                    };
                                };
                                readonly customizedGaps: {
                                    readonly description: "Customized gaps rules";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "object";
                                                readonly description: "ID of the customized gap";
                                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Name of the rule";
                                                readonly examples: readonly ["gap rule name"];
                                            };
                                            readonly fromDays: {
                                                readonly type: "number";
                                                readonly description: "Starting days";
                                                readonly examples: readonly [2];
                                            };
                                            readonly toDays: {
                                                readonly type: "number";
                                                readonly description: "Ending days";
                                                readonly examples: readonly [5];
                                            };
                                            readonly adjustmentPercentage: {
                                                readonly type: "number";
                                                readonly description: "Adjustment percentage";
                                                readonly examples: readonly [4];
                                            };
                                            readonly maxGap: {
                                                readonly type: "number";
                                                readonly description: "Maximum gap";
                                                readonly examples: readonly [3];
                                            };
                                        };
                                    };
                                };
                                readonly lengthOfStay: {
                                    readonly description: "Length of stay rules";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly _id: {
                                                readonly type: "object";
                                                readonly description: "ID of the length of stay";
                                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                readonly additionalProperties: true;
                                            };
                                            readonly length: {
                                                readonly description: "Length details";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly from: {
                                                        readonly type: "number";
                                                        readonly description: "Starting length";
                                                        readonly examples: readonly ["2023-11-30"];
                                                    };
                                                    readonly to: {
                                                        readonly type: "number";
                                                        readonly description: "Ending length";
                                                        readonly examples: readonly ["2023-12-03"];
                                                    };
                                                };
                                            };
                                            readonly adjustmentPercentage: {
                                                readonly type: "number";
                                                readonly description: "Adjustment percentage";
                                                readonly examples: readonly [1];
                                            };
                                            readonly type: {
                                                readonly enum: readonly ["single", "range"];
                                                readonly type: "string";
                                                readonly description: "Type of length\n\n`single` `range`";
                                                readonly examples: readonly ["range"];
                                            };
                                        };
                                    };
                                };
                                readonly repeatedDays: {
                                    readonly description: "Repeated days rules";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly "0": {
                                            readonly description: "Rule applied to Sundays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "1": {
                                            readonly description: "Rule applied to Mondays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "2": {
                                            readonly description: "Rule applied to Tuesdays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "3": {
                                            readonly description: "Rule applied to Wednesdays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "4": {
                                            readonly description: "Rule applied to Thursdays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "5": {
                                            readonly description: "Rule applied to Fridays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                        readonly "6": {
                                            readonly description: "Rule applied to Saturdays";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the repeated day";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly cta: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTA flag";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly ctd: {
                                                    readonly type: "boolean";
                                                    readonly description: "CTD flag";
                                                    readonly examples: readonly [true];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Description of the rate strategy";
                            readonly examples: readonly ["rate strategy best description"];
                        };
                        readonly singleUnitsCount: {
                            readonly type: "number";
                            readonly description: "Count of single units";
                            readonly examples: readonly [3];
                        };
                        readonly multiUnitsCount: {
                            readonly type: "number";
                            readonly description: "Count of multiple units";
                            readonly examples: readonly [1];
                        };
                        readonly subUnitsCount: {
                            readonly type: "number";
                            readonly description: "Count of sub-units";
                            readonly examples: readonly [4];
                        };
                        readonly minAdjustmentPercentage: {
                            readonly type: "number";
                            readonly description: "Minimum adjustment percentage";
                            readonly examples: readonly [5];
                        };
                        readonly maxAdjustmentPercentage: {
                            readonly type: "number";
                            readonly description: "Maximum adjustment percentage";
                            readonly examples: readonly [10];
                        };
                        readonly minNights: {
                            readonly type: "number";
                            readonly description: "Minimum number of nights";
                            readonly examples: readonly [4];
                        };
                        readonly isOptimized: {
                            readonly type: "boolean";
                            readonly description: "Is the rate strategy optimized?";
                            readonly examples: readonly [true];
                        };
                        readonly pendingSync: {
                            readonly type: "boolean";
                            readonly description: "Is the rate strategy pending for sync?";
                            readonly examples: readonly [false];
                        };
                        readonly createdAt: {
                            readonly type: "object";
                            readonly description: "Rate strategy creation date";
                            readonly examples: readonly ["2023-12-19T07:53:09.567Z"];
                            readonly additionalProperties: true;
                        };
                        readonly updatedAt: {
                            readonly type: "object";
                            readonly description: "Rate strategy last update date";
                            readonly examples: readonly ["2023-12-19T07:55:09.567Z"];
                            readonly additionalProperties: true;
                        };
                    };
                };
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly description: "ID of the unit type";
                    readonly examples: readonly ["65814be58b41561467b95de9"];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "ID of the request";
                    readonly examples: readonly ["65814be58b41561467b95de9"];
                };
            };
            readonly required: readonly ["rateStrategy", "unitTypeId", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RateStrategyControllerGetList: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly rateStrategies: {
                    readonly description: "Partial rate strategies information";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "object";
                                readonly description: "ID of the strategy";
                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                readonly additionalProperties: true;
                            };
                            readonly accountId: {
                                readonly type: "object";
                                readonly description: "Account ID";
                                readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                readonly additionalProperties: true;
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the strategy";
                                readonly examples: readonly ["my rate strategy name"];
                            };
                            readonly assignedListingCount: {
                                readonly type: "number";
                                readonly description: "Assigned listing count";
                                readonly examples: readonly [1];
                            };
                            readonly rules: {
                                readonly description: "Rules for the strategy";
                                readonly type: "object";
                                readonly properties: {
                                    readonly seasonal: {
                                        readonly description: "Seasonal rules";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the seasonal";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the rule";
                                                    readonly examples: readonly ["event name"];
                                                };
                                                readonly from: {
                                                    readonly type: "object";
                                                    readonly description: "Start date";
                                                    readonly examples: readonly ["2023-11-30"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly to: {
                                                    readonly type: "object";
                                                    readonly description: "End date";
                                                    readonly examples: readonly ["2023-12-01"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly restriction: {
                                                    readonly description: "Restrictions";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly active: {
                                                            readonly type: "boolean";
                                                            readonly description: "Is the rule active?";
                                                            readonly examples: readonly [false];
                                                        };
                                                        readonly checkInWeekDays: {
                                                            readonly description: "Check-in weekdays";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "number";
                                                            };
                                                            readonly examples: readonly [1, 3, 5];
                                                        };
                                                        readonly checkOutWeekDays: {
                                                            readonly description: "Check-out weekdays";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "number";
                                                            };
                                                            readonly examples: readonly [1, 3, 4, 5];
                                                        };
                                                    };
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [3];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly isAnnual: {
                                                    readonly type: "boolean";
                                                    readonly description: "Is it annual?";
                                                    readonly examples: readonly [false];
                                                };
                                                readonly weekDays: {
                                                    readonly description: "Weekdays";
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "number";
                                                    };
                                                    readonly examples: readonly [0, 1, 2, 3, 4, 5, 6];
                                                };
                                            };
                                        };
                                    };
                                    readonly events: {
                                        readonly description: "Events rules";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the events";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the rule";
                                                    readonly examples: readonly ["event name"];
                                                };
                                                readonly from: {
                                                    readonly type: "object";
                                                    readonly description: "Start date";
                                                    readonly examples: readonly ["2023-11-30"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly to: {
                                                    readonly type: "object";
                                                    readonly description: "End date";
                                                    readonly examples: readonly ["2023-12-01"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly restriction: {
                                                    readonly description: "Restrictions";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly active: {
                                                            readonly type: "boolean";
                                                            readonly description: "Is the rule active?";
                                                            readonly examples: readonly [false];
                                                        };
                                                        readonly checkInWeekDays: {
                                                            readonly description: "Check-in weekdays";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "number";
                                                            };
                                                            readonly examples: readonly [1, 3, 5];
                                                        };
                                                        readonly checkOutWeekDays: {
                                                            readonly description: "Check-out weekdays";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "number";
                                                            };
                                                            readonly examples: readonly [1, 3, 4, 5];
                                                        };
                                                    };
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [3];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly isAnnual: {
                                                    readonly type: "boolean";
                                                    readonly description: "Is it annual?";
                                                    readonly examples: readonly [false];
                                                };
                                            };
                                        };
                                    };
                                    readonly upcomingAvailability: {
                                        readonly description: "Upcoming availability rules";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the rule";
                                                    readonly examples: readonly ["upcoming availability rule name"];
                                                };
                                                readonly fromDays: {
                                                    readonly type: "number";
                                                    readonly description: "Starting days";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly toDays: {
                                                    readonly type: "number";
                                                    readonly description: "Ending days";
                                                    readonly examples: readonly [3];
                                                };
                                                readonly weekDays: {
                                                    readonly description: "Weekdays";
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "number";
                                                    };
                                                    readonly examples: readonly [1, 2, 3, 5];
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [3];
                                                };
                                                readonly minNights: {
                                                    readonly type: "number";
                                                    readonly description: "Minimum nights";
                                                    readonly examples: readonly [4];
                                                };
                                            };
                                        };
                                    };
                                    readonly customizedGaps: {
                                        readonly description: "Customized gaps rules";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the customized gap";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Name of the rule";
                                                    readonly examples: readonly ["gap rule name"];
                                                };
                                                readonly fromDays: {
                                                    readonly type: "number";
                                                    readonly description: "Starting days";
                                                    readonly examples: readonly [2];
                                                };
                                                readonly toDays: {
                                                    readonly type: "number";
                                                    readonly description: "Ending days";
                                                    readonly examples: readonly [5];
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [4];
                                                };
                                                readonly maxGap: {
                                                    readonly type: "number";
                                                    readonly description: "Maximum gap";
                                                    readonly examples: readonly [3];
                                                };
                                            };
                                        };
                                    };
                                    readonly lengthOfStay: {
                                        readonly description: "Length of stay rules";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly _id: {
                                                    readonly type: "object";
                                                    readonly description: "ID of the length of stay";
                                                    readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                    readonly additionalProperties: true;
                                                };
                                                readonly length: {
                                                    readonly description: "Length details";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly from: {
                                                            readonly type: "number";
                                                            readonly description: "Starting length";
                                                            readonly examples: readonly ["2023-11-30"];
                                                        };
                                                        readonly to: {
                                                            readonly type: "number";
                                                            readonly description: "Ending length";
                                                            readonly examples: readonly ["2023-12-03"];
                                                        };
                                                    };
                                                };
                                                readonly adjustmentPercentage: {
                                                    readonly type: "number";
                                                    readonly description: "Adjustment percentage";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly enum: readonly ["single", "range"];
                                                    readonly type: "string";
                                                    readonly description: "Type of length\n\n`single` `range`";
                                                    readonly examples: readonly ["range"];
                                                };
                                            };
                                        };
                                    };
                                    readonly repeatedDays: {
                                        readonly description: "Repeated days rules";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly "0": {
                                                readonly description: "Rule applied to Sundays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "1": {
                                                readonly description: "Rule applied to Mondays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "2": {
                                                readonly description: "Rule applied to Tuesdays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "3": {
                                                readonly description: "Rule applied to Wednesdays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "4": {
                                                readonly description: "Rule applied to Thursdays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "5": {
                                                readonly description: "Rule applied to Fridays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                            readonly "6": {
                                                readonly description: "Rule applied to Saturdays";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly _id: {
                                                        readonly type: "object";
                                                        readonly description: "ID of the repeated day";
                                                        readonly examples: readonly ["5c07a535a9e7a8003cf0e43c"];
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly adjustmentPercentage: {
                                                        readonly type: "number";
                                                        readonly description: "Adjustment percentage";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly minNights: {
                                                        readonly type: "number";
                                                        readonly description: "Minimum nights";
                                                        readonly examples: readonly [2];
                                                    };
                                                    readonly cta: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTA flag";
                                                        readonly examples: readonly [false];
                                                    };
                                                    readonly ctd: {
                                                        readonly type: "boolean";
                                                        readonly description: "CTD flag";
                                                        readonly examples: readonly [true];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Description of the rate strategy";
                                readonly examples: readonly ["rate strategy best description"];
                            };
                            readonly singleUnitsCount: {
                                readonly type: "number";
                                readonly description: "Count of single units";
                                readonly examples: readonly [3];
                            };
                            readonly multiUnitsCount: {
                                readonly type: "number";
                                readonly description: "Count of multiple units";
                                readonly examples: readonly [1];
                            };
                            readonly subUnitsCount: {
                                readonly type: "number";
                                readonly description: "Count of sub-units";
                                readonly examples: readonly [4];
                            };
                            readonly minAdjustmentPercentage: {
                                readonly type: "number";
                                readonly description: "Minimum adjustment percentage";
                                readonly examples: readonly [5];
                            };
                            readonly maxAdjustmentPercentage: {
                                readonly type: "number";
                                readonly description: "Maximum adjustment percentage";
                                readonly examples: readonly [10];
                            };
                            readonly minNights: {
                                readonly type: "number";
                                readonly description: "Minimum number of nights";
                                readonly examples: readonly [4];
                            };
                            readonly isOptimized: {
                                readonly type: "boolean";
                                readonly description: "Is the rate strategy optimized?";
                                readonly examples: readonly [true];
                            };
                            readonly pendingSync: {
                                readonly type: "boolean";
                                readonly description: "Is the rate strategy pending for sync?";
                                readonly examples: readonly [false];
                            };
                            readonly createdAt: {
                                readonly type: "object";
                                readonly description: "Rate strategy creation date";
                                readonly examples: readonly ["2023-12-19T07:53:09.567Z"];
                                readonly additionalProperties: true;
                            };
                            readonly updatedAt: {
                                readonly type: "object";
                                readonly description: "Rate strategy last update date";
                                readonly examples: readonly ["2023-12-19T07:55:09.567Z"];
                                readonly additionalProperties: true;
                            };
                        };
                    };
                };
                readonly count: {
                    readonly type: "number";
                    readonly description: "Number of rate strategies in the result set";
                    readonly examples: readonly [10];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly description: "Maximum number of rate strategies that can be returned in the response";
                    readonly examples: readonly [10];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly description: "Number of rate strategies that should be skipped from the result set";
                    readonly examples: readonly [0];
                };
                readonly requestId: {
                    readonly type: "string";
                    readonly description: "ID of the request";
                    readonly examples: readonly ["65a0639e9d142279"];
                };
            };
            readonly required: readonly ["rateStrategies", "count", "limit", "skip", "requestId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationAccessCodeControllerGetLocksAndCodesByReservation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f9b2b3b9c6b4e000f1e3b1e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID for which the guest code is needed";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly codes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                            };
                            readonly purpose: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly startsAt: {
                                readonly format: "date-time";
                                readonly type: readonly ["string", "null"];
                            };
                            readonly endsAt: {
                                readonly format: "date-time";
                                readonly type: readonly ["string", "null"];
                            };
                            readonly lockIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly required: readonly ["code", "purpose", "status", "startsAt", "endsAt", "lockIds"];
                    };
                };
                readonly locks: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly batteryLevel: {
                                readonly type: "number";
                            };
                            readonly online: {
                                readonly type: "boolean";
                            };
                            readonly provider: {
                                readonly type: "string";
                            };
                            readonly imageUrl: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly hasIssues: {
                                readonly type: readonly ["boolean", "null"];
                            };
                        };
                        readonly required: readonly ["id", "name", "batteryLevel", "online", "provider", "imageUrl"];
                    };
                };
            };
            readonly required: readonly ["codes", "locks"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["reservationId must be a mongodb id"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Can't find reservation with ID {reservation_id}"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsControllerFolioBalances: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5d6e7a7ebf8e3800207735ae"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                };
                readonly balance: {
                    readonly type: "number";
                };
                readonly ledgers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly balance: {
                                readonly type: "number";
                            };
                        };
                        readonly required: readonly ["name", "balance"];
                    };
                };
            };
            readonly required: readonly ["currency", "balance", "ledgers"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Can't find reservation with ID {reservation_id}"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerChangeStay: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly reservationId: {
                readonly type: "string";
                readonly description: "Guesty reservation ID";
                readonly examples: readonly ["5acca18ffe1641001f17a999"];
            };
            readonly status: {
                readonly enum: readonly ["not_set", "checked_in", "checked_out", "no_show"];
                readonly type: "string";
                readonly description: "Set the guest stay status. Choose from: “not_set”, “checked_in”, “checked_out”, or “no_show”";
                readonly examples: readonly ["checked_in"];
            };
        };
        readonly required: readonly ["reservationId", "status"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerCreateOwnerConfirmed: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly checkInDateLocalized: {
                readonly type: "string";
                readonly description: "The date when the Owner will check in - with the format of YYYY-MM-DD";
                readonly examples: readonly ["2021-01-01"];
            };
            readonly checkOutDateLocalized: {
                readonly type: "string";
                readonly description: "The date when the Owner will check out - with the format of YYYY-MM-DD";
                readonly examples: readonly ["2021-01-02"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "Listing Id of the unit that the Owner will be staying in";
                readonly examples: readonly ["5f92cbf10cf217478ba93561"];
            };
            readonly guestId: {
                readonly type: "string";
                readonly description: "Guest id of the guest that will be staying in";
                readonly examples: readonly ["5f92cbf10cf217478ba93532"];
            };
            readonly guest: {
                readonly description: "The Owner or Owner's guest for specific reservation";
                readonly type: "object";
                readonly required: readonly ["firstName", "lastName", "phones", "email"];
                readonly properties: {
                    readonly firstName: {
                        readonly type: "string";
                        readonly description: "Guest's first name";
                        readonly examples: readonly ["Joe"];
                    };
                    readonly lastName: {
                        readonly type: "string";
                        readonly description: "Guest's last name";
                        readonly examples: readonly ["Black"];
                    };
                    readonly phones: {
                        readonly description: "The guest’s phone numbers written in E.164 format:  [+] [country code] [subscriber number including area code]";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["+972-525180054", "+972-225146062"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "Guest's primary email address";
                        readonly examples: readonly ["guest@email.com"];
                    };
                    readonly address: {
                        readonly description: "Guest's address";
                        readonly type: "object";
                        readonly properties: {
                            readonly street: {
                                readonly type: "string";
                                readonly description: "The street address, including house number and street name. It can also be a PO Box";
                                readonly examples: readonly ["1000 5th Ave"];
                            };
                            readonly zipCode: {
                                readonly type: "string";
                                readonly description: "The postal code or ZIP code of the address";
                                readonly examples: readonly ["10028"];
                            };
                            readonly city: {
                                readonly type: "string";
                                readonly description: "The name of the city or town or village";
                                readonly examples: readonly ["New York"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "The state or province name";
                                readonly examples: readonly ["New York"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The [full name](https://www.iban.com/country-codes) of the country";
                                readonly examples: readonly ["United States"];
                            };
                            readonly countryCode: {
                                readonly type: "string";
                                readonly description: "The two-letter [ISO 3166 Alpha-2](https://www.iban.com/country-codes) country code";
                                readonly examples: readonly ["US"];
                            };
                        };
                    };
                };
            };
            readonly numberOfGuests: {
                readonly description: "Total number of guests with breakdown";
                readonly type: "object";
                readonly properties: {
                    readonly numberOfChildren: {
                        readonly type: "number";
                        readonly description: "Number of children in the reservation. It can be zero";
                    };
                    readonly numberOfInfants: {
                        readonly type: "number";
                        readonly description: "Number of infants in the reservation. It can be zero";
                    };
                    readonly numberOfAdults: {
                        readonly type: "number";
                        readonly description: "Count of adults, must be > 0";
                        readonly examples: readonly [2];
                    };
                };
            };
            readonly source: {
                readonly enum: readonly ["owner", "owner-guest"];
                readonly type: "string";
                readonly description: "Source of reservation. \"owner\" for owner reservations, \"owner-guest\" for owner friends & family reservations";
                readonly examples: readonly ["owner"];
            };
            readonly guestsCount: {
                readonly type: "number";
                readonly description: "Count of guests";
                readonly minimum: 1;
                readonly examples: readonly [2];
            };
            readonly notes: {
                readonly description: "The reservation notes";
                readonly type: "object";
                readonly properties: {
                    readonly other: {
                        readonly type: "string";
                        readonly description: "Other notes";
                        readonly examples: readonly ["Other notes"];
                    };
                    readonly cleaning: {
                        readonly type: "string";
                        readonly description: "Notes for cleaning";
                        readonly examples: readonly ["Cleaning notes"];
                    };
                    readonly guest: {
                        readonly type: "string";
                        readonly description: "For notes about the guest";
                        readonly examples: readonly ["Guest notes"];
                    };
                    readonly specialRequests: {
                        readonly type: "string";
                        readonly description: "For recording the guest's special requests";
                        readonly examples: readonly ["Special request"];
                    };
                    readonly keyCode: {
                        readonly type: "string";
                        readonly description: "Store the relevant key code for using with workflow automation";
                        readonly examples: readonly ["123456"];
                    };
                    readonly doneBy: {
                        readonly type: "string";
                        readonly description: "The name of the Guesty user";
                    };
                };
            };
            readonly creationInfo: {
                readonly description: "Keeps info about who created the reservation.";
                readonly type: "object";
                readonly required: readonly ["owner"];
                readonly properties: {
                    readonly owner: {
                        readonly type: "object";
                        readonly required: readonly ["_id"];
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "The owner ID";
                                readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
                            };
                            readonly fullName: {
                                readonly type: "string";
                                readonly description: "The owner's full name";
                                readonly examples: readonly ["John Doe"];
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The owner's email";
                                readonly examples: readonly ["john.doe@example.com"];
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "The owner's phone number";
                                readonly examples: readonly ["+1 123 456 7890"];
                            };
                            readonly locale: {
                                readonly type: "string";
                                readonly description: "The owner's locale";
                                readonly examples: readonly ["en-US"];
                            };
                        };
                    };
                };
            };
        };
        readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized", "listingId", "source", "creationInfo"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly quoteId: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly guestId: {
                    readonly type: "string";
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
                readonly creationTime: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly reservedExpiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkInDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkOutDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly channel: {
                    readonly type: "string";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly creationInfo: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
            readonly required: readonly ["reservationId", "quoteId", "confirmationCode", "status", "guestId", "numberOfGuests", "creationTime", "reservedExpiresAt", "checkInDate", "checkOutDate", "unitTypeId", "unitId", "source", "channel", "guestsCount", "creationInfo"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerCreateReservation: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly quoteId: {
                readonly type: "string";
                readonly description: "The quote to convert into a reservation";
                readonly examples: readonly ["6213b03e7f0ba50032296f4a"];
            };
            readonly status: {
                readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                readonly type: "string";
                readonly description: "Choose from: \"inquiry\", \"reserved\", or \"confirmed\"";
                readonly examples: readonly ["confirmed"];
            };
            readonly ratePlanId: {
                readonly type: "string";
                readonly description: "The ID of an active rate plan when you wish to apply it to the reservation";
                readonly examples: readonly ["5f92cbf10cf217478ba93561"];
            };
            readonly reservedUntil: {
                readonly enum: readonly ["twelveHours", "day", "thirtySixHours", "twoDays", "threeDays", -1, 0.5, 0.25, 0.17];
                readonly type: "string";
                readonly description: "It can be -1 (no limit), 0.17 (10 minutes), 0.25 (15 minutes), 0.5 (30 minutes), or 24/48/72 hours when the reservation is a booking request that reserves dates (i.e., status = “reserved”)\n\nDefault: `-1`";
                readonly default: -1;
                readonly examples: readonly ["-1"];
            };
            readonly guestId: {
                readonly type: "string";
                readonly description: "The primary ID for returning/existing guests and new guests that were created beforehand";
                readonly examples: readonly ["5f92cbf10cf217478ba93532"];
            };
            readonly guest: {
                readonly description: "For a new guest. We recommend you create the guest first in a separate request and attach their ID to the reservation instead";
                readonly type: "object";
                readonly required: readonly ["firstName", "lastName", "phones", "email"];
                readonly properties: {
                    readonly firstName: {
                        readonly type: "string";
                        readonly description: "Guest's first name";
                        readonly examples: readonly ["Joe"];
                    };
                    readonly lastName: {
                        readonly type: "string";
                        readonly description: "Guest's last name";
                        readonly examples: readonly ["Black"];
                    };
                    readonly phones: {
                        readonly description: "The guest’s phone numbers written in E.164 format:  [+] [country code] [subscriber number including area code]";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["+972-525180054", "+972-225146062"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "Guest's primary email address";
                        readonly examples: readonly ["guest@email.com"];
                    };
                    readonly address: {
                        readonly description: "Guest's address";
                        readonly type: "object";
                        readonly properties: {
                            readonly street: {
                                readonly type: "string";
                                readonly description: "The street address, including house number and street name. It can also be a PO Box";
                                readonly examples: readonly ["1000 5th Ave"];
                            };
                            readonly zipCode: {
                                readonly type: "string";
                                readonly description: "The postal code or ZIP code of the address";
                                readonly examples: readonly ["10028"];
                            };
                            readonly city: {
                                readonly type: "string";
                                readonly description: "The name of the city or town or village";
                                readonly examples: readonly ["New York"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "The state or province name";
                                readonly examples: readonly ["New York"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The [full name](https://www.iban.com/country-codes) of the country";
                                readonly examples: readonly ["United States"];
                            };
                            readonly countryCode: {
                                readonly type: "string";
                                readonly description: "The two-letter [ISO 3166 Alpha-2](https://www.iban.com/country-codes) country code";
                                readonly examples: readonly ["US"];
                            };
                        };
                    };
                };
            };
            readonly ignoreCalendar: {
                readonly type: "boolean";
                readonly description: "The system will check calendar availability and decline (401) if unavailable unless this flag is set to true";
            };
            readonly ignoreTerms: {
                readonly type: "boolean";
                readonly description: "The system will ensure the reservation accords with the terms (min, max nights, any other terms) of the property and will decline(401) if it is. To override, set this flag to true";
            };
            readonly ignoreBlocks: {
                readonly type: "boolean";
                readonly description: "Set this flag to true to ignore existing flexible blocks (advance notice, preparation time, etc)";
            };
            readonly confirmedAt: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Define the confirmation date. If null and status is confirmed, use the current date (YYYY-MM-DDTHh.mm.ssZ). If null and status is not confirmed, leave it as null";
            };
        };
        readonly required: readonly ["quoteId", "status"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly quoteId: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly guestId: {
                    readonly type: "string";
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
                readonly creationTime: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly reservedExpiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkInDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkOutDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly channel: {
                    readonly type: "string";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly creationInfo: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
            readonly required: readonly ["reservationId", "quoteId", "confirmationCode", "status", "guestId", "numberOfGuests", "creationTime", "reservedExpiresAt", "checkInDate", "checkOutDate", "unitTypeId", "unitId", "source", "channel", "guestsCount", "creationInfo"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerGetReservationsByIds: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["5f92cbf10cf217478ba93561", "5f92cbf10cf217478ba93562"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Reservation IDs from Guesty";
                };
            };
            readonly required: readonly ["reservationIds"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly _id: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly groupId: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly sendQuoteId: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly integrationId: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj9"];
                        readonly additionalProperties: true;
                    };
                    readonly stay: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly _id: {
                                    readonly type: "object";
                                    readonly properties: {};
                                };
                                readonly checkInDateLocalized: {
                                    readonly type: "string";
                                };
                                readonly checkOutDateLocalized: {
                                    readonly type: "string";
                                };
                                readonly guestsCount: {
                                    readonly type: "number";
                                };
                                readonly unitTypeId: {
                                    readonly type: "object";
                                    readonly properties: {};
                                };
                                readonly unitId: {
                                    readonly type: "object";
                                    readonly properties: {};
                                };
                                readonly ratePlanId: {
                                    readonly type: "string";
                                };
                                readonly eta: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly etd: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly numberOfGuests: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly numberOfChildren: {
                                            readonly type: "number";
                                            readonly description: "Number of children";
                                            readonly examples: readonly [1];
                                        };
                                        readonly numberOfInfants: {
                                            readonly type: "number";
                                            readonly description: "Number of infants";
                                            readonly examples: readonly [1];
                                        };
                                        readonly numberOfPets: {
                                            readonly type: "number";
                                            readonly description: "Number of pets";
                                            readonly examples: readonly [1];
                                        };
                                        readonly numberOfAdults: {
                                            readonly type: "number";
                                            readonly description: "Number of adults";
                                            readonly examples: readonly [1];
                                        };
                                    };
                                    readonly required: readonly ["numberOfAdults"];
                                };
                                readonly earlyCheckIn: {
                                    readonly type: "object";
                                    readonly properties: {};
                                };
                                readonly lateCheckOut: {
                                    readonly type: "object";
                                    readonly properties: {};
                                };
                            };
                            readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized", "guestsCount", "unitTypeId", "eta", "etd"];
                        };
                    };
                    readonly bookerId: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly platform: {
                        readonly type: "string";
                        readonly examples: readonly ["direct"];
                    };
                    readonly quoteId: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly accountId: {
                        readonly type: "object";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                        readonly additionalProperties: true;
                    };
                    readonly source: {
                        readonly type: "string";
                        readonly examples: readonly ["fb-campaign-01"];
                    };
                    readonly confirmedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly reservedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly reservedUntil: {
                        readonly enum: readonly ["twelveHours", "day", "thirtySixHours", "twoDays", "threeDays", -1, 0.5, 0.25, 0.17];
                        readonly type: "string";
                        readonly description: "`twelveHours` `day` `thirtySixHours` `twoDays` `threeDays` `-1` `0.5` `0.25` `0.17`";
                    };
                    readonly canceledAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly isAssigned: {
                        readonly type: "boolean";
                    };
                    readonly moneyId: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly specialRequests: {
                        readonly type: "string";
                        readonly deprecated: true;
                        readonly examples: readonly ["notes, requests"];
                    };
                    readonly keyCode: {
                        readonly type: "string";
                        readonly deprecated: true;
                        readonly examples: readonly ["code for the key"];
                    };
                    readonly alteredAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly conversationId: {
                        readonly type: "string";
                        readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    };
                    readonly transportation: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly agentBooking: {
                        readonly type: "boolean";
                    };
                    readonly reasonForVisit: {
                        readonly enum: readonly ["business", "leisure", "family", "event", "other"];
                        readonly type: "string";
                        readonly description: "`business` `leisure` `family` `event` `other`";
                    };
                    readonly canceledBy: {
                        readonly enum: readonly ["OWNER", "GUEST", "TEAM_MEMBER"];
                        readonly type: "string";
                        readonly description: "`OWNER` `GUEST` `TEAM_MEMBER`";
                    };
                    readonly cancellationReason: {
                        readonly type: "string";
                    };
                    readonly guestStay: {
                        readonly type: "object";
                        readonly properties: {
                            readonly doneBy: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["type"];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly enum: readonly ["not_set", "checked_in", "checked_out", "no_show"];
                                readonly type: "string";
                                readonly description: "`not_set` `checked_in` `checked_out` `no_show`";
                            };
                        };
                        readonly required: readonly ["createdAt", "updatedAt", "status"];
                    };
                    readonly pointOfSale: {
                        readonly type: "string";
                    };
                    readonly creationInfo: {
                        readonly description: "Reservation creation info. It is used to track the user who created the reservation, currently used for owner reservations.";
                        readonly type: "object";
                        readonly properties: {
                            readonly owner: {
                                readonly type: "object";
                                readonly required: readonly ["_id"];
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly fullName: {
                                        readonly type: "string";
                                        readonly examples: readonly ["John Doe"];
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly examples: readonly ["john.doe@gmail.com"];
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly examples: readonly ["+1 123 456 7890"];
                                    };
                                    readonly locale: {
                                        readonly type: "string";
                                        readonly examples: readonly ["en-US"];
                                    };
                                };
                            };
                        };
                    };
                    readonly createdAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly customFields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly _id: {
                                    readonly type: "string";
                                };
                                readonly fieldId: {
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["_id", "fieldId", "value"];
                        };
                    };
                    readonly status: {
                        readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                        readonly type: "string";
                        readonly description: "`confirmed` `reserved` `awaiting_payment` `inquiry` `canceled` `closed` `declined` `expired`";
                    };
                    readonly notes: {
                        readonly type: "object";
                        readonly properties: {
                            readonly other: {
                                readonly type: "string";
                            };
                            readonly cleaning: {
                                readonly type: "string";
                            };
                            readonly guest: {
                                readonly type: "string";
                            };
                            readonly specialRequests: {
                                readonly type: "string";
                            };
                            readonly keyCode: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly confirmationCode: {
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["_id", "stay", "bookerId", "platform", "quoteId", "accountId", "source", "createdAt", "status", "notes", "confirmationCode"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerQuickBooking: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly checkInDateLocalized: {
                readonly type: "string";
                readonly description: "The reservation check-in date, localized to the property’s timezone (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly checkOutDateLocalized: {
                readonly type: "string";
                readonly description: "The reservation check-out date, localized to the property’s timezone (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-02"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "The property’s ID as defined in Guesty";
                readonly examples: readonly ["5f92cbf10cf217478ba93561"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Define the source for getting an updated price quote";
                readonly examples: readonly ["manual"];
            };
            readonly status: {
                readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                readonly type: "string";
                readonly description: "Define the reservation status";
                readonly examples: readonly ["confirmed"];
            };
            readonly guestId: {
                readonly type: "string";
                readonly description: "The primary ID for returning guests and new guests that were created beforehand";
                readonly examples: readonly ["5f92cbf10cf217478ba93532"];
            };
            readonly guest: {
                readonly description: "For a new guest, note that we recommend that you create the guest first in a separate request and add their guestId to the reservation instead";
                readonly type: "object";
                readonly required: readonly ["firstName", "lastName", "phones", "email"];
                readonly properties: {
                    readonly firstName: {
                        readonly type: "string";
                        readonly description: "Guest's first name";
                        readonly examples: readonly ["Joe"];
                    };
                    readonly lastName: {
                        readonly type: "string";
                        readonly description: "Guest's last name";
                        readonly examples: readonly ["Black"];
                    };
                    readonly phones: {
                        readonly description: "The guest’s phone numbers written in E.164 format:  [+] [country code] [subscriber number including area code]";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["+972-525180054", "+972-225146062"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "Guest's primary email address";
                        readonly examples: readonly ["guest@email.com"];
                    };
                    readonly address: {
                        readonly description: "Guest's address";
                        readonly type: "object";
                        readonly properties: {
                            readonly street: {
                                readonly type: "string";
                                readonly description: "The street address, including house number and street name. It can also be a PO Box";
                                readonly examples: readonly ["1000 5th Ave"];
                            };
                            readonly zipCode: {
                                readonly type: "string";
                                readonly description: "The postal code or ZIP code of the address";
                                readonly examples: readonly ["10028"];
                            };
                            readonly city: {
                                readonly type: "string";
                                readonly description: "The name of the city or town or village";
                                readonly examples: readonly ["New York"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "The state or province name";
                                readonly examples: readonly ["New York"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The [full name](https://www.iban.com/country-codes) of the country";
                                readonly examples: readonly ["United States"];
                            };
                            readonly countryCode: {
                                readonly type: "string";
                                readonly description: "The two-letter [ISO 3166 Alpha-2](https://www.iban.com/country-codes) country code";
                                readonly examples: readonly ["US"];
                            };
                        };
                    };
                };
            };
            readonly guestsCount: {
                readonly type: "number";
                readonly description: "Number of guests to be included in the quote";
                readonly examples: readonly [2];
            };
            readonly numberOfGuests: {
                readonly description: "Total number of guests with breakdown";
                readonly type: "object";
                readonly properties: {
                    readonly numberOfChildren: {
                        readonly type: "number";
                        readonly description: "Number of children in the reservation. It can be zero";
                    };
                    readonly numberOfInfants: {
                        readonly type: "number";
                        readonly description: "Number of infants in the reservation. It can be zero";
                    };
                    readonly numberOfAdults: {
                        readonly type: "number";
                        readonly description: "Count of adults, must be > 0";
                        readonly examples: readonly [2];
                    };
                };
            };
            readonly couponCode: {
                readonly type: "string";
                readonly description: "A single coupon code defined under the accounted Revenue Management settings";
                readonly examples: readonly ["OOM20-DISCOUNT"];
            };
            readonly ratePlanId: {
                readonly type: "string";
                readonly description: "The ID of an active rate plan when you wish to apply it to the reservation";
                readonly examples: readonly ["5f92cbf10cf217478ba93561"];
            };
            readonly applyPromotions: {
                readonly type: "boolean";
                readonly default: true;
                readonly description: "Apply account promotions setup (if toggled off (false), do not take promotions when creating a reservation)";
                readonly examples: readonly [false];
            };
            readonly ignoreCalendar: {
                readonly type: "boolean";
                readonly default: false;
                readonly description: "The system will check calendar availability and decline (401) if unavailable unless this flag is set to true";
                readonly examples: readonly [true];
            };
            readonly ignoreTerms: {
                readonly type: "boolean";
                readonly default: false;
                readonly description: "The system will ensure the reservation accords with the terms (min, max nights, any other terms) of the property and will decline(401) if it is. To override, set this flag to true";
                readonly examples: readonly [true];
            };
            readonly ignoreBlocks: {
                readonly type: "boolean";
                readonly default: false;
                readonly description: "Set this flag to true to ignore existing flexible blocks (advance notice, preparation time, etc)";
                readonly examples: readonly [true];
            };
            readonly confirmedAt: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Define the confirmation date. If null and status is confirmed, use the current date. If null and status is not confirmed, leave it as null";
                readonly examples: readonly ["2024-07-06T09:12:06.574Z"];
            };
            readonly reservedUntil: {
                readonly enum: readonly [-1, 0.5, 0.25, 0.17, 12, 24, 36, 48, 72];
                readonly type: "number";
                readonly description: "It can be -1 (no limit), 0.17 (10 minutes), 0.25 (15 minutes), 0.5 (30 minutes), or 24/48/72 hours when the reservation is a booking request that reserves dates (i.e., status = “reserved”)";
                readonly examples: readonly [36];
            };
            readonly money: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly required: readonly ["checkInDateLocalized", "checkOutDateLocalized", "listingId", "source", "status", "guestsCount"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly quoteId: {
                    readonly type: "string";
                };
                readonly confirmationCode: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly guestId: {
                    readonly type: "string";
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
                readonly creationTime: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly reservedExpiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkInDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkOutDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly channel: {
                    readonly type: "string";
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly creationInfo: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
            readonly required: readonly ["reservationId", "quoteId", "confirmationCode", "status", "guestId", "numberOfGuests", "creationTime", "reservedExpiresAt", "checkInDate", "checkOutDate", "unitTypeId", "unitId", "source", "channel", "guestsCount", "creationInfo"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationCustomFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly customFields: {
                readonly description: "Custom fields of the reservation";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fieldId: {
                            readonly type: "string";
                            readonly description: "The ID of the custom field";
                            readonly examples: readonly ["65fab102a5284d73c6206db0"];
                        };
                        readonly value: {
                            readonly type: "object";
                            readonly description: "The custom field value that should assigned";
                            readonly examples: readonly ["some custom field value"];
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["fieldId", "value"];
                };
            };
        };
        readonly required: readonly ["customFields"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly customFields: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                            };
                            readonly fieldId: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["_id", "fieldId", "value"];
                    };
                };
            };
            readonly required: readonly ["reservationId", "customFields"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationDates: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly checkInDateLocalized: {
                readonly type: "string";
                readonly description: "The reservation check-in date, localized to the property’s timezone (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly checkOutDateLocalized: {
                readonly type: "string";
                readonly description: "The reservation check-out date, localized to the property’s timezone (YYYY-MM-DD)";
                readonly examples: readonly ["2024-01-02"];
            };
            readonly plannedArrival: {
                readonly type: "string";
                readonly description: "Use this to specify a different check-in time (Hh:mm) from the property’s default time";
                readonly examples: readonly ["11:00"];
            };
            readonly plannedDeparture: {
                readonly type: "string";
                readonly description: "Use this to specify a different check-out time (Hh:mm) from the property’s default time";
                readonly examples: readonly ["15:00"];
            };
            readonly earlyCheckIn: {
                readonly description: "Define if it should be marked as ‘early check-in’. E.g., true if defined, false if not";
                readonly type: "object";
                readonly properties: {
                    readonly blockDay: {
                        readonly type: "boolean";
                        readonly description: "Whether day will be blocked";
                    };
                    readonly addAdditionalFee: {
                        readonly type: "boolean";
                        readonly description: "Whether additional fee will be added";
                    };
                };
                readonly examples: readonly [true];
            };
            readonly lateCheckOut: {
                readonly description: "Define if it should be marked as ‘late check-out‘. E.g., true if defined, false if not";
                readonly type: "object";
                readonly properties: {
                    readonly blockDay: {
                        readonly type: "boolean";
                        readonly description: "Whether day will be blocked";
                    };
                    readonly addAdditionalFee: {
                        readonly type: "boolean";
                        readonly description: "Whether additional fee will be added";
                    };
                };
                readonly examples: readonly [false];
            };
            readonly applyRecalculation: {
                readonly type: "boolean";
                readonly default: true;
                readonly description: "Should the update trigger a financial recalculation? E.g., true or false.\nNote that altering the date will automatically apply recalculation, regardless of your choice";
                readonly examples: readonly [false];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly creationTime: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkInDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly checkOutDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["reservationId", "money", "creationTime", "checkInDate", "checkOutDate"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationGuests: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly guestsCount: {
                readonly type: "number";
                readonly description: "The number of guests is to be included in the reservation";
                readonly examples: readonly [3];
            };
            readonly numberOfGuests: {
                readonly description: "Object. Contains the breakdown of the guests";
                readonly type: "object";
                readonly required: readonly ["numberOfAdults"];
                readonly properties: {
                    readonly numberOfChildren: {
                        readonly type: "number";
                        readonly description: "Number of children";
                        readonly examples: readonly [1];
                    };
                    readonly numberOfInfants: {
                        readonly type: "number";
                        readonly description: "Number of infants";
                        readonly examples: readonly [1];
                    };
                    readonly numberOfPets: {
                        readonly type: "number";
                        readonly description: "Number of pets";
                        readonly examples: readonly [1];
                    };
                    readonly numberOfAdults: {
                        readonly type: "number";
                        readonly description: "Number of adults";
                        readonly examples: readonly [1];
                    };
                };
            };
        };
        readonly required: readonly ["guestsCount"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly guestsCount: {
                    readonly type: "number";
                };
                readonly numberOfGuests: {
                    readonly type: "object";
                    readonly properties: {
                        readonly numberOfChildren: {
                            readonly type: "number";
                            readonly description: "Number of children";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfInfants: {
                            readonly type: "number";
                            readonly description: "Number of infants";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfPets: {
                            readonly type: "number";
                            readonly description: "Number of pets";
                            readonly examples: readonly [1];
                        };
                        readonly numberOfAdults: {
                            readonly type: "number";
                            readonly description: "Number of adults";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["numberOfAdults"];
                };
            };
            readonly required: readonly ["reservationId", "money", "guestsCount", "numberOfGuests"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationListing: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly listingId: {
                readonly type: "string";
                readonly description: "Listing ID for the reservation";
                readonly examples: readonly ["5f92cbf10cf217478ba93561"];
            };
        };
        readonly required: readonly ["listingId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly listingId: {
                    readonly type: "string";
                };
                readonly unitId: {
                    readonly type: "string";
                };
                readonly unitTypeId: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["reservationId", "money", "listingId", "unitId", "unitTypeId"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationNotes: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly notes: {
                readonly description: "Object which contains the various types of notes";
                readonly type: "object";
                readonly properties: {
                    readonly other: {
                        readonly type: "string";
                        readonly description: "Other notes";
                        readonly examples: readonly ["Other notes"];
                    };
                    readonly cleaning: {
                        readonly type: "string";
                        readonly description: "Notes for cleaning";
                        readonly examples: readonly ["Cleaning notes"];
                    };
                    readonly guest: {
                        readonly type: "string";
                        readonly description: "For notes about the guest";
                        readonly examples: readonly ["Guest notes"];
                    };
                    readonly specialRequests: {
                        readonly type: "string";
                        readonly description: "For recording the guest's special requests";
                        readonly examples: readonly ["Special request"];
                    };
                    readonly keyCode: {
                        readonly type: "string";
                        readonly description: "Store the relevant key code for using with workflow automation";
                        readonly examples: readonly ["123456"];
                    };
                    readonly doneBy: {
                        readonly type: "string";
                        readonly description: "The name of the Guesty user";
                    };
                };
            };
        };
        readonly required: readonly ["notes"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly notes: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["reservationId", "money", "notes"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationSource: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly source: {
                readonly type: "string";
                readonly description: "Set the source of the reservation";
                readonly examples: readonly ["summer-campaign"];
            };
            readonly pointOfSale: {
                readonly type: "string";
                readonly description: "Define the point of sale";
                readonly examples: readonly ["sales agent"];
            };
            readonly applyRecalculation: {
                readonly type: "boolean";
                readonly default: true;
                readonly description: "Should the update trigger a financial recalculation";
                readonly examples: readonly [false];
            };
        };
        readonly required: readonly ["source"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly pointOfSale: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["reservationId", "money", "source", "pointOfSale"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReservationsOpenApiControllerUpdateReservationStatus: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly status: {
                readonly enum: readonly ["confirmed", "reserved", "awaiting_payment", "inquiry", "canceled", "closed", "declined", "expired"];
                readonly type: "string";
                readonly description: "Status of the reservation";
                readonly examples: readonly ["confirmed"];
            };
            readonly canceledBy: {
                readonly enum: readonly ["OWNER", "GUEST", "TEAM_MEMBER"];
                readonly type: "string";
                readonly description: "The person who cancelled reservation, if not defined will be TEAM MEMBER by default";
                readonly examples: readonly ["GUEST"];
            };
            readonly cancellationReason: {
                readonly type: "string";
                readonly description: "The reason for cancelling a reservation";
                readonly examples: readonly ["Personal changes"];
            };
        };
        readonly required: readonly ["status"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                    readonly examples: readonly ["5f92cbf10cf217478ba93561"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The Guesty reservation ID";
                };
            };
            readonly required: readonly ["reservationId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly reservationId: {
                    readonly type: "string";
                };
                readonly money: {
                    readonly type: "object";
                    readonly properties: {
                        readonly invoiceItems: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly _id: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                    };
                                    readonly isLocked: {
                                        readonly type: "boolean";
                                    };
                                    readonly normalType: {
                                        readonly type: "string";
                                    };
                                    readonly title: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly isTax: {
                                        readonly type: "boolean";
                                    };
                                    readonly isDeducted: {
                                        readonly type: "boolean";
                                    };
                                    readonly metadata: {
                                        readonly type: "boolean";
                                    };
                                    readonly evaluatedPercent: {
                                        readonly type: "number";
                                    };
                                    readonly baseAmount: {
                                        readonly type: "number";
                                    };
                                    readonly isAutoAdditionalFee: {
                                        readonly type: "boolean";
                                    };
                                    readonly secondIdentifier: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["_id", "amount", "currency", "isLocked", "normalType", "title", "type"];
                            };
                        };
                        readonly _id: {
                            readonly type: "object";
                            readonly properties: {};
                        };
                        readonly reservationId: {
                            readonly type: "string";
                        };
                        readonly fareAccommodationAdjustment: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationDiscount: {
                            readonly type: "number";
                        };
                        readonly currency: {
                            readonly type: "string";
                        };
                        readonly fareAccommodation: {
                            readonly type: "number";
                        };
                        readonly fareAccommodationAdjusted: {
                            readonly type: "number";
                        };
                        readonly fareCleaning: {
                            readonly type: "number";
                        };
                        readonly hostServiceFee: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeTax: {
                            readonly type: "number";
                        };
                        readonly hostServiceFeeIncTax: {
                            readonly type: "number";
                        };
                        readonly subTotalPrice: {
                            readonly type: "number";
                        };
                        readonly hostPayout: {
                            readonly type: "number";
                        };
                        readonly hostPayoutUsd: {
                            readonly type: "number";
                        };
                        readonly totalTaxes: {
                            readonly type: "number";
                        };
                        readonly payments: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly totalRefunded: {
                            readonly type: "number";
                        };
                        readonly totalPaid: {
                            readonly type: "number";
                        };
                        readonly paymentsDue: {
                            readonly type: "number";
                        };
                        readonly balanceDue: {
                            readonly type: "number";
                        };
                        readonly isFullyPaid: {
                            readonly type: "boolean";
                        };
                        readonly settingsSnapshot: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["invoiceItems", "_id", "reservationId", "fareAccommodationAdjustment", "fareAccommodationDiscount", "currency", "fareAccommodation", "fareAccommodationAdjusted", "fareCleaning", "hostServiceFee", "hostServiceFeeTax", "hostServiceFeeIncTax", "subTotalPrice", "hostPayout", "hostPayoutUsd", "totalTaxes", "payments", "totalRefunded", "totalPaid", "paymentsDue", "balanceDue", "isFullyPaid", "settingsSnapshot"];
                };
                readonly status: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["reservationId", "money", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReviewControllerGetListingsAverageReview: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing IDs array";
                };
            };
            readonly required: readonly ["listingIds"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                };
                readonly avg: {
                    readonly type: "number";
                };
                readonly total: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["listingId", "avg", "total"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReviewControllerGetReview: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reviewId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Review ID";
                };
            };
            readonly required: readonly ["reviewId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly accountId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReviewId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly channelId: {
                    readonly enum: readonly ["bookingCom", "airbnb2", "homeaway2"];
                    readonly type: "string";
                    readonly format: "string";
                    readonly examples: readonly ["bookingCom"];
                    readonly description: "`bookingCom` `airbnb2` `homeaway2`";
                };
                readonly subListingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly listingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly complexId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalListingId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly externalComplexId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly reservationId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReservationId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly guestId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly createdAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly createdAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly rawReview: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly reviewReplies: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly enum: readonly ["PENDING", "FAILED", "COMPLETED", "NOT_FOUND"];
                                readonly type: "string";
                                readonly description: "`PENDING` `FAILED` `COMPLETED` `NOT_FOUND`";
                            };
                            readonly reviewReply: {
                                readonly type: "string";
                            };
                            readonly replyAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["status", "reviewReply", "replyAt"];
                    };
                };
            };
            readonly required: readonly ["_id", "accountId", "externalReviewId", "channelId", "listingId", "externalListingId", "externalReservationId", "rawReview"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReviewControllerGetReviews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly externalReviewId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Channel Review ID";
                };
                readonly skip: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The number of items to skip before starting to collect the result set";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The numbers of items to return";
                };
                readonly endDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "End date-time, less than equal to updatedAt date-time of the review";
                };
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Start date-time, greater than equal to updatedAt date-time of the review";
                };
                readonly externalReservationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Channel Reservation ID";
                };
                readonly reservationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Reservation ID";
                };
                readonly listingId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Listing ID";
                };
                readonly channelId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Channel";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly isRawResponse: {
                    readonly type: "boolean";
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly skip: {
                    readonly type: "number";
                };
                readonly limit: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["code", "message", "data"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReviewControllerUpsertReview: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly channelId: {
                readonly enum: readonly ["bookingCom", "airbnb2", "homeaway2"];
                readonly type: "string";
                readonly format: "string";
                readonly examples: readonly ["bookingCom"];
            };
            readonly rawReview: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly metaData: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly required: readonly ["channelId", "rawReview"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly accountId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReviewId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly channelId: {
                    readonly enum: readonly ["bookingCom", "airbnb2", "homeaway2"];
                    readonly type: "string";
                    readonly format: "string";
                    readonly examples: readonly ["bookingCom"];
                    readonly description: "`bookingCom` `airbnb2` `homeaway2`";
                };
                readonly subListingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly listingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly complexId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalListingId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly externalComplexId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly reservationId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReservationId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly guestId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly createdAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly createdAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly rawReview: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly reviewReplies: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly enum: readonly ["PENDING", "FAILED", "COMPLETED", "NOT_FOUND"];
                                readonly type: "string";
                                readonly description: "`PENDING` `FAILED` `COMPLETED` `NOT_FOUND`";
                            };
                            readonly reviewReply: {
                                readonly type: "string";
                            };
                            readonly replyAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["status", "reviewReply", "replyAt"];
                    };
                };
            };
            readonly required: readonly ["_id", "accountId", "externalReviewId", "channelId", "listingId", "externalListingId", "externalReservationId", "rawReview"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReviewControllerUpsertReviewReply: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly reviewReply: {
                readonly type: "string";
                readonly format: "string";
            };
        };
        readonly required: readonly ["reviewReply"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reviewId: {
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Guesty Review ID";
                };
            };
            readonly required: readonly ["reviewId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly accountId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReviewId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly channelId: {
                    readonly enum: readonly ["bookingCom", "airbnb2", "homeaway2"];
                    readonly type: "string";
                    readonly format: "string";
                    readonly examples: readonly ["bookingCom"];
                    readonly description: "`bookingCom` `airbnb2` `homeaway2`";
                };
                readonly subListingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly listingId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly complexId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalListingId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly externalComplexId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly reservationId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly externalReservationId: {
                    readonly type: "string";
                    readonly format: "string";
                };
                readonly guestId: {
                    readonly type: "object";
                    readonly format: "string";
                    readonly additionalProperties: true;
                };
                readonly createdAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly createdAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly updatedAtGuesty: {
                    readonly format: "YYYY-MM-DD";
                    readonly type: "string";
                };
                readonly rawReview: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly reviewReplies: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly enum: readonly ["PENDING", "FAILED", "COMPLETED", "NOT_FOUND"];
                                readonly type: "string";
                                readonly description: "`PENDING` `FAILED` `COMPLETED` `NOT_FOUND`";
                            };
                            readonly reviewReply: {
                                readonly type: "string";
                            };
                            readonly replyAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["status", "reviewReply", "replyAt"];
                    };
                };
            };
            readonly required: readonly ["_id", "accountId", "externalReviewId", "channelId", "listingId", "externalListingId", "externalReservationId", "rawReview"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RoomPhotosControllerAssignRoomPhoto: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly spaceId: {
                readonly type: "string";
                readonly description: "Space Id to assign room photo to";
            };
            readonly propertyId: {
                readonly type: "string";
                readonly description: "The space ID to which the room photo should be assigned.";
            };
        };
        readonly required: readonly ["spaceId", "propertyId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly photoId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the photo to set spaceId to";
                };
            };
            readonly required: readonly ["photoId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly roomPhotos: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly examples: readonly ["5d9e9f4a6d5b2e0017b6d5b2"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["345774fe76e5da340bf915e3"];
                            };
                            readonly spaceId: {
                                readonly type: "string";
                                readonly examples: readonly ["545774fe76e5da340bf915e8"];
                            };
                            readonly photoId: {
                                readonly type: "string";
                                readonly examples: readonly ["145774fe76e5da340bf915e2"];
                            };
                            readonly photoUrl: {
                                readonly type: "string";
                                readonly examples: readonly ["https://image.com"];
                            };
                        };
                    };
                    readonly description: "An array containing a list of all property room photo mappings, including photo ID, space ID and photo URL.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Property not found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RoomPhotosControllerUnassignRoomPhoto: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly propertyId: {
                readonly type: "string";
                readonly description: "The Guesty ID of the property associated with this space.";
            };
        };
        readonly required: readonly ["propertyId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly photoId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the photo";
                };
            };
            readonly required: readonly ["photoId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly propertyId: {
                    readonly type: "string";
                    readonly examples: readonly ["645774fe76e5da340bf915e7"];
                };
                readonly roomPhotos: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly examples: readonly ["5d9e9f4a6d5b2e0017b6d5b2"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly examples: readonly ["345774fe76e5da340bf915e3"];
                            };
                            readonly spaceId: {
                                readonly type: "string";
                                readonly examples: readonly ["545774fe76e5da340bf915e8"];
                            };
                            readonly photoId: {
                                readonly type: "string";
                                readonly examples: readonly ["145774fe76e5da340bf915e2"];
                            };
                            readonly photoUrl: {
                                readonly type: "string";
                                readonly examples: readonly ["https://image.com"];
                            };
                        };
                    };
                    readonly description: "An array containing a list of all property room photo mappings, including photo ID, space ID and photo URL.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Property not found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ScrOpenApiControllerCreateScr: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly sourceListingId: {
                readonly type: "string";
                readonly description: "Listing ID that triggers the rule";
            };
            readonly destinationListingId: {
                readonly type: "string";
                readonly description: "Listing ID that the rule will work on";
            };
            readonly isTwoWayRule: {
                readonly type: "boolean";
                readonly description: "Applies the rule both ways between properties. Booking one property blocks off the other and the other way around.";
            };
            readonly applyRetroactively: {
                readonly type: "boolean";
                readonly description: "Rules can be applied retroactively for upcoming reservations. This also includes manual blocks if they were added to this rule.";
            };
            readonly triggers: {
                readonly description: "Enforces the rule on manual blocks your team created directly in the Multi-Calendar instead of only enforcing the rule on reservations.";
                readonly type: "object";
                readonly required: readonly ["manual"];
                readonly properties: {
                    readonly manual: {
                        readonly type: "boolean";
                    };
                };
            };
        };
        readonly required: readonly ["sourceListingId", "destinationListingId", "isTwoWayRule", "applyRetroactively", "triggers"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly sourceListingId: {
                    readonly type: "string";
                };
                readonly destinationListingId: {
                    readonly type: "string";
                };
                readonly isTwoWayRule: {
                    readonly type: "boolean";
                };
                readonly isActive: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly enum: readonly ["active", "disabled", "removed"];
                    readonly type: "string";
                    readonly description: "`active` `disabled` `removed`";
                };
                readonly triggers: {
                    readonly type: "object";
                    readonly properties: {
                        readonly manual: {
                            readonly type: "boolean";
                        };
                    };
                    readonly required: readonly ["manual"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "accountId", "sourceListingId", "destinationListingId", "isTwoWayRule", "isActive", "status", "triggers", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ScrOpenApiControllerGetScrByPublicId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly scrId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the smart calendar rule to fetch";
                };
            };
            readonly required: readonly ["scrId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly sourceListingId: {
                    readonly type: "string";
                };
                readonly destinationListingId: {
                    readonly type: "string";
                };
                readonly isTwoWayRule: {
                    readonly type: "boolean";
                };
                readonly isActive: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly enum: readonly ["active", "disabled", "removed"];
                    readonly type: "string";
                    readonly description: "`active` `disabled` `removed`";
                };
                readonly triggers: {
                    readonly type: "object";
                    readonly properties: {
                        readonly manual: {
                            readonly type: "boolean";
                        };
                    };
                    readonly required: readonly ["manual"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "accountId", "sourceListingId", "destinationListingId", "isTwoWayRule", "isActive", "status", "triggers", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ScrOpenApiControllerGetScrList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly listingId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the listing to fetch";
                };
            };
            readonly required: readonly ["listingId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly accountId: {
                        readonly type: "string";
                    };
                    readonly sourceListingId: {
                        readonly type: "string";
                    };
                    readonly destinationListingId: {
                        readonly type: "string";
                    };
                    readonly isTwoWayRule: {
                        readonly type: "boolean";
                    };
                    readonly isActive: {
                        readonly type: "boolean";
                    };
                    readonly status: {
                        readonly enum: readonly ["active", "disabled", "removed"];
                        readonly type: "string";
                        readonly description: "`active` `disabled` `removed`";
                    };
                    readonly triggers: {
                        readonly type: "object";
                        readonly properties: {
                            readonly manual: {
                                readonly type: "boolean";
                            };
                        };
                        readonly required: readonly ["manual"];
                    };
                    readonly createdAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly updatedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["id", "accountId", "sourceListingId", "destinationListingId", "isTwoWayRule", "isActive", "status", "triggers", "createdAt", "updatedAt"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ScrOpenApiControllerRemoveSmartCalendarRule: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly scrId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the smart calendar rule to remove";
                };
            };
            readonly required: readonly ["scrId"];
        }];
    };
};
declare const ScrOpenApiControllerUpdateScr: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly isTwoWayRule: {
                readonly type: "boolean";
                readonly description: "Applies the rule both ways between properties. Booking one property blocks off the other and the other way around.";
            };
            readonly applyRetroactively: {
                readonly type: "boolean";
                readonly description: "Rules can be applied retroactively for upcoming reservations. This also includes manual blocks if they were added to this rule.";
            };
            readonly triggers: {
                readonly description: "Enforces the rule on manual blocks your team created directly in the Multi-Calendar instead of only enforcing the rule on reservations.";
                readonly type: "object";
                readonly required: readonly ["manual"];
                readonly properties: {
                    readonly manual: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Define if the rule should be active or not. Note: in case of activation it is recommended to apply with `applyRetroactively`. Example input: active or disabled";
            };
        };
        readonly required: readonly ["isTwoWayRule", "applyRetroactively", "triggers", "isActive"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly scrId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the smart calendar rule to update";
                };
            };
            readonly required: readonly ["scrId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly accountId: {
                    readonly type: "string";
                };
                readonly sourceListingId: {
                    readonly type: "string";
                };
                readonly destinationListingId: {
                    readonly type: "string";
                };
                readonly isTwoWayRule: {
                    readonly type: "boolean";
                };
                readonly isActive: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly enum: readonly ["active", "disabled", "removed"];
                    readonly type: "string";
                    readonly description: "`active` `disabled` `removed`";
                };
                readonly triggers: {
                    readonly type: "object";
                    readonly properties: {
                        readonly manual: {
                            readonly type: "boolean";
                        };
                    };
                    readonly required: readonly ["manual"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "accountId", "sourceListingId", "destinationListingId", "isTwoWayRule", "isActive", "status", "triggers", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SvixSecretApiControllerGetSecret: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly url: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["url"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {};
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxesLevelConfigurationsControllerGetUnitTypeTaxesLevelConfigurations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The unit type id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly levelEntityType: {
                    readonly type: "string";
                    readonly enum: readonly ["ACCOUNT", "UNIT_TYPE"];
                    readonly description: "`ACCOUNT` `UNIT_TYPE`";
                };
            };
            readonly required: readonly ["unitTypeId", "accountId", "levelEntityType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxesLevelConfigurationsControllerUpsertTaxesLevelConfigurationsOpenApi: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly unitTypeId: {
                readonly type: "string";
                readonly description: "1. The unit (listing) id";
                readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
            };
            readonly levelEntityType: {
                readonly type: "string";
                readonly description: "Sets from what entity will the taxes for reservations made on the unitType will be taken from";
                readonly enum: readonly ["ACCOUNT", "UNIT_TYPE"];
            };
        };
        readonly required: readonly ["unitTypeId", "levelEntityType"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly unitTypeId: {
                    readonly type: "string";
                    readonly examples: readonly ["df7hf01cnduhdb2125854dj8"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["623892d57f4f56afcb25587c"];
                };
                readonly levelEntityType: {
                    readonly type: "string";
                    readonly enum: readonly ["ACCOUNT", "UNIT_TYPE"];
                    readonly description: "`ACCOUNT` `UNIT_TYPE`";
                };
            };
            readonly required: readonly ["unitTypeId", "accountId", "levelEntityType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TransactionsControllerCreateCharge: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Charge name";
                readonly examples: readonly ["Furniture repairment"];
            };
            readonly category: {
                readonly type: "string";
                readonly description: "Charge category";
                readonly enum: readonly ["advertising", "cleaning", "damage_waiver", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat", "insurance", "monitoring_surveillance", "garden_maintenance", "jacuzzi_maintenance", "sauna_maintenance", "photoshoot", "bank_fees", "sta_licensing", "security", "laundry", "gardening", "guest_compensation", "home_improvement", "other_expenses", "other_income", "other_services_ops_assistants", "painting", "plumbing", "refund", "refund_security_deposit", "rubbish_removal_service", "set_up_fee", "strata_rates", "security_deposit"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Charge description. Max length is 256 characters";
                readonly examples: readonly ["Furniture repair"];
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Charge amount, account currency will be used";
                readonly examples: readonly [100];
            };
            readonly recognitionDate: {
                readonly type: "string";
                readonly description: "Charge recognition date. ISO 8601 Date format (year-month-day)";
                readonly examples: readonly ["2023-10-27"];
            };
            readonly ownerId: {
                readonly type: "string";
                readonly description: "You can get your owner ID [here](/reference/get_owners)";
                readonly examples: readonly ["448f9f83-27ca-4484-81b6-946e2e1c5490"];
            };
            readonly listingId: {
                readonly type: "string";
                readonly description: "You can get your listing ID [here](/reference/get_listings)";
                readonly examples: readonly ["3b610a47-f0f9-4fd5-a8ba-818ad3e5f8a8"];
            };
            readonly revenueShare: {
                readonly description: "If revenue share is not defined, the default split will be 100% attributed to the PMC";
                readonly type: "object";
                readonly required: readonly ["shareSplit", "vendorId"];
                readonly properties: {
                    readonly shareSplit: {
                        readonly type: "number";
                        readonly description: "A share split is a floating point number that represents the percentage. For example, \n      - `0.5` means that the share is 50% between PMC and Vendor\n      - `0.1` means that the share is 10% Vendor and 90% PMC\n      - `0` means that the revenue goes 100% PMC";
                        readonly examples: readonly [0.5];
                    };
                    readonly vendorId: {
                        readonly type: "string";
                        readonly description: "You can get your vendor ID [here](/reference/vendorscontroller_getall)";
                        readonly examples: readonly ["96ac7041-0615-496f-8c54-e8c1fa668cc0"];
                    };
                };
            };
            readonly vatOCConfig: {
                readonly description: "Charge VAT configuration";
                readonly type: "object";
                readonly required: readonly ["name", "description", "percent"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "VAT name";
                        readonly examples: readonly ["VAT"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "VAT description";
                        readonly examples: readonly ["VAT"];
                    };
                    readonly percent: {
                        readonly type: "number";
                        readonly description: "VAT percentage. Example: 0.01 is 1%";
                        readonly examples: readonly [0.01];
                    };
                };
            };
            readonly attachments: {
                readonly description: "Add attachments to charge";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL to CDN where attachment is stored. Max length is 2048 characters";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly urlThumbnail: {
                            readonly type: "string";
                            readonly description: "URL to CDN where attachment thumbnail is stored. Max length is 2048 characters";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly extension: {
                            readonly type: "string";
                            readonly description: "Attachment file extension. Max length is 10 characters";
                            readonly examples: readonly ["png"];
                        };
                        readonly fileName: {
                            readonly type: "string";
                            readonly description: "Attachment file name. Max length is 256 characters";
                            readonly examples: readonly ["Invoice copy"];
                        };
                    };
                    readonly required: readonly ["url", "urlThumbnail", "extension", "fileName"];
                };
            };
        };
        readonly required: readonly ["name", "category", "description", "amount", "recognitionDate"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["each value in listingIds must be a string", "listingIds must be an array", "listingIds should not be empty"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TransactionsControllerCreateExpense: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Expense name";
                readonly examples: readonly ["Maintenance expense"];
            };
            readonly category: {
                readonly type: "string";
                readonly description: "Expense category";
                readonly enum: readonly ["advertising", "cleaning", "damage_waiver", "electricity", "furniture_appliances", "gas", "internet", "lock_automation", "management", "mortgage", "pest_control", "pool_cleaning", "property_taxes", "repairs_maintenance", "supplies_purchases", "other_misc", "taxes_paid", "telephone", "television", "trash", "water_septic", "guest_cleaning", "owner_cleaning", "channel_commission", "payment_charge", "pet_fee", "startup_fee", "fotoshoot", "vat", "insurance", "monitoring_surveillance", "garden_maintenance", "jacuzzi_maintenance", "sauna_maintenance", "photoshoot", "bank_fees", "sta_licensing", "security", "laundry", "gardening", "guest_compensation", "home_improvement", "other_expenses", "other_income", "other_services_ops_assistants", "painting", "plumbing", "refund", "refund_security_deposit", "rubbish_removal_service", "set_up_fee", "strata_rates", "security_deposit"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Expense description. Max length is 256 characters";
                readonly examples: readonly ["Bulb replacement"];
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "Expense amount, account currency will be used";
                readonly examples: readonly [5];
            };
            readonly recognitionDate: {
                readonly type: "string";
                readonly description: "Expense recognition date. ISO 8601 Date format (year-month-day)";
                readonly examples: readonly ["2023-10-27"];
            };
            readonly vendorId: {
                readonly type: "string";
                readonly description: "You can get your vendor ID [here](/reference/vendorscontroller_getall)";
                readonly examples: readonly ["5f4f6e1c1c6e4e001f7e8b4e"];
            };
            readonly expenseShare: {
                readonly description: "Share expense between PMC and Owner, by default 100% is going to PMC";
                readonly type: "object";
                readonly required: readonly ["shareSplit", "ownerId"];
                readonly properties: {
                    readonly shareSplit: {
                        readonly type: "number";
                        readonly description: "A share split is a floating point number that represents the percentage. For example, \n      - `0.5` means that the share is 50% between PMC and Owner.\n      - `0.1` means that the share is 10% Owner and 90% PMC.\n      - `0` means that the charge covered 100% by PMC.";
                        readonly examples: readonly [0.5];
                    };
                    readonly ownerId: {
                        readonly type: "string";
                        readonly description: "You can get your owner ID [here](/reference/get_owners)";
                        readonly examples: readonly ["7af22b68-c05e-4fa0-80be-43ebac0672c0"];
                    };
                    readonly listingId: {
                        readonly type: "string";
                        readonly description: "You can get your listing ID [here](/reference/get_listings)";
                        readonly examples: readonly ["4ca95c56-f71c-4940-85cd-2aa56f61f052"];
                    };
                };
            };
            readonly attachments: {
                readonly description: "Add attachments to expense";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly url: {
                            readonly type: "string";
                            readonly description: "URL to CDN where attachment is stored. Max length is 2048 characters";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly urlThumbnail: {
                            readonly type: "string";
                            readonly description: "URL to CDN where attachment thumbnail is stored. Max length is 2048 characters";
                            readonly examples: readonly ["https://cdn.filepicker.io/api/file/bBnKEk8TlmJAUHcLApRx"];
                        };
                        readonly extension: {
                            readonly type: "string";
                            readonly description: "Attachment file extension. Max length is 10 characters";
                            readonly examples: readonly ["png"];
                        };
                        readonly fileName: {
                            readonly type: "string";
                            readonly description: "Attachment file name. Max length is 256 characters";
                            readonly examples: readonly ["Invoice copy"];
                        };
                    };
                    readonly required: readonly ["url", "urlThumbnail", "extension", "fileName"];
                };
            };
        };
        readonly required: readonly ["name", "category", "description", "amount", "recognitionDate", "vendorId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["each value in listingIds must be a string", "listingIds must be an array", "listingIds should not be empty"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpsertFields: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly active: {
                readonly type: "boolean";
                readonly description: "Show if translation is active";
                readonly examples: readonly [true];
            };
            readonly title: {
                readonly type: "string";
                readonly description: "Listing title";
                readonly examples: readonly ["Private 2BR near Downtown Detroit Queen Beds"];
            };
            readonly summary: {
                readonly type: "string";
                readonly description: "Listing description";
                readonly examples: readonly ["You can end your search NOW. You've just found an ideal place for your trip to Detroit"];
            };
            readonly space: {
                readonly type: "string";
                readonly description: "Listing space description";
                readonly examples: readonly ["We take absolute pleasure in welcoming you to the inviting 2B2B. With a stunning top floor view of Detroit"];
            };
            readonly access: {
                readonly type: "string";
                readonly description: "Listing access description";
                readonly examples: readonly ["Laundry and Dryer is available in your unit. Paid Car parking is available for attached car garage"];
            };
            readonly neighborhood: {
                readonly type: "string";
                readonly description: "Listing neighborhood description";
                readonly examples: readonly ["This apartment is situated right in the heart of Detroit"];
            };
            readonly transit: {
                readonly type: "string";
                readonly description: "Listing transit description";
                readonly examples: readonly ["The apartment is easy reachable by train as St James stations"];
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Listing notes";
                readonly examples: readonly ["The keys will be available to collect from a local Keynest Shop"];
            };
            readonly interactionWithGuests: {
                readonly type: "string";
                readonly description: "Interaction with guests description";
                readonly examples: readonly ["We will welcome you in person and explain about the area and answer any question you may have."];
            };
            readonly checkInInstructions: {
                readonly description: "Details about check-in process";
                readonly type: "object";
                readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                readonly properties: {
                    readonly primaryCheckIn: {
                        readonly type: "string";
                        readonly examples: readonly ["RECEPTION"];
                    };
                    readonly alternativeCheckIn: {
                        readonly type: "string";
                        readonly examples: readonly ["LOCK_BOX"];
                    };
                    readonly notes: {
                        readonly type: "string";
                        readonly examples: readonly ["Happy to see you in our apartments"];
                    };
                    readonly welcomeMessage: {
                        readonly type: "string";
                        readonly examples: readonly ["Happy to see you in our apartments"];
                    };
                };
            };
        };
        readonly required: readonly ["active", "title"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5b2149c9f579400024388c47"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The listing ID upsert the translation";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly language: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Language slug for the translation";
                };
            };
            readonly required: readonly ["language"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly languageSlug: {
                    readonly type: "string";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly summary: {
                    readonly type: "string";
                };
                readonly space: {
                    readonly type: "string";
                };
                readonly access: {
                    readonly type: "string";
                };
                readonly neighborhood: {
                    readonly type: "string";
                };
                readonly transit: {
                    readonly type: "string";
                };
                readonly notes: {
                    readonly type: "string";
                };
                readonly interactionWithGuests: {
                    readonly type: "string";
                };
                readonly checkInInstructions: {
                    readonly description: "Details about check-in process";
                    readonly type: "object";
                    readonly required: readonly ["primaryCheckIn", "alternativeCheckIn", "notes", "welcomeMessage"];
                    readonly properties: {
                        readonly primaryCheckIn: {
                            readonly type: "string";
                            readonly examples: readonly ["RECEPTION"];
                        };
                        readonly alternativeCheckIn: {
                            readonly type: "string";
                            readonly examples: readonly ["LOCK_BOX"];
                        };
                        readonly notes: {
                            readonly type: "string";
                            readonly examples: readonly ["Happy to see you in our apartments"];
                        };
                        readonly welcomeMessage: {
                            readonly type: "string";
                            readonly examples: readonly ["Happy to see you in our apartments"];
                        };
                    };
                };
            };
            readonly required: readonly ["languageSlug", "active", "title", "summary", "space", "access", "neighborhood", "transit", "notes", "interactionWithGuests", "checkInInstructions"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "integer";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UsersHttpControllerCreateUser: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
            };
            readonly emails: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly firstName: {
                readonly type: "string";
            };
            readonly lastName: {
                readonly type: "string";
            };
            readonly title: {
                readonly type: "string";
            };
            readonly timezone: {
                readonly type: "string";
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://thumbnail.url.com"];
                    };
                    readonly regular: {
                        readonly type: "string";
                        readonly examples: readonly ["https://regular.url.com"];
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://large.url.com"];
                    };
                };
                readonly required: readonly ["thumbnail", "regular", "large"];
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly phone: {
                readonly type: "string";
            };
            readonly phones: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly preferredContactMethod: {
                readonly type: "string";
            };
            readonly noteBeforeContacting: {
                readonly type: "string";
            };
            readonly notes: {
                readonly type: "string";
            };
            readonly customerType: {
                readonly enum: readonly ["lite", "pro"];
                readonly type: "string";
            };
            readonly roles: {
                readonly minItems: 1;
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly roleId: {
                            readonly type: "string";
                            readonly enum: readonly ["57447a900ebc04ba98064035", "58db6932ea2a13ea9f4855a5", "578b52a6dddfe2b1d0781b0e", "578b52a6dddfe2b1d0781b0f", "578b52a6dddfe2b1d0781b12", "578b52a6dddfe2b1d0781b10", "578b52a6dddfe2b1d0781b11", "57c2d040cf6c3fed6a4d1775", "58db693fea2a13ea9f4855aa", "579e1769cf6c3fed6a3f6b1a", "5e567a850ba1fb0244146fc0", "5e57b0826b4440002a603a93", "60d1b0fb396b25993e756e63", "5cf7846e02d9171c4e4b1698"];
                            readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                            readonly examples: readonly ["579e1769cf6c3fed6a3f6b1a"];
                        };
                        readonly listingIds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly required: readonly ["roleId"];
                };
            };
            readonly favs: {
                readonly type: "object";
                readonly properties: {
                    readonly views: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly required: readonly ["views"];
            };
            readonly displayLanguage: {
                readonly type: "string";
            };
            readonly settings: {
                readonly type: "object";
                readonly properties: {
                    readonly notifications: {
                        readonly description: "Notification settings";
                        readonly type: "object";
                        readonly required: readonly ["subscriptions"];
                        readonly properties: {
                            readonly subscriptions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "name", "targets"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                            readonly examples: readonly ["PAYMENT"];
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly examples: readonly ["FAILED"];
                                        };
                                        readonly targets: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                                readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                            };
                                            readonly examples: readonly ["DASHBOARD"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly registrationType: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["email", "firstName", "lastName", "roles"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "User MongoDB _id";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Your account ID";
                    readonly examples: readonly ["611cf837c9c54b01736ae01c"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly examples: readonly ["example@email.com"];
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["example@email.com"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["John"];
                };
                readonly userStartedUpdateEmailFlow: {
                    readonly type: "boolean";
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Boe"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["John Boe"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["CTO"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly examples: readonly ["Europe/Zurich"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://thumbnail.url.com"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://regular.url.com"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://large.url.com"];
                        };
                    };
                    readonly required: readonly ["thumbnail", "regular", "large"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["tag1"];
                };
                readonly lastActivityTime: {
                    readonly type: "number";
                };
                readonly phone: {
                    readonly type: "string";
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                };
                readonly noteBeforeContacting: {
                    readonly type: "string";
                };
                readonly notes: {
                    readonly type: "string";
                };
                readonly roles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly roleId: {
                                readonly type: "string";
                                readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                            };
                            readonly listingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly required: readonly ["roleId"];
                    };
                };
                readonly favs: {
                    readonly type: "object";
                    readonly properties: {
                        readonly views: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly required: readonly ["views"];
                };
                readonly displayLanguage: {
                    readonly type: "string";
                };
                readonly settings: {
                    readonly type: "object";
                    readonly properties: {
                        readonly notifications: {
                            readonly description: "Notification settings";
                            readonly type: "object";
                            readonly required: readonly ["subscriptions"];
                            readonly properties: {
                                readonly subscriptions: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["type", "name", "targets"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                                readonly examples: readonly ["PAYMENT"];
                                                readonly description: "`PAYMENT` `RESERVATION` `TASK` `GENERAL` `NIGHTS_LIMIT`";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly examples: readonly ["FAILED"];
                                            };
                                            readonly targets: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                                    readonly description: "`EMAIL` `SMS` `DASHBOARD`";
                                                };
                                                readonly examples: readonly ["DASHBOARD"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["property1 must not be less than 0", "property1 must be an integer number"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UsersHttpControllerGetUserById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "User MongoDB _id";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "User MongoDB _id";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Your account ID";
                    readonly examples: readonly ["611cf837c9c54b01736ae01c"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly examples: readonly ["example@email.com"];
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["example@email.com"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["John"];
                };
                readonly userStartedUpdateEmailFlow: {
                    readonly type: "boolean";
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Boe"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["John Boe"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["CTO"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly examples: readonly ["Europe/Zurich"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://thumbnail.url.com"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://regular.url.com"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://large.url.com"];
                        };
                    };
                    readonly required: readonly ["thumbnail", "regular", "large"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["tag1"];
                };
                readonly lastActivityTime: {
                    readonly type: "number";
                };
                readonly phone: {
                    readonly type: "string";
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                };
                readonly noteBeforeContacting: {
                    readonly type: "string";
                };
                readonly notes: {
                    readonly type: "string";
                };
                readonly roles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly roleId: {
                                readonly type: "string";
                                readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                            };
                            readonly listingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly required: readonly ["roleId"];
                    };
                };
                readonly favs: {
                    readonly type: "object";
                    readonly properties: {
                        readonly views: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly required: readonly ["views"];
                };
                readonly displayLanguage: {
                    readonly type: "string";
                };
                readonly settings: {
                    readonly type: "object";
                    readonly properties: {
                        readonly notifications: {
                            readonly description: "Notification settings";
                            readonly type: "object";
                            readonly required: readonly ["subscriptions"];
                            readonly properties: {
                                readonly subscriptions: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["type", "name", "targets"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                                readonly examples: readonly ["PAYMENT"];
                                                readonly description: "`PAYMENT` `RESERVATION` `TASK` `GENERAL` `NIGHTS_LIMIT`";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly examples: readonly ["FAILED"];
                                            };
                                            readonly targets: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                                    readonly description: "`EMAIL` `SMS` `DASHBOARD`";
                                                };
                                                readonly examples: readonly ["DASHBOARD"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["property1 must not be less than 0", "property1 must be an integer number"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UsersHttpControllerGetUsers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Selection of fields, separated by space. If fields not be chosen response will be return with all fields. The selected fields from the users table will be returned inside the response";
                };
                readonly skip: {
                    readonly minimum: 0;
                    readonly default: 0;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination";
                };
                readonly limit: {
                    readonly minimum: 0;
                    readonly maximum: 200;
                    readonly default: 200;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination, max: 200";
                };
                readonly sort: {
                    readonly default: "fullName";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sorting";
                };
                readonly q: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Search query string. Searches in fullName, emails, phones";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [42];
                };
                readonly fields: {
                    readonly type: "string";
                    readonly examples: readonly ["fullName"];
                };
                readonly sort: {
                    readonly type: "string";
                    readonly examples: readonly ["fullName"];
                };
                readonly skip: {
                    readonly type: "number";
                    readonly examples: readonly [20];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                };
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly _id: {
                                readonly type: "string";
                                readonly description: "User MongoDB _id";
                                readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Your account ID";
                                readonly examples: readonly ["611cf837c9c54b01736ae01c"];
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly examples: readonly ["example@email.com"];
                            };
                            readonly emails: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly examples: readonly ["example@email.com"];
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly examples: readonly ["John"];
                            };
                            readonly userStartedUpdateEmailFlow: {
                                readonly type: "boolean";
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly examples: readonly ["Boe"];
                            };
                            readonly fullName: {
                                readonly type: "string";
                                readonly examples: readonly ["John Boe"];
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly examples: readonly ["CTO"];
                            };
                            readonly timezone: {
                                readonly type: "string";
                                readonly examples: readonly ["Europe/Zurich"];
                            };
                            readonly picture: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly thumbnail: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://thumbnail.url.com"];
                                    };
                                    readonly regular: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://regular.url.com"];
                                    };
                                    readonly large: {
                                        readonly type: "string";
                                        readonly examples: readonly ["https://large.url.com"];
                                    };
                                };
                                readonly required: readonly ["thumbnail", "regular", "large"];
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly examples: readonly ["tag1"];
                            };
                            readonly lastActivityTime: {
                                readonly type: "number";
                            };
                            readonly phone: {
                                readonly type: "string";
                            };
                            readonly phones: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly preferredContactMethod: {
                                readonly type: "string";
                            };
                            readonly noteBeforeContacting: {
                                readonly type: "string";
                            };
                            readonly notes: {
                                readonly type: "string";
                            };
                            readonly roles: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly roleId: {
                                            readonly type: "string";
                                            readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                                        };
                                        readonly listingIds: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly required: readonly ["roleId"];
                                };
                            };
                            readonly favs: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly views: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly required: readonly ["views"];
                            };
                            readonly displayLanguage: {
                                readonly type: "string";
                            };
                            readonly settings: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly notifications: {
                                        readonly description: "Notification settings";
                                        readonly type: "object";
                                        readonly required: readonly ["subscriptions"];
                                        readonly properties: {
                                            readonly subscriptions: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["type", "name", "targets"];
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                                            readonly examples: readonly ["PAYMENT"];
                                                            readonly description: "`PAYMENT` `RESERVATION` `TASK` `GENERAL` `NIGHTS_LIMIT`";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly examples: readonly ["FAILED"];
                                                        };
                                                        readonly targets: {
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                                                readonly description: "`EMAIL` `SMS` `DASHBOARD`";
                                                            };
                                                            readonly examples: readonly ["DASHBOARD"];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["count", "fields", "sort", "skip", "limit", "results"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["property1 must not be less than 0", "property1 must be an integer number"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UsersHttpControllerRemoveUser: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "User MongoDB _id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["property1 must not be less than 0", "property1 must be an integer number"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UsersHttpControllerUpdateUser: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
            };
            readonly emails: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly firstName: {
                readonly type: "string";
            };
            readonly lastName: {
                readonly type: "string";
            };
            readonly title: {
                readonly type: "string";
            };
            readonly timezone: {
                readonly type: "string";
            };
            readonly picture: {
                readonly type: "object";
                readonly properties: {
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly examples: readonly ["https://thumbnail.url.com"];
                    };
                    readonly regular: {
                        readonly type: "string";
                        readonly examples: readonly ["https://regular.url.com"];
                    };
                    readonly large: {
                        readonly type: "string";
                        readonly examples: readonly ["https://large.url.com"];
                    };
                };
                readonly required: readonly ["thumbnail", "regular", "large"];
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly phone: {
                readonly type: "string";
            };
            readonly phones: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly preferredContactMethod: {
                readonly type: "string";
            };
            readonly noteBeforeContacting: {
                readonly type: "string";
            };
            readonly notes: {
                readonly type: "string";
            };
            readonly roles: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly roleId: {
                            readonly type: "string";
                            readonly enum: readonly ["57447a900ebc04ba98064035", "58db6932ea2a13ea9f4855a5", "578b52a6dddfe2b1d0781b0e", "578b52a6dddfe2b1d0781b0f", "578b52a6dddfe2b1d0781b12", "578b52a6dddfe2b1d0781b10", "578b52a6dddfe2b1d0781b11", "57c2d040cf6c3fed6a4d1775", "58db693fea2a13ea9f4855aa", "579e1769cf6c3fed6a3f6b1a", "5e567a850ba1fb0244146fc0", "5e57b0826b4440002a603a93", "60d1b0fb396b25993e756e63", "5cf7846e02d9171c4e4b1698"];
                            readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                            readonly examples: readonly ["579e1769cf6c3fed6a3f6b1a"];
                        };
                        readonly listingIds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly required: readonly ["roleId"];
                };
            };
            readonly favs: {
                readonly type: "object";
                readonly properties: {
                    readonly views: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly required: readonly ["views"];
            };
            readonly displayLanguage: {
                readonly type: "string";
            };
            readonly settings: {
                readonly type: "object";
                readonly properties: {
                    readonly notifications: {
                        readonly description: "Notification settings";
                        readonly type: "object";
                        readonly required: readonly ["subscriptions"];
                        readonly properties: {
                            readonly subscriptions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "name", "targets"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                            readonly examples: readonly ["PAYMENT"];
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly examples: readonly ["FAILED"];
                                        };
                                        readonly targets: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                                readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                            };
                                            readonly examples: readonly ["DASHBOARD"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "User MongoDB _id";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly _id: {
                    readonly type: "string";
                    readonly description: "User MongoDB _id";
                    readonly examples: readonly ["611d02b7c9c54b01736ae01d"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Your account ID";
                    readonly examples: readonly ["611cf837c9c54b01736ae01c"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly examples: readonly ["example@email.com"];
                };
                readonly emails: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["example@email.com"];
                };
                readonly firstName: {
                    readonly type: "string";
                    readonly examples: readonly ["John"];
                };
                readonly userStartedUpdateEmailFlow: {
                    readonly type: "boolean";
                };
                readonly lastName: {
                    readonly type: "string";
                    readonly examples: readonly ["Boe"];
                };
                readonly fullName: {
                    readonly type: "string";
                    readonly examples: readonly ["John Boe"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly examples: readonly ["CTO"];
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly examples: readonly ["Europe/Zurich"];
                };
                readonly picture: {
                    readonly type: "object";
                    readonly properties: {
                        readonly thumbnail: {
                            readonly type: "string";
                            readonly examples: readonly ["https://thumbnail.url.com"];
                        };
                        readonly regular: {
                            readonly type: "string";
                            readonly examples: readonly ["https://regular.url.com"];
                        };
                        readonly large: {
                            readonly type: "string";
                            readonly examples: readonly ["https://large.url.com"];
                        };
                    };
                    readonly required: readonly ["thumbnail", "regular", "large"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["tag1"];
                };
                readonly lastActivityTime: {
                    readonly type: "number";
                };
                readonly phone: {
                    readonly type: "string";
                };
                readonly phones: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly preferredContactMethod: {
                    readonly type: "string";
                };
                readonly noteBeforeContacting: {
                    readonly type: "string";
                };
                readonly notes: {
                    readonly type: "string";
                };
                readonly roles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly roleId: {
                                readonly type: "string";
                                readonly description: "Role ID:\n\n* `58db6932ea2a13ea9f4855a5` - Account manager\n\n* `578b52a6dddfe2b1d0781b0e` - Listing Viewer\n\n* `578b52a6dddfe2b1d0781b0f` - Calendar Availability Control\n\n* `578b52a6dddfe2b1d0781b12` - Listing Admin\n\n* `578b52a6dddfe2b1d0781b10` - Calendar Full Control\n\n* `578b52a6dddfe2b1d0781b11` - Listing's Financials\n\n* `57447a900ebc04ba98064035` - Account admin\n\n* `57c2d040cf6c3fed6a4d1775` - Integration Manager\n\n* `58db693fea2a13ea9f4855aa` - Viewer\n\n* `579e1769cf6c3fed6a3f6b1a` - Listing Manager\n\n* `5e567a850ba1fb0244146fc0` - Calendar Viewer\n\n* `5e57b0826b4440002a603a93` - Communication Agent\n\n* `60d1b0fb396b25993e756e63` - Revenue Manager";
                            };
                            readonly listingIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly required: readonly ["roleId"];
                    };
                };
                readonly favs: {
                    readonly type: "object";
                    readonly properties: {
                        readonly views: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly required: readonly ["views"];
                };
                readonly displayLanguage: {
                    readonly type: "string";
                };
                readonly settings: {
                    readonly type: "object";
                    readonly properties: {
                        readonly notifications: {
                            readonly description: "Notification settings";
                            readonly type: "object";
                            readonly required: readonly ["subscriptions"];
                            readonly properties: {
                                readonly subscriptions: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["type", "name", "targets"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PAYMENT", "RESERVATION", "TASK", "GENERAL", "NIGHTS_LIMIT"];
                                                readonly examples: readonly ["PAYMENT"];
                                                readonly description: "`PAYMENT` `RESERVATION` `TASK` `GENERAL` `NIGHTS_LIMIT`";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly examples: readonly ["FAILED"];
                                            };
                                            readonly targets: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["EMAIL", "SMS", "DASHBOARD"];
                                                    readonly description: "`EMAIL` `SMS` `DASHBOARD`";
                                                };
                                                readonly examples: readonly ["DASHBOARD"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["property1 must not be less than 0", "property1 must be an integer number"];
                        };
                    };
                    readonly required: readonly ["message", "code", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const VendorsControllerGetAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly limit: {
                    readonly minimum: 25;
                    readonly maximum: 100;
                    readonly default: 25;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination param. Limit the number of results";
                };
                readonly skip: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Pagination param. Skip a number of the first results.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly count: {
                    readonly type: "number";
                };
                readonly results: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly company: {
                                readonly type: "string";
                            };
                            readonly firstName: {
                                readonly type: "string";
                            };
                            readonly lastName: {
                                readonly type: "string";
                            };
                            readonly fullName: {
                                readonly type: "string";
                            };
                            readonly phone: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly email: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly address: {
                                readonly type: "string";
                            };
                            readonly code: {
                                readonly type: "string";
                            };
                            readonly notes: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["id", "company", "firstName", "lastName", "phone", "email"];
                    };
                };
            };
            readonly required: readonly ["count", "results"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Bad Request"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [400];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["VALIDATION_FAILED"];
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly examples: readonly ["limit must not be less than 25"];
                        };
                    };
                    readonly required: readonly ["message", "status", "code", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const VendorsControllerGetById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["6092061fdeaae7002f92078e"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Vendor id to get";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly company: {
                    readonly type: "string";
                };
                readonly firstName: {
                    readonly type: "string";
                };
                readonly lastName: {
                    readonly type: "string";
                };
                readonly fullName: {
                    readonly type: "string";
                };
                readonly phone: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly email: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly address: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly notes: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "company", "firstName", "lastName", "phone", "email"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Missing account_id error message"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [403];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [404];
                        };
                        readonly data: {
                            readonly type: "string";
                            readonly examples: readonly ["Not Found"];
                        };
                    };
                    readonly required: readonly ["message", "status", "data"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Something went wrong"];
                        };
                        readonly status: {
                            readonly type: "number";
                            readonly examples: readonly [500];
                        };
                    };
                    readonly required: readonly ["message", "status"];
                };
            };
            readonly required: readonly ["error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { $Get, AddComplex, AddressControllerGeocodeAddress, AddressControllerGetAddress, AddressControllerUpdateAddress, AddressControllerUpdateComplexAddress, AirbnbResolutionsControllerListResolutions, AmenitiesControllerGetForUnitType, AmenitiesControllerSetAmenitiesForProperty, AriCalendarControllerGet, AriCalendarControllerUpsert, AssignListingControllerUpdate, BusinessModelsOaControllerIndex, CalendarControllerGet, CalendarControllerUpsert, CalendarLogsOpenApiControllerGetCalendarLogs, CalendarMetadataControllerGet, CalendarMetadataControllerUpsert, ChannelCommissionControllerGetListingsChannelCommission, ChannelCommissionControllerGetListingsChannelCommission1, ChannelCommissionControllerUpdateAccountChannelCommission, ChannelCommissionControllerUpdateAccountChannelCommission1, ChannelCommissionControllerUpdateListingsChannelCommission, ChannelCommissionControllerUpdateListingsChannelCommission1, ComplexesControllerAssignComplexPropertyIds, ComplexesControllerGetComplexById, ComplexesControllerRemoveComplex, ComplexesControllerUnassignComplexPropertyIds, ComplexesControllerUpdateComplexDetails, DeleteAccountsIdCustomFieldsFieldId, DeleteAdditionalFeesId, DeleteContactsId, DeleteHooksHookid, DeleteListingsId, DeleteListingsListingIdCustomFieldsFieldId, DeleteOwnersId, DeleteOwnersOwneridDocumentsDocumentid, DeleteReservationsReservationIdCustomFieldsFieldId, DeleteSavedRepliesReplyid, DeleteTasksOpenApiTaskid, DeleteViewsId, DeleteWebhooksId, ExportedCalendarOpenApiControllerCreateExportedCalendar, ExportedCalendarOpenApiControllerDeleteExportedCalendar, ExportedCalendarOpenApiControllerGetExportedCalendar, ExportedCalendarOpenApiControllerGetExportedCalendarById, ExportedCalendarOpenApiControllerUpdateExportedCalendar, GetAccountsIdCustomFields, GetAccountsIdCustomFieldsFieldId, GetAccountsMe, GetAdditionalFeesAccount, GetAdditionalFeesListingListingid, GetAllComplexes, GetAmenitiesGroups, GetAvailabilityPricingApiCalendarListings, GetAvailabilityPricingApiCalendarListingsId, GetCommunicationConversations, GetCommunicationConversationsConversationid, GetCommunicationConversationsConversationidPosts, GetContacts, GetContactsId, GetFields, GetFinancialsListingId, GetGuestsIdPaymentMethods, GetHooks, GetHooksHookid, GetIntegrations, GetIntegrationsId, GetLanguages, GetListings, GetListingsCities, GetListingsId, GetListingsIdCustomFields, GetListingsIdCustomFieldsFieldId, GetListingsIdFieldsPaymentproviderid, GetListingsTags, GetOwners, GetOwnersId, GetOwnersOwneridDocuments, GetOwnersOwneridDocumentsDocumentid, GetOwnersOwneridDocumentsDocumentidDownload, GetOwnersReservations, GetOwnersReservationsId, GetPaymentProvider, GetPaymentProviderByListing, GetPropertiesHouseRules, GetPropertiesHouseRulesUnitTypeUnittypeid, GetPropertiesSpacesBedTypes, GetPropertiesSpacesComplexComplexid, GetPropertiesSpacesRoomTypes, GetPropertiesSpacesUnitTypeUnittypeid, GetReservations, GetReservationsId, GetReservationsIdCustomFields, GetReservationsIdCustomFieldsFieldId, GetRoomPhotosByPropertyId, GetSavedReplies, GetSavedRepliesListingListingid, GetSavedRepliesReplyid, GetStats, GetSupportedAmenities, GetTasksOpenApiTaskid, GetTasksOpenApiTasks, GetViews, GetViewsId, GetWebhooks, GetWebhooksId, GroupReservationsOpenApiControllerCreate, GroupReservationsOpenApiControllerGetGroupReservation, GuestAppOpenApiControllerGetCifSummaryDetails, GuestsOpenApiControllerCreateGuest, GuestsOpenApiControllerGetGuest, GuestsOpenApiControllerGetGuestsList, GuestsOpenApiControllerUpdateGuest, ImportedCalendarOpenApiControllerCreateImportedCalendar, ImportedCalendarOpenApiControllerDeleteImportedCalendar, ImportedCalendarOpenApiControllerGetImportedCalendarById, ImportedCalendarOpenApiControllerGetImportedCalendars, ImportedCalendarOpenApiControllerPauseImportedCaledar, ImportedCalendarOpenApiControllerResumeImportedCaledar, ImportedCalendarOpenApiControllerUpdateImportedCalendar, InvoiceItemsControllerCreateInvoiceItem, JournalEntriesControllerList, OpenApiTaxesControllerCreateTax, OpenApiTaxesControllerDeleteTax, OpenApiTaxesControllerGetAccountLevelTaxes, OpenApiTaxesControllerGetUnitTypeActualTaxes, OpenApiTaxesControllerGetUnitTypeLevelTaxes, OpenApiTaxesControllerUpdateTax, OwnersControllerRetrieve, OwnersControllerUpdate, PatchAdditionalFeesId, PatchOwnersOwneridDocumentsDocumentid, PatchPropertiesSpacesSpaceSpaceidDetails, PatchReservationsIdPaymentsPaymentidCancel, PostAccountsIdCustomFields, PostAdditionalFeesAccount, PostAdditionalFeesInquiriesInquiryidUpsells, PostAdditionalFeesListingListingid, PostAdditionalFeesQuotesQuoteidAmount, PostCommunicationConversationsConversationidPosts, PostCommunicationConversationsConversationidSendMessage, PostContacts, PostGuestsIdPaymentMethods, PostHooks, PostIntegrations, PostListings, PostListingsCsv, PostListingsEmail, PostOwners, PostOwnersOwneridDocuments, PostPaymentProvidersIdAssignListings, PostPropertiesHouseRules, PostPropertiesSpacesSpaceSpaceidEdit, PostPropertiesSpacesSpaceSpaceidRemove, PostPropertiesSpacesUnitTypeUnittypeidAdd, PostReservations, PostReservationsApiReservationsReservationidPreApprove, PostReservationsCsv, PostReservationsEmail, PostReservationsIdApprove, PostReservationsIdDecline, PostReservationsIdInvoiceitems, PostReservationsIdPayments, PostReservationsIdPaymentsPaymentidRefund, PostReservationsIdRequestCancellationSync, PostSavedReplies, PostTasksOpenApiCreateSingleTask, PostViews, PostWebhooks, PriceAdjustmentsControllerCreateManualPriceAdjustments, PriceAdjustmentsControllerGetAllTotalAmountPriceAdjustment, PromotionControllerAssignListings, PromotionControllerUnassignListings, PutAccountsIdCustomFields, PutAvailabilityPricingApiCalendarListings, PutAvailabilityPricingApiCalendarListingsId, PutContactsId, PutFinancialsListingId, PutHooksHookid, PutIntegrationsId, PutListingsId, PutListingsIdAvailabilitySettings, PutListingsIdCustomFields, PutOwnersId, PutOwnersReservationsId, PutPropertiesHouseRulesUnitTypeUnittypeid, PutReservationsId, PutReservationsIdCustomFields, PutReservationsIdPaymentsPaymentid, PutSavedRepliesReplyid, PutTasksOpenApiTaskid, PutViewsId, PutWebhooksId, QuotesOpenApiControllerCreate, QuotesOpenApiControllerCreateMultiple, QuotesOpenApiControllerGetQuote, RatePlanControllerCreate, RatePlanControllerGetAll, RatePlanControllerGetById, RatePlanControllerGetByListing, RatePlanControllerInitAssignListings, RatePlanControllerInitUnassignListings, RatePlanControllerPatch, RatePlanControllerRemove, RatePlanControllerUpdate, RateStrategyControllerGetByUnitTypeId, RateStrategyControllerGetList, ReservationAccessCodeControllerGetLocksAndCodesByReservation, ReservationsControllerFolioBalances, ReservationsOpenApiControllerChangeStay, ReservationsOpenApiControllerCreateOwnerConfirmed, ReservationsOpenApiControllerCreateReservation, ReservationsOpenApiControllerGetReservationsByIds, ReservationsOpenApiControllerQuickBooking, ReservationsOpenApiControllerUpdateReservationCustomFields, ReservationsOpenApiControllerUpdateReservationDates, ReservationsOpenApiControllerUpdateReservationGuests, ReservationsOpenApiControllerUpdateReservationListing, ReservationsOpenApiControllerUpdateReservationNotes, ReservationsOpenApiControllerUpdateReservationSource, ReservationsOpenApiControllerUpdateReservationStatus, ReviewControllerGetListingsAverageReview, ReviewControllerGetReview, ReviewControllerGetReviews, ReviewControllerUpsertReview, ReviewControllerUpsertReviewReply, RoomPhotosControllerAssignRoomPhoto, RoomPhotosControllerUnassignRoomPhoto, ScrOpenApiControllerCreateScr, ScrOpenApiControllerGetScrByPublicId, ScrOpenApiControllerGetScrList, ScrOpenApiControllerRemoveSmartCalendarRule, ScrOpenApiControllerUpdateScr, SvixSecretApiControllerGetSecret, TaxesLevelConfigurationsControllerGetUnitTypeTaxesLevelConfigurations, TaxesLevelConfigurationsControllerUpsertTaxesLevelConfigurationsOpenApi, TransactionsControllerCreateCharge, TransactionsControllerCreateExpense, UpsertFields, UsersHttpControllerCreateUser, UsersHttpControllerGetUserById, UsersHttpControllerGetUsers, UsersHttpControllerRemoveUser, UsersHttpControllerUpdateUser, VendorsControllerGetAll, VendorsControllerGetById };
